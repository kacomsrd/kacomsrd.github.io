{"version":3,"sources":["webpack://tased/./src/app/scripts/auth/auth.ts"],"names":["appId","scopes","loginHintKey","config","auth","clientId","authority","redirectUri","window","location","origin","navigateToLoginRequestUrl","cache","cacheLocation","inTeams","Promise","resolve","reject","setTimeout","e","getContext","undefined","err","getLoginHint","async","ctx","loginHint","localStorage","getItem","client","getAuthParameters","hint","params","getRenewParameters","forceRefresh","loginPopup","authenticate","url","width","height","successCallback","failureCallback","getAuthTokenSomehow","needInteractionForPopup","error","acquireTokenSilent","accessToken","push","console","log","ssoSilent","this","setState","needInteraction"],"mappings":"oGAAA,obAIA,MAAMA,EAAQ,uCACRC,EAAS,CACX,YACA,gBACA,YACA,0BACA,iBACA,oBACA,qBACA,uBAGSC,EAAe,gBAEtBC,EAA6B,CAC/BC,KAAM,CACFC,SAAUL,EACVM,UAAW,2CACXC,YAAaC,OAAOC,SAASC,OAAS,iBACtCC,2BAA2B,GAE/BC,MAAO,CACHC,cAAe,iBAKVC,EAAU,IAAIC,QAAiB,CAACC,EAASC,KAClD,IACI,aAAiB,IAAMD,GAAQ,IAC/BE,WAAW,IAAMF,GAAQ,GAAQ,KACnC,MAAOG,GACLF,EAAOE,MAKR,SAASC,IACZ,OAAO,IAAIL,QAAQ,CAACC,EAASC,KACzB,IACI,aAAiBD,GACjBE,WAAW,IAAMF,OAAQK,GAAY,KACvC,MAAOC,GACLL,EAAOK,MAaZ,MAAMC,EAAeC,UACxB,SAAUV,EAAS,CACf,MAAMW,QAAYL,IAClB,OAAOK,GAAOA,EAAIC,WAAa,KAGnC,OAAOC,aAAaC,QAAQ1B,IAInB2B,EAAS,IAAI,IAA6B1B,GAGhD,SAAS2B,EAAkBC,GAC9B,MAAMC,EAAwC,CAC1C/B,OAAQ,IAAIA,IAOhB,OAJI8B,IACAC,EAAON,UAAYK,GAGhBC,EAIJ,SAASC,EAAmBF,GAC/B,MAAMC,EAAqC,CACvC/B,OAAQ,CAACD,KAAUC,GACnBiC,cAAc,GAOlB,OAJIH,IACAC,EAAON,UAAYK,GAGhBC,EAIJ,SAASG,IACZ,OAAO,IAAIpB,QAAgB,CAACC,EAASC,IACjC,iBAAqBmB,aAAa,CAC9BC,IAAK7B,OAAOC,SAASC,OAAS,mBAC9B4B,MAAO,IACPC,OAAQ,IACRC,gBAAiBxB,EACjByB,gBAAiBxB,KAKtBO,eAAekB,EAAqBX,EAAqBY,GAC5D,MAAMC,EAAe,GAGrB,IAEI,aADiBf,EAAOgB,mBAAmBZ,EAAmBF,KACpDe,YACZ,MAAOxB,GACLsB,EAAMG,KAAKzB,GACX0B,QAAQC,IAAI3B,GAIhB,IAEI,aADiBO,EAAOqB,UAAUpB,EAAkBC,KAC1Ce,YACZ,MAAOxB,GACLsB,EAAMG,KAAKzB,GACX0B,QAAQC,IAAI3B,GAIhB,GAAIqB,EAEA,MADAQ,KAAKC,SAAS,CAAEC,iBAAiB,EAAMT,UACjCA,EAGV,IACI,aAAaT,IACf,MAAOb,GAGL,MAFAsB,EAAMG,KAAKzB,GACX0B,QAAQC,IAAI3B,GACNsB","file":"20caf3225c486b43fb0b.js","sourcesContent":["import * as msal from \"@azure/msal-browser\";\r\nimport * as msalC from \"@azure/msal-common\";\r\nimport * as teams from \"@microsoft/teams-js\";\r\n\r\nconst appId = \"890c8d10-4bfd-4103-8a8d-8135accaee37\"; // MSALtest\r\nconst scopes = [\r\n    \"User.Read\", // read user profile\r\n    \"User.Read.All\", // read other users' profiles\r\n    \"Mail.Read\", // read user's mail\r\n    \"ChannelMessage.Read.All\", // obviously, read messages in a channel\r\n    \"Group.Read.All\", // Enumerate teams (Team = Group) and team information\r\n    \"Presence.Read.All\", // Read users' presence state\r\n    \"Directory.Read.All\", // members of a team\r\n    \"Group.ReadWrite.All\", // post to a channel? create channels? seems to do a lot\r\n];\r\n\r\nexport const loginHintKey = \"msalLoginHint\";\r\n\r\nconst config: msal.Configuration = {\r\n    auth: {\r\n        clientId: appId,\r\n        authority: \"https://login.microsoftonline.com/common\", // default is common, others:  https://login.microsoftonline.com/<tenant>  https://login.microsoftonline.com/organizations/  https://login.microsoftonline.com/consumers/\r\n        redirectUri: window.location.origin + \"/auth-end.html\",\r\n        navigateToLoginRequestUrl: false,\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\"\r\n    },\r\n};\r\n\r\n\r\nexport const inTeams = new Promise<boolean>((resolve, reject) => {\r\n    try {\r\n        teams.initialize(() => resolve(true));\r\n        setTimeout(() => resolve(false), 1000);\r\n    } catch (e) {\r\n        reject(e);\r\n    }\r\n});\r\n\r\n\r\nexport function getContext(): Promise<teams.Context> {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            teams.getContext(resolve);\r\n            setTimeout(() => resolve(undefined), 1000);\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n// export async function setLoginHint(hint: string) {\r\n//     if (await inTeams) {\r\n//         localStorage.setItem(loginHintKey, hint);\r\n//     }\r\n// }\r\n\r\n\r\nexport const getLoginHint = async (): Promise<string | null> => {\r\n    if (await inTeams) {\r\n        const ctx = await getContext();\r\n        return ctx && ctx.loginHint || null;\r\n    }\r\n\r\n    return localStorage.getItem(loginHintKey);\r\n};\r\n\r\n\r\nexport const client = new msal.PublicClientApplication(config);\r\n\r\n\r\nexport function getAuthParameters(hint?: string | null): msal.AuthenticationParameters {\r\n    const params: msal.AuthenticationParameters = {\r\n        scopes: [...scopes],\r\n    };\r\n\r\n    if (hint) {\r\n        params.loginHint = hint;\r\n    }\r\n\r\n    return params;\r\n}\r\n\r\n\r\nexport function getRenewParameters(hint?: string | null): msalC.TokenRenewParameters {\r\n    const params: msalC.TokenRenewParameters = {\r\n        scopes: [appId, ...scopes],\r\n        forceRefresh: false, // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n    };\r\n\r\n    if (hint) {\r\n        params.loginHint = hint;\r\n    }\r\n\r\n    return params;\r\n}\r\n\r\n\r\nexport function loginPopup(): Promise<string> {\r\n    return new Promise<string>((resolve, reject) =>\r\n        teams.authentication.authenticate({\r\n            url: window.location.origin + \"/auth-start.html\",\r\n            width: 600,\r\n            height: 535,\r\n            successCallback: resolve,\r\n            failureCallback: reject\r\n        }));\r\n}\r\n\r\n\r\nexport async function getAuthTokenSomehow (hint: string | null, needInteractionForPopup: boolean): Promise<string> {\r\n    const error: any[] = [];\r\n\r\n    // try to get the token silently via cache or refresh\r\n    try {\r\n        const re = await client.acquireTokenSilent(getRenewParameters(hint));\r\n        return re.accessToken;\r\n    } catch (err) {\r\n        error.push(err);\r\n        console.log(err);\r\n    }\r\n\r\n    // try silent SSO\r\n    try {\r\n        const re = await client.ssoSilent(getAuthParameters(hint));\r\n        return re.accessToken;\r\n    } catch (err) {\r\n        error.push(err);\r\n        console.log(err);\r\n    }\r\n\r\n    // if we are in a browser, out popup will probably be blocked, so give up here\r\n    if (needInteractionForPopup) {\r\n        this.setState({ needInteraction: true, error });\r\n        throw error;\r\n    }\r\n\r\n    try {\r\n        return await loginPopup();\r\n    } catch (err) {\r\n        error.push(err);\r\n        console.log(err);\r\n        throw error;\r\n    }\r\n}"],"sourceRoot":""}