(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["FindMsg"] = factory();
	else
		root["FindMsg"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}


//# sourceMappingURL=_tslib.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/app/ClientApplication.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/app/ClientApplication.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientApplication": () => (/* binding */ ClientApplication)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _crypto_CryptoOps_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/CryptoOps.js */ "./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/logger/Logger.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/crypto/ICrypto.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ServerError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _cache_BrowserCacheManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/BrowserCacheManager.js */ "./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.js");
/* harmony import */ var _config_Configuration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/Configuration.js */ "./node_modules/@azure/msal-browser/dist/config/Configuration.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.js */ "./node_modules/@azure/msal-browser/dist/packageMetadata.js");
/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../event/EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.js");
/* harmony import */ var _event_EventHandler_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../event/EventHandler.js */ "./node_modules/@azure/msal-browser/dist/event/EventHandler.js");
/* harmony import */ var _interaction_client_PopupClient_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../interaction_client/PopupClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.js");
/* harmony import */ var _interaction_client_RedirectClient_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../interaction_client/RedirectClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.js");
/* harmony import */ var _interaction_client_SilentIframeClient_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../interaction_client/SilentIframeClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.js");
/* harmony import */ var _interaction_client_SilentRefreshClient_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../interaction_client/SilentRefreshClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.js");
/* harmony import */ var _cache_TokenCache_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/TokenCache.js */ "./node_modules/@azure/msal-browser/dist/cache/TokenCache.js");
/* harmony import */ var _interaction_client_SilentAuthCodeClient_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../interaction_client/SilentAuthCodeClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




















/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ClientApplication = /** @class */ (function () {
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     */
    function ClientApplication(configuration) {
        /*
         * If loaded in an environment where window is not available,
         * set internal flag to false so that further requests fail.
         * This is to support server-side rendering environments.
         */
        this.isBrowserEnvironment = typeof window !== "undefined";
        // Set the configuration.
        this.config = (0,_config_Configuration_js__WEBPACK_IMPORTED_MODULE_0__.buildConfiguration)(configuration, this.isBrowserEnvironment);
        // Initialize logger
        this.logger = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.Logger(this.config.system.loggerOptions, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_2__.name, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_2__.version);
        // Initialize the network module class.
        this.networkClient = this.config.system.networkClient;
        // Initialize the navigation client class.
        this.navigationClient = this.config.system.navigationClient;
        // Initialize redirectResponse Map
        this.redirectResponse = new Map();
        // Initial hybrid spa map
        this.hybridAuthCodeResponses = new Map();
        // Initialize the crypto class.
        this.browserCrypto = this.isBrowserEnvironment ? new _crypto_CryptoOps_js__WEBPACK_IMPORTED_MODULE_3__.CryptoOps(this.logger) : _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_CRYPTO_IMPLEMENTATION;
        this.eventHandler = new _event_EventHandler_js__WEBPACK_IMPORTED_MODULE_5__.EventHandler(this.logger, this.browserCrypto);
        // Initialize the browser storage class.
        this.browserStorage = this.isBrowserEnvironment ?
            new _cache_BrowserCacheManager_js__WEBPACK_IMPORTED_MODULE_6__.BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger) :
            (0,_cache_BrowserCacheManager_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger);
        // Initialize the token cache
        this.tokenCache = new _cache_TokenCache_js__WEBPACK_IMPORTED_MODULE_7__.TokenCache(this.config, this.browserStorage, this.logger, this.browserCrypto);
    }
    // #region Redirect Flow
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */
    ClientApplication.prototype.handleRedirectPromise = function (hash) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var loggedInAccounts, redirectResponseKey, response, correlationId, redirectClient;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                this.logger.verbose("handleRedirectPromise called");
                loggedInAccounts = this.getAllAccounts();
                if (this.isBrowserEnvironment) {
                    redirectResponseKey = hash || _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__.Constants.EMPTY_STRING;
                    response = this.redirectResponse.get(redirectResponseKey);
                    if (typeof response === "undefined") {
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.HANDLE_REDIRECT_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect);
                        this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
                        correlationId = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.TemporaryCacheKeys.CORRELATION_ID, true) || "";
                        redirectClient = new _interaction_client_RedirectClient_js__WEBPACK_IMPORTED_MODULE_12__.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, correlationId);
                        response = redirectClient.handleRedirectPromise(hash)
                            .then(function (result) {
                            if (result) {
                                // Emit login event if number of accounts change
                                var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                                if (isLoggingIn) {
                                    _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, result);
                                    _this.logger.verbose("handleRedirectResponse returned result, login success");
                                }
                                else {
                                    _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, result);
                                    _this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                                }
                            }
                            _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.HANDLE_REDIRECT_END, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect);
                            return result;
                        })
                            .catch(function (e) {
                            // Emit login event if there is an account
                            if (loggedInAccounts.length > 0) {
                                _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, null, e);
                            }
                            else {
                                _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, null, e);
                            }
                            _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.HANDLE_REDIRECT_END, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect);
                            throw e;
                        });
                        this.redirectResponse.set(redirectResponseKey, response);
                    }
                    else {
                        this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
                    }
                    return [2 /*return*/, response];
                }
                this.logger.verbose("handleRedirectPromise returns null, not browser environment");
                return [2 /*return*/, null];
            });
        });
    };
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */
    ClientApplication.prototype.acquireTokenRedirect = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var isLoggedIn, redirectClient;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                // Preflight request
                this.logger.verbose("acquireTokenRedirect called");
                this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect);
                isLoggedIn = this.getAllAccounts().length > 0;
                if (isLoggedIn) {
                    this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, request);
                }
                else {
                    this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, request);
                }
                redirectClient = new _interaction_client_RedirectClient_js__WEBPACK_IMPORTED_MODULE_12__.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
                return [2 /*return*/, redirectClient.acquireToken(request).catch(function (e) {
                        // If logged in, emit acquire token events
                        if (isLoggedIn) {
                            _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, null, e);
                        }
                        else {
                            _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect, null, e);
                        }
                        throw e;
                    })];
            });
        });
    };
    // #endregion
    // #region Popup Flow
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.acquireTokenPopup = function (request) {
        var _this = this;
        try {
            this.logger.verbose("acquireTokenPopup called", request.correlationId);
            this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup);
        }
        catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
        // If logged in, emit acquire token events
        var loggedInAccounts = this.getAllAccounts();
        if (loggedInAccounts.length > 0) {
            this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup, request);
        }
        else {
            this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup, request);
        }
        var popupClient = new _interaction_client_PopupClient_js__WEBPACK_IMPORTED_MODULE_13__.PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
        return popupClient.acquireToken(request).then(function (result) {
            // If logged in, emit acquire token events
            var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
            if (isLoggingIn) {
                _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup, result);
            }
            else {
                _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup, result);
            }
            return result;
        }).catch(function (e) {
            if (loggedInAccounts.length > 0) {
                _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup, null, e);
            }
            else {
                _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup, null, e);
            }
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        });
    };
    // #endregion
    // #region Silent Flow
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.ssoSilent = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var silentIframeClient, silentTokenResult, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent);
                        this.logger.verbose("ssoSilent called", request.correlationId);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.SSO_SILENT_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, request);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        silentIframeClient = new _interaction_client_SilentIframeClient_js__WEBPACK_IMPORTED_MODULE_14__.SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.ApiId.ssoSilent, request.correlationId);
                        return [4 /*yield*/, silentIframeClient.acquireToken(request)];
                    case 2:
                        silentTokenResult = _a.sent();
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.SSO_SILENT_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, silentTokenResult);
                        return [2 /*return*/, silentTokenResult];
                    case 3:
                        e_1 = _a.sent();
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.SSO_SILENT_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, null, e_1);
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
     * This API is not indended for normal authorization code acquisition and redemption.
     *
     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
     *
     * @param request {@link AuthorizationCodeRequest}
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.acquireTokenByCode = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var response;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent);
                this.logger.trace("acquireTokenByCode called", request.correlationId);
                this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_BY_CODE_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, request);
                try {
                    if (!request.code) {
                        throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_15__.BrowserAuthError.createAuthCodeRequiredError();
                    }
                    response = this.hybridAuthCodeResponses.get(request.code);
                    if (!response) {
                        this.logger.verbose("Initiating new acquireTokenByCode request", request.correlationId);
                        response = this.acquireTokenByCodeAsync(request)
                            .then(function (result) {
                            _this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, result);
                            _this.hybridAuthCodeResponses.delete(request.code);
                            return result;
                        })
                            .catch(function (error) {
                            _this.hybridAuthCodeResponses.delete(request.code);
                            throw error;
                        });
                        this.hybridAuthCodeResponses.set(request.code, response);
                    }
                    else {
                        this.logger.verbose("Existing acquireTokenByCode request found", request.correlationId);
                    }
                    return [2 /*return*/, response];
                }
                catch (e) {
                    this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, null, e);
                    throw e;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Creates a SilentAuthCodeClient to redeem an authorization code.
     * @param request
     * @returns Result of the operation to redeem the authorization code
     */
    ClientApplication.prototype.acquireTokenByCodeAsync = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var silentAuthCodeClient, silentTokenResult;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.trace("acquireTokenByCodeAsync called", request.correlationId);
                        silentAuthCodeClient = new _interaction_client_SilentAuthCodeClient_js__WEBPACK_IMPORTED_MODULE_16__.SilentAuthCodeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.ApiId.acquireTokenByCode, request.correlationId);
                        return [4 /*yield*/, silentAuthCodeClient.acquireToken(request)];
                    case 1:
                        silentTokenResult = _a.sent();
                        return [2 /*return*/, silentTokenResult];
                }
            });
        });
    };
    /**
     * Use this function to obtain a token before every call to the API / resource provider
     *
     * MSAL return's a cached token when available
     * Or it send's a request to the STS to obtain a new token using a refresh token.
     *
     * @param {@link SilentRequest}
     *
     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.acquireTokenByRefreshToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var silentRefreshClient;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_10__.EventType.ACQUIRE_TOKEN_NETWORK_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Silent, request);
                // block the reload if it occurred inside a hidden iframe
                _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserUtils.blockReloadInHiddenIframes();
                silentRefreshClient = new _interaction_client_SilentRefreshClient_js__WEBPACK_IMPORTED_MODULE_18__.SilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
                return [2 /*return*/, silentRefreshClient.acquireToken(request).catch(function (e) {
                        var isServerError = e instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_19__.ServerError;
                        var isInteractionRequiredError = e instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_20__.InteractionRequiredAuthError;
                        var isInvalidGrantError = (e.errorCode === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.BrowserConstants.INVALID_GRANT_ERROR);
                        if (isServerError && isInvalidGrantError && !isInteractionRequiredError) {
                            _this.logger.verbose("Refresh token expired or invalid, attempting acquire token by iframe", request.correlationId);
                            var silentIframeClient = new _interaction_client_SilentIframeClient_js__WEBPACK_IMPORTED_MODULE_14__.SilentIframeClient(_this.config, _this.browserStorage, _this.browserCrypto, _this.logger, _this.eventHandler, _this.navigationClient, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.ApiId.acquireTokenSilent_authCode, request.correlationId);
                            return silentIframeClient.acquireToken(request);
                        }
                        throw e;
                    })];
            });
        });
    };
    // #endregion
    // #region Logout
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */
    ClientApplication.prototype.logout = function (logoutRequest) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.");
                return [2 /*return*/, this.logoutRedirect(logoutRequest)];
            });
        });
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */
    ClientApplication.prototype.logoutRedirect = function (logoutRequest) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {
            var redirectClient;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {
                this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect);
                redirectClient = new _interaction_client_RedirectClient_js__WEBPACK_IMPORTED_MODULE_12__.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
                return [2 /*return*/, redirectClient.logout(logoutRequest)];
            });
        });
    };
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */
    ClientApplication.prototype.logoutPopup = function (logoutRequest) {
        try {
            this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup);
            var popupClient = new _interaction_client_PopupClient_js__WEBPACK_IMPORTED_MODULE_13__.PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
            return popupClient.logout(logoutRequest);
        }
        catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
    };
    // #endregion
    // #region Account APIs
    /**
     * Returns all accounts that MSAL currently has data for.
     * (the account object is created at the time of successful login)
     * or empty array when no accounts are found
     * @returns Array of account objects in cache
     */
    ClientApplication.prototype.getAllAccounts = function () {
        this.logger.verbose("getAllAccounts called");
        return this.isBrowserEnvironment ? this.browserStorage.getAllAccounts() : [];
    };
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param userName
     * @returns The account object stored in MSAL
     */
    ClientApplication.prototype.getAccountByUsername = function (userName) {
        var allAccounts = this.getAllAccounts();
        if (!_azure_msal_common__WEBPACK_IMPORTED_MODULE_21__.StringUtils.isEmpty(userName) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching username found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching username: " + userName);
            return allAccounts.filter(function (accountObj) { return accountObj.username.toLowerCase() === userName.toLowerCase(); })[0] || null;
        }
        else {
            this.logger.verbose("getAccountByUsername: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */
    ClientApplication.prototype.getAccountByHomeId = function (homeAccountId) {
        var allAccounts = this.getAllAccounts();
        if (!_azure_msal_common__WEBPACK_IMPORTED_MODULE_21__.StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching homeAccountId found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching homeAccountId: " + homeAccountId);
            return allAccounts.filter(function (accountObj) { return accountObj.homeAccountId === homeAccountId; })[0] || null;
        }
        else {
            this.logger.verbose("getAccountByHomeId: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */
    ClientApplication.prototype.getAccountByLocalId = function (localAccountId) {
        var allAccounts = this.getAllAccounts();
        if (!_azure_msal_common__WEBPACK_IMPORTED_MODULE_21__.StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching localAccountId found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching localAccountId: " + localAccountId);
            return allAccounts.filter(function (accountObj) { return accountObj.localAccountId === localAccountId; })[0] || null;
        }
        else {
            this.logger.verbose("getAccountByLocalId: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */
    ClientApplication.prototype.setActiveAccount = function (account) {
        this.browserStorage.setActiveAccount(account);
    };
    /**
     * Gets the currently active account
     */
    ClientApplication.prototype.getActiveAccount = function () {
        return this.browserStorage.getActiveAccount();
    };
    // #endregion
    // #region Helpers
    /**
     * Helper to validate app environment before making an auth request
     * * @param interactionType
     */
    ClientApplication.prototype.preflightBrowserEnvironmentCheck = function (interactionType) {
        this.logger.verbose("preflightBrowserEnvironmentCheck started");
        // Block request if not in browser environment
        _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserUtils.blockNonBrowserEnvironment(this.isBrowserEnvironment);
        // Block redirects if in an iframe
        _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserUtils.blockRedirectInIframe(interactionType, this.config.system.allowRedirectInIframe);
        // Block auth requests inside a hidden iframe
        _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserUtils.blockReloadInHiddenIframes();
        // Block redirectUri opened in a popup from calling MSAL APIs
        _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserUtils.blockAcquireTokenInPopups();
        // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
        if (interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect &&
            this.config.cache.cacheLocation === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.BrowserCacheLocation.MemoryStorage &&
            !this.config.cache.storeAuthStateInCookie) {
            throw _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_22__.BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError();
        }
        if (interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Redirect || interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_11__.InteractionType.Popup) {
            this.preflightInteractiveRequest();
        }
    };
    /**
     * Helper to validate app environment before making a request.
     * @param request
     * @param interactionType
     */
    ClientApplication.prototype.preflightInteractiveRequest = function () {
        this.logger.verbose("preflightInteractiveRequest called, validating app environment");
        // block the reload if it occurred inside a hidden iframe
        _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserUtils.blockReloadInHiddenIframes();
        // Set interaction in progress temporary cache or throw if alread set.
        this.browserStorage.setInteractionInProgress(true);
    };
    /**
     * Adds event callbacks to array
     * @param callback
     */
    ClientApplication.prototype.addEventCallback = function (callback) {
        return this.eventHandler.addEventCallback(callback);
    };
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */
    ClientApplication.prototype.removeEventCallback = function (callbackId) {
        this.eventHandler.removeEventCallback(callbackId);
    };
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */
    ClientApplication.prototype.enableAccountStorageEvents = function () {
        this.eventHandler.enableAccountStorageEvents();
    };
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */
    ClientApplication.prototype.disableAccountStorageEvents = function () {
        this.eventHandler.disableAccountStorageEvents();
    };
    /**
     * Gets the token cache for the application.
     */
    ClientApplication.prototype.getTokenCache = function () {
        return this.tokenCache;
    };
    /**
     * Returns the logger instance
     */
    ClientApplication.prototype.getLogger = function () {
        return this.logger;
    };
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */
    ClientApplication.prototype.setLogger = function (logger) {
        this.logger = logger;
    };
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */
    ClientApplication.prototype.initializeWrapperLibrary = function (sku, version) {
        // Validate the SKU passed in is one we expect
        this.browserStorage.setWrapperMetadata(sku, version);
    };
    /**
     * Sets navigation client
     * @param navigationClient
     */
    ClientApplication.prototype.setNavigationClient = function (navigationClient) {
        this.navigationClient = navigationClient;
    };
    /**
     * Returns the configuration object
     */
    ClientApplication.prototype.getConfiguration = function () {
        return this.config;
    };
    return ClientApplication;
}());


//# sourceMappingURL=ClientApplication.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stubbedPublicClientApplication": () => (/* binding */ stubbedPublicClientApplication)
/* harmony export */ });
/* harmony import */ var _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var stubbedPublicClientApplication = {
    acquireTokenPopup: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenRedirect: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenSilent: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenByCode: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    getAllAccounts: function () {
        return [];
    },
    getAccountByHomeId: function () {
        return null;
    },
    getAccountByUsername: function () {
        return null;
    },
    getAccountByLocalId: function () {
        return null;
    },
    handleRedirectPromise: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    loginPopup: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    loginRedirect: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logout: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logoutRedirect: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logoutPopup: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    ssoSilent: function () {
        return Promise.reject(_error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    addEventCallback: function () {
        return null;
    },
    removeEventCallback: function () {
        return;
    },
    enableAccountStorageEvents: function () {
        return;
    },
    disableAccountStorageEvents: function () {
        return;
    },
    getTokenCache: function () {
        throw _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    },
    getLogger: function () {
        throw _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    },
    setLogger: function () {
        return;
    },
    setActiveAccount: function () {
        return;
    },
    getActiveAccount: function () {
        return null;
    },
    initializeWrapperLibrary: function () {
        return;
    },
    setNavigationClient: function () {
        return;
    },
    getConfiguration: function () {
        throw _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    }
};


//# sourceMappingURL=IPublicClientApplication.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PublicClientApplication": () => (/* binding */ PublicClientApplication)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _ClientApplication_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ClientApplication.js */ "./node_modules/@azure/msal-browser/dist/app/ClientApplication.js");
/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../event/EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _interaction_client_SilentCacheClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interaction_client/SilentCacheClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */








/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
 * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
 */
var PublicClientApplication = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(PublicClientApplication, _super);
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration object for the MSAL PublicClientApplication instance
     */
    function PublicClientApplication(configuration) {
        var _this = _super.call(this, configuration) || this;
        _this.activeSilentTokenRequests = new Map();
        return _this;
    }
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */
    PublicClientApplication.prototype.loginRedirect = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                this.logger.verbose("loginRedirect called");
                return [2 /*return*/, this.acquireTokenRedirect(request || _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_REQUEST)];
            });
        });
    };
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    PublicClientApplication.prototype.loginPopup = function (request) {
        this.logger.verbose("loginPopup called");
        return this.acquireTokenPopup(request || _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_REQUEST);
    };
    /**
     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
     */
    PublicClientApplication.prototype.acquireTokenSilent = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var account, thumbprint, silentRequestKey, cachedResponse, response;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                this.preflightBrowserEnvironmentCheck(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Silent);
                this.logger.verbose("acquireTokenSilent called", request.correlationId);
                account = request.account || this.getActiveAccount();
                if (!account) {
                    throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createNoAccountError();
                }
                thumbprint = {
                    clientId: this.config.auth.clientId,
                    authority: request.authority || "",
                    scopes: request.scopes,
                    homeAccountIdentifier: account.homeAccountId,
                    claims: request.claims,
                    authenticationScheme: request.authenticationScheme,
                    resourceRequestMethod: request.resourceRequestMethod,
                    resourceRequestUri: request.resourceRequestUri,
                    shrClaims: request.shrClaims,
                    sshKid: request.sshKid
                };
                silentRequestKey = JSON.stringify(thumbprint);
                cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);
                if (typeof cachedResponse === "undefined") {
                    this.logger.verbose("acquireTokenSilent called for the first time, storing active request", request.correlationId);
                    response = this.acquireTokenSilentAsync(request, account)
                        .then(function (result) {
                        _this.activeSilentTokenRequests.delete(silentRequestKey);
                        return result;
                    })
                        .catch(function (error) {
                        _this.activeSilentTokenRequests.delete(silentRequestKey);
                        throw error;
                    });
                    this.activeSilentTokenRequests.set(silentRequestKey, response);
                    return [2 /*return*/, response];
                }
                else {
                    this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call", request.correlationId);
                    return [2 /*return*/, cachedResponse];
                }
            });
        });
    };
    /**
     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
     * @param {@link (SilentRequest:type)}
     * @param {@link (AccountInfo:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}
     */
    PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var silentCacheClient, silentRequest;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        silentCacheClient = new _interaction_client_SilentCacheClient_js__WEBPACK_IMPORTED_MODULE_3__.SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
                        return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];
                    case 1:
                        silentRequest = _a.sent();
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_4__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Silent, request);
                        return [2 /*return*/, silentCacheClient.acquireToken(silentRequest).catch(function () { return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function () {
                                var tokenRenewalResult, tokenRenewalError_1;
                                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 2, , 3]);
                                            return [4 /*yield*/, this.acquireTokenByRefreshToken(silentRequest)];
                                        case 1:
                                            tokenRenewalResult = _a.sent();
                                            this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_4__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Silent, tokenRenewalResult);
                                            return [2 /*return*/, tokenRenewalResult];
                                        case 2:
                                            tokenRenewalError_1 = _a.sent();
                                            this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_4__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Silent, null, tokenRenewalError_1);
                                            throw tokenRenewalError_1;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })];
                }
            });
        });
    };
    return PublicClientApplication;
}(_ClientApplication_js__WEBPACK_IMPORTED_MODULE_5__.ClientApplication));


//# sourceMappingURL=PublicClientApplication.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncMemoryStorage": () => (/* binding */ AsyncMemoryStorage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _DatabaseStorage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DatabaseStorage.js */ "./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.js");
/* harmony import */ var _MemoryStorage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MemoryStorage.js */ "./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */






/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,
 * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.
 */
var AsyncMemoryStorage = /** @class */ (function () {
    function AsyncMemoryStorage(logger) {
        this.inMemoryCache = new _MemoryStorage_js__WEBPACK_IMPORTED_MODULE_0__.MemoryStorage();
        this.indexedDBCache = new _DatabaseStorage_js__WEBPACK_IMPORTED_MODULE_1__.DatabaseStorage();
        this.logger = logger;
    }
    AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {
        if (error instanceof _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError && error.errorCode === _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthErrorMessage.databaseUnavailable.code) {
            this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.");
        }
    };
    /**
     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous
     * storage object if item isn't found in-memory.
     * @param key
     */
    AsyncMemoryStorage.prototype.getItem = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {
            var item, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        item = this.inMemoryCache.getItem(key);
                        if (!!item) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage.");
                        return [4 /*yield*/, this.indexedDBCache.getItem(key)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        this.handleDatabaseAccessError(e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, item];
                }
            });
        });
    };
    /**
     * Sets the item in the in-memory cache and then tries to set it in the asynchronous
     * storage object with the given key.
     * @param key
     * @param value
     */
    AsyncMemoryStorage.prototype.setItem = function (key, value) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {
            var e_2;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.inMemoryCache.setItem(key, value);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.indexedDBCache.setItem(key, value)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        this.handleDatabaseAccessError(e_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.
     * @param key
     */
    AsyncMemoryStorage.prototype.removeItem = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {
            var e_3;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.inMemoryCache.removeItem(key);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.indexedDBCache.removeItem(key)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _a.sent();
                        this.handleDatabaseAccessError(e_3);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the
     * asynchronous storage object.
     */
    AsyncMemoryStorage.prototype.getKeys = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {
            var cacheKeys, e_4;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheKeys = this.inMemoryCache.getKeys();
                        if (!(cacheKeys.length === 0)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.logger.verbose("In-memory cache is empty, now querying persistent storage.");
                        return [4 /*yield*/, this.indexedDBCache.getKeys()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_4 = _a.sent();
                        this.handleDatabaseAccessError(e_4);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, cacheKeys];
                }
            });
        });
    };
    /**
     * Returns true or false if the given key is present in the cache.
     * @param key
     */
    AsyncMemoryStorage.prototype.containsKey = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {
            var containsKey, e_5;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        containsKey = this.inMemoryCache.containsKey(key);
                        if (!!containsKey) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.logger.verbose("Key not found in in-memory cache, now querying persistent storage.");
                        return [4 /*yield*/, this.indexedDBCache.containsKey(key)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_5 = _a.sent();
                        this.handleDatabaseAccessError(e_5);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, containsKey];
                }
            });
        });
    };
    /**
     * Clears in-memory Map and tries to delete the IndexedDB database.
     */
    AsyncMemoryStorage.prototype.clear = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {
            var e_6;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.inMemoryCache.clear();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.indexedDBCache.deleteDatabase()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_6 = _a.sent();
                        this.handleDatabaseAccessError(e_6);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return AsyncMemoryStorage;
}());


//# sourceMappingURL=AsyncMemoryStorage.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserCacheManager": () => (/* binding */ BrowserCacheManager),
/* harmony export */   "DEFAULT_BROWSER_CACHE_MANAGER": () => (/* binding */ DEFAULT_BROWSER_CACHE_MANAGER)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/CacheManager.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/IdTokenEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/RefreshTokenEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AppMetadataEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/ServerTelemetryEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AuthorityMetadataEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/ThrottlingEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/account/CcsCredential.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/crypto/ICrypto.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _BrowserStorage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BrowserStorage.js */ "./node_modules/@azure/msal-browser/dist/cache/BrowserStorage.js");
/* harmony import */ var _MemoryStorage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MemoryStorage.js */ "./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.js");
/* harmony import */ var _utils_BrowserProtocolUtils_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/BrowserProtocolUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */









/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements the cache storage interface for MSAL through browser local or session storage.
 * Cookies are only used if storeAuthStateInCookie is true, and are only used for
 * parameters such as state and nonce, generally.
 */
var BrowserCacheManager = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(BrowserCacheManager, _super);
    function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {
        var _this = _super.call(this, clientId, cryptoImpl) || this;
        // Cookie life calculation (hours * minutes * seconds * ms)
        _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;
        _this.cacheConfig = cacheConfig;
        _this.logger = logger;
        _this.internalStorage = new _MemoryStorage_js__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();
        _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);
        _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation);
        // Migrate any cache entries from older versions of MSAL.
        _this.migrateCacheEntries();
        return _this;
    }
    /**
     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
     * @param cacheLocation
     */
    BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {
        switch (cacheLocation) {
            case _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.LocalStorage:
            case _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new _BrowserStorage_js__WEBPACK_IMPORTED_MODULE_3__.BrowserStorage(cacheLocation);
                }
                catch (e) {
                    this.logger.verbose(e);
                    break;
                }
        }
        this.cacheConfig.cacheLocation = _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.MemoryStorage;
        return new _MemoryStorage_js__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();
    };
    /**
     *
     * @param cacheLocation
     */
    BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (cacheLocation) {
        switch (cacheLocation) {
            case _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.LocalStorage:
            case _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new _BrowserStorage_js__WEBPACK_IMPORTED_MODULE_3__.BrowserStorage(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.SessionStorage);
                }
                catch (e) {
                    this.logger.verbose(e);
                    return this.internalStorage;
                }
            case _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.MemoryStorage:
            default:
                return this.internalStorage;
        }
    };
    /**
     * Migrate all old cache entries to new schema. No rollback supported.
     * @param storeAuthStateInCookie
     */
    BrowserCacheManager.prototype.migrateCacheEntries = function () {
        var _this = this;
        var idTokenKey = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ID_TOKEN;
        var clientInfoKey = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.CLIENT_INFO;
        var errorKey = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ERROR;
        var errorDescKey = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ERROR_DESC;
        var idTokenValue = this.browserStorage.getItem(idTokenKey);
        var clientInfoValue = this.browserStorage.getItem(clientInfoKey);
        var errorValue = this.browserStorage.getItem(errorKey);
        var errorDescValue = this.browserStorage.getItem(errorDescKey);
        var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];
        var keysToMigrate = [_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ID_TOKEN, _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.CLIENT_INFO, _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ERROR, _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ERROR_DESC];
        keysToMigrate.forEach(function (cacheKey, index) { return _this.migrateCacheEntry(cacheKey, values[index]); });
    };
    /**
     * Utility function to help with migration.
     * @param newKey
     * @param value
     * @param storeAuthStateInCookie
     */
    BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {
        if (value) {
            this.setTemporaryCache(newKey, value, true);
        }
    };
    /**
     * Parses passed value as JSON object, JSON.parse() will throw an error.
     * @param input
     */
    BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {
        try {
            var parsedJson = JSON.parse(jsonValue);
            /**
             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
             *
             */
            return (parsedJson && typeof parsedJson === "object") ? parsedJson : null;
        }
        catch (error) {
            return null;
        }
    };
    /**
     * fetches the entry from the browser storage based off the key
     * @param key
     */
    BrowserCacheManager.prototype.getItem = function (key) {
        return this.browserStorage.getItem(key);
    };
    /**
     * sets the entry in the browser storage
     * @param key
     * @param value
     */
    BrowserCacheManager.prototype.setItem = function (key, value) {
        this.browserStorage.setItem(key, value);
    };
    /**
     * fetch the account entity from the platform cache
     * @param accountKey
     */
    BrowserCacheManager.prototype.getAccount = function (accountKey) {
        var account = this.getItem(accountKey);
        if (!account) {
            return null;
        }
        var parsedAccount = this.validateAndParseJson(account);
        if (!parsedAccount || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.AccountEntity.isAccountEntity(parsedAccount)) {
            return null;
        }
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.AccountEntity(), parsedAccount);
    };
    /**
     * set account entity in the platform cache
     * @param key
     * @param value
     */
    BrowserCacheManager.prototype.setAccount = function (account) {
        this.logger.trace("BrowserCacheManager.setAccount called");
        var key = account.generateAccountKey();
        this.setItem(key, JSON.stringify(account));
    };
    /**
     * generates idToken entity from a string
     * @param idTokenKey
     */
    BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {
        var value = this.getItem(idTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        var parsedIdToken = this.validateAndParseJson(value);
        if (!parsedIdToken || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_7__.IdTokenEntity.isIdTokenEntity(parsedIdToken)) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit");
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_7__.IdTokenEntity(), parsedIdToken);
    };
    /**
     * set IdToken credential to the platform cache
     * @param idToken
     */
    BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {
        this.logger.trace("BrowserCacheManager.setIdTokenCredential called");
        var idTokenKey = idToken.generateCredentialKey();
        this.setItem(idTokenKey, JSON.stringify(idToken));
    };
    /**
     * generates accessToken entity from a string
     * @param key
     */
    BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {
        var value = this.getItem(accessTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        var parsedAccessToken = this.validateAndParseJson(value);
        if (!parsedAccessToken || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_8__.AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit");
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__.AccessTokenEntity(), parsedAccessToken);
    };
    /**
     * set accessToken credential to the platform cache
     * @param accessToken
     */
    BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {
        this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");
        var accessTokenKey = accessToken.generateCredentialKey();
        this.setItem(accessTokenKey, JSON.stringify(accessToken));
    };
    /**
     * generates refreshToken entity from a string
     * @param refreshTokenKey
     */
    BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {
        var value = this.getItem(refreshTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        var parsedRefreshToken = this.validateAndParseJson(value);
        if (!parsedRefreshToken || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_9__.RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit");
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__.RefreshTokenEntity(), parsedRefreshToken);
    };
    /**
     * set refreshToken credential to the platform cache
     * @param refreshToken
     */
    BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {
        this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");
        var refreshTokenKey = refreshToken.generateCredentialKey();
        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));
    };
    /**
     * fetch appMetadata entity from the platform cache
     * @param appMetadataKey
     */
    BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {
        var value = this.getItem(appMetadataKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_10__.AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit");
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_10__.AppMetadataEntity(), parsedMetadata);
    };
    /**
     * set appMetadata entity to the platform cache
     * @param appMetadata
     */
    BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {
        this.logger.trace("BrowserCacheManager.setAppMetadata called");
        var appMetadataKey = appMetadata.generateAppMetadataKey();
        this.setItem(appMetadataKey, JSON.stringify(appMetadata));
    };
    /**
     * fetch server telemetry entity from the platform cache
     * @param serverTelemetryKey
     */
    BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {
        var value = this.getItem(serverTelemetryKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_11__.ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit");
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_11__.ServerTelemetryEntity(), parsedMetadata);
    };
    /**
     * set server telemetry entity to the platform cache
     * @param serverTelemetryKey
     * @param serverTelemetry
     */
    BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {
        this.logger.trace("BrowserCacheManager.setServerTelemetry called");
        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));
    };
    /**
     *
     */
    BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {
        var value = this.internalStorage.getItem(key);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (parsedMetadata && _azure_msal_common__WEBPACK_IMPORTED_MODULE_12__.AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit");
            return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_12__.AuthorityMetadataEntity(), parsedMetadata);
        }
        return null;
    };
    /**
     *
     */
    BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {
        var _this = this;
        var allKeys = this.internalStorage.getKeys();
        return allKeys.filter(function (key) {
            return _this.isAuthorityMetadata(key);
        });
    };
    /**
     * Sets wrapper metadata in memory
     * @param wrapperSKU
     * @param wrapperVersion
     */
    BrowserCacheManager.prototype.setWrapperMetadata = function (wrapperSKU, wrapperVersion) {
        this.internalStorage.setItem(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);
        this.internalStorage.setItem(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);
    };
    /**
     * Returns wrapper metadata from in-memory storage
     */
    BrowserCacheManager.prototype.getWrapperMetadata = function () {
        var sku = this.internalStorage.getItem(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InMemoryCacheKeys.WRAPPER_SKU) || "";
        var version = this.internalStorage.getItem(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InMemoryCacheKeys.WRAPPER_VER) || "";
        return [sku, version];
    };
    /**
     *
     * @param entity
     */
    BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {
        this.logger.trace("BrowserCacheManager.setAuthorityMetadata called");
        this.internalStorage.setItem(key, JSON.stringify(entity));
    };
    /**
     * Gets the active account
     */
    BrowserCacheManager.prototype.getActiveAccount = function () {
        var activeAccountIdKey = this.generateCacheKey(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ACTIVE_ACCOUNT);
        var activeAccountId = this.browserStorage.getItem(activeAccountIdKey);
        if (!activeAccountId) {
            return null;
        }
        return this.getAccountInfoByFilter({ localAccountId: activeAccountId })[0] || null;
    };
    /**
     * Sets the active account's localAccountId in cache
     * @param account
     */
    BrowserCacheManager.prototype.setActiveAccount = function (account) {
        var activeAccountIdKey = this.generateCacheKey(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ACTIVE_ACCOUNT);
        if (account) {
            this.logger.verbose("setActiveAccount: Active account set");
            this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);
        }
        else {
            this.logger.verbose("setActiveAccount: No account passed, active account not set");
            this.browserStorage.removeItem(activeAccountIdKey);
        }
    };
    /**
     * Gets a list of accounts that match all of the filters provided
     * @param account
     */
    BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {
        var allAccounts = this.getAllAccounts();
        return allAccounts.filter(function (accountObj) {
            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {
                return false;
            }
            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {
                return false;
            }
            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {
                return false;
            }
            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {
                return false;
            }
            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {
                return false;
            }
            return true;
        });
    };
    /**
     * fetch throttling entity from the platform cache
     * @param throttlingCacheKey
     */
    BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {
        var value = this.getItem(throttlingCacheKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        var parsedThrottlingCache = this.validateAndParseJson(value);
        if (!parsedThrottlingCache || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_13__.ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit");
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_13__.ThrottlingEntity(), parsedThrottlingCache);
    };
    /**
     * set throttling entity to the platform cache
     * @param throttlingCacheKey
     * @param throttlingCache
     */
    BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {
        this.logger.trace("BrowserCacheManager.setThrottlingCache called");
        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));
    };
    /**
     * Gets cache item with given key.
     * Will retrieve from cookies if storeAuthStateInCookie is set to true.
     * @param key
     */
    BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {
        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        if (this.cacheConfig.storeAuthStateInCookie) {
            var itemCookie = this.getItemCookie(key);
            if (itemCookie) {
                this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies");
                return itemCookie;
            }
        }
        var value = this.temporaryCacheStorage.getItem(key);
        if (!value) {
            // If temp cache item not found in session/memory, check local storage for items set by old versions
            if (this.cacheConfig.cacheLocation === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.LocalStorage) {
                var item = this.browserStorage.getItem(key);
                if (item) {
                    this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage");
                    return item;
                }
            }
            this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned");
        return value;
    };
    /**
     * Sets the cache item with the key and value given.
     * Stores in cookie if storeAuthStateInCookie is set to true.
     * This can cause cookie overflow if used incorrectly.
     * @param key
     * @param value
     */
    BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {
        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        this.temporaryCacheStorage.setItem(key, value);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie");
            this.setItemCookie(key, value);
        }
    };
    /**
     * Removes the cache item with the given key.
     * Will also clear the cookie item if storeAuthStateInCookie is set to true.
     * @param key
     */
    BrowserCacheManager.prototype.removeItem = function (key) {
        this.browserStorage.removeItem(key);
        this.temporaryCacheStorage.removeItem(key);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie");
            this.clearItemCookie(key);
        }
        return true;
    };
    /**
     * Checks whether key is in cache.
     * @param key
     */
    BrowserCacheManager.prototype.containsKey = function (key) {
        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);
    };
    /**
     * Gets all keys in window.
     */
    BrowserCacheManager.prototype.getKeys = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__spread)(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());
    };
    /**
     * Clears all cache entries created by MSAL.
     */
    BrowserCacheManager.prototype.clear = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Removes all accounts and their credentials
                    return [4 /*yield*/, this.removeAllAccounts()];
                    case 1:
                        // Removes all accounts and their credentials
                        _a.sent();
                        this.removeAppMetadata();
                        // Removes all remaining MSAL cache items
                        this.getKeys().forEach(function (cacheKey) {
                            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js
                            if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(_this.clientId) !== -1))) {
                                _this.removeItem(cacheKey);
                            }
                        });
                        this.internalStorage.clear();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Add value to cookies
     * @param cookieName
     * @param cookieValue
     * @param expires
     */
    BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {
        var cookieStr = encodeURIComponent(cookieName) + "=" + encodeURIComponent(cookieValue) + ";path=/;";
        if (expires) {
            var expireTime = this.getCookieExpirationTime(expires);
            cookieStr += "expires=" + expireTime + ";";
        }
        if (this.cacheConfig.secureCookies) {
            cookieStr += "Secure;";
        }
        document.cookie = cookieStr;
    };
    /**
     * Get one item by key from cookies
     * @param cookieName
     */
    BrowserCacheManager.prototype.getItemCookie = function (cookieName) {
        var name = encodeURIComponent(cookieName) + "=";
        var cookieList = document.cookie.split(";");
        for (var i = 0; i < cookieList.length; i++) {
            var cookie = cookieList[i];
            while (cookie.charAt(0) === " ") {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(name) === 0) {
                return decodeURIComponent(cookie.substring(name.length, cookie.length));
            }
        }
        return "";
    };
    /**
     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.
     */
    BrowserCacheManager.prototype.clearMsalCookies = function () {
        var _this = this;
        var cookiePrefix = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + this.clientId;
        var cookieList = document.cookie.split(";");
        cookieList.forEach(function (cookie) {
            while (cookie.charAt(0) === " ") {
                // eslint-disable-next-line no-param-reassign
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(cookiePrefix) === 0) {
                var cookieKey = cookie.split("=")[0];
                _this.clearItemCookie(cookieKey);
            }
        });
    };
    /**
     * Clear an item in the cookies by key
     * @param cookieName
     */
    BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {
        this.setItemCookie(cookieName, "", -1);
    };
    /**
     * Get cookie expiration time
     * @param cookieLifeDays
     */
    BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {
        var today = new Date();
        var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);
        return expr.toUTCString();
    };
    /**
     * Gets the cache object referenced by the browser
     */
    BrowserCacheManager.prototype.getCache = function () {
        return this.browserStorage;
    };
    /**
     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser
     */
    BrowserCacheManager.prototype.setCache = function () {
        // sets nothing
    };
    /**
     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
     * @param key
     * @param addInstanceId
     */
    BrowserCacheManager.prototype.generateCacheKey = function (key) {
        var generatedKey = this.validateAndParseJson(key);
        if (!generatedKey) {
            if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_14__.StringUtils.startsWith(key, _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX) || _azure_msal_common__WEBPACK_IMPORTED_MODULE_14__.StringUtils.startsWith(key, _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ADAL_ID_TOKEN)) {
                return key;
            }
            return _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + this.clientId + "." + key;
        }
        return JSON.stringify(key);
    };
    /**
     * Create authorityKey to cache authority
     * @param state
     */
    BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {
        var stateId = _azure_msal_common__WEBPACK_IMPORTED_MODULE_15__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.AUTHORITY + "." + stateId);
    };
    /**
     * Create Nonce key to cache nonce
     * @param state
     */
    BrowserCacheManager.prototype.generateNonceKey = function (stateString) {
        var stateId = _azure_msal_common__WEBPACK_IMPORTED_MODULE_15__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.NONCE_IDTOKEN + "." + stateId);
    };
    /**
     * Creates full cache key for the request state
     * @param stateString State string for the request
     */
    BrowserCacheManager.prototype.generateStateKey = function (stateString) {
        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests
        var stateId = _azure_msal_common__WEBPACK_IMPORTED_MODULE_15__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.REQUEST_STATE + "." + stateId);
    };
    /**
     * Gets the cached authority based on the cached state. Returns empty if no cached state found.
     */
    BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {
        var stateCacheKey = this.generateStateKey(cachedState);
        var state = this.getTemporaryCache(stateCacheKey);
        if (!state) {
            return null;
        }
        var authorityCacheKey = this.generateAuthorityKey(state);
        return this.getTemporaryCache(authorityCacheKey);
    };
    /**
     * Updates account, authority, and state in cache
     * @param serverAuthenticationRequest
     * @param account
     */
    BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {
        this.logger.trace("BrowserCacheManager.updateCacheEntries called");
        // Cache the request state
        var stateCacheKey = this.generateStateKey(state);
        this.setTemporaryCache(stateCacheKey, state, false);
        // Cache the nonce
        var nonceCacheKey = this.generateNonceKey(state);
        this.setTemporaryCache(nonceCacheKey, nonce, false);
        // Cache authorityKey
        var authorityCacheKey = this.generateAuthorityKey(state);
        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);
        if (account) {
            var ccsCredential = {
                credential: account.homeAccountId,
                type: _azure_msal_common__WEBPACK_IMPORTED_MODULE_16__.CcsCredentialType.HOME_ACCOUNT_ID
            };
            this.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
        }
        else if (!_azure_msal_common__WEBPACK_IMPORTED_MODULE_14__.StringUtils.isEmpty(loginHint)) {
            var ccsCredential = {
                credential: loginHint,
                type: _azure_msal_common__WEBPACK_IMPORTED_MODULE_16__.CcsCredentialType.UPN
            };
            this.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
        }
    };
    /**
     * Reset all temporary cache items
     * @param state
     */
    BrowserCacheManager.prototype.resetRequestCache = function (state) {
        var _this = this;
        this.logger.trace("BrowserCacheManager.resetRequestCache called");
        // check state and remove associated cache items
        if (!_azure_msal_common__WEBPACK_IMPORTED_MODULE_14__.StringUtils.isEmpty(state)) {
            this.getKeys().forEach(function (key) {
                if (key.indexOf(state) !== -1) {
                    _this.removeItem(key);
                }
            });
        }
        // delete generic interactive request parameters
        if (state) {
            this.removeItem(this.generateStateKey(state));
            this.removeItem(this.generateNonceKey(state));
            this.removeItem(this.generateAuthorityKey(state));
        }
        this.removeItem(this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.REQUEST_PARAMS));
        this.removeItem(this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.ORIGIN_URI));
        this.removeItem(this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.URL_HASH));
        this.removeItem(this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.CORRELATION_ID));
        this.removeItem(this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.CCS_CREDENTIAL));
        this.setInteractionInProgress(false);
    };
    /**
     * Removes temporary cache for the provided state
     * @param stateString
     */
    BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {
        this.logger.trace("BrowserCacheManager.cleanRequestByState called");
        // Interaction is completed - remove interaction status.
        if (stateString) {
            var stateKey = this.generateStateKey(stateString);
            var cachedState = this.temporaryCacheStorage.getItem(stateKey);
            this.logger.infoPii("BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: " + cachedState);
            this.resetRequestCache(cachedState || "");
        }
        this.clearMsalCookies();
    };
    /**
     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state
     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.
     * @param interactionType
     */
    BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {
        var _this = this;
        this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called");
        // Loop through all keys to find state key
        this.getKeys().forEach(function (key) {
            // If this key is not the state key, move on
            if (key.indexOf(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.REQUEST_STATE) === -1) {
                return;
            }
            // Retrieve state value, return if not a valid value
            var stateValue = _this.temporaryCacheStorage.getItem(key);
            if (!stateValue) {
                return;
            }
            // Extract state and ensure it matches given InteractionType, then clean request cache
            var parsedState = _utils_BrowserProtocolUtils_js__WEBPACK_IMPORTED_MODULE_17__.BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);
            if (parsedState && parsedState.interactionType === interactionType) {
                _this.logger.infoPii("BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: " + stateValue);
                _this.resetRequestCache(stateValue);
            }
        });
        this.clearMsalCookies();
        this.setInteractionInProgress(false);
    };
    BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {
        this.logger.trace("BrowserCacheManager.cacheCodeRequest called");
        var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));
        this.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);
    };
    /**
     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
     */
    BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {
        this.logger.trace("BrowserCacheManager.getCachedRequest called");
        // Get token request from cache and parse as TokenExchangeParameters.
        var encodedTokenRequest = this.getTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.REQUEST_PARAMS, true);
        if (!encodedTokenRequest) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_18__.BrowserAuthError.createNoTokenRequestCacheError();
        }
        var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));
        if (!parsedRequest) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_18__.BrowserAuthError.createUnableToParseTokenRequestCacheError();
        }
        this.removeItem(this.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.REQUEST_PARAMS));
        // Get cached authority and use if no authority is cached with request.
        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_14__.StringUtils.isEmpty(parsedRequest.authority)) {
            var authorityCacheKey = this.generateAuthorityKey(state);
            var cachedAuthority = this.getTemporaryCache(authorityCacheKey);
            if (!cachedAuthority) {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_18__.BrowserAuthError.createNoCachedAuthorityError();
            }
            parsedRequest.authority = cachedAuthority;
        }
        return parsedRequest;
    };
    BrowserCacheManager.prototype.isInteractionInProgress = function (matchClientId) {
        var clientId = this.getInteractionInProgress();
        if (matchClientId) {
            return clientId === this.clientId;
        }
        else {
            return !!clientId;
        }
    };
    BrowserCacheManager.prototype.getInteractionInProgress = function () {
        var key = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.INTERACTION_STATUS_KEY;
        return this.getTemporaryCache(key, false);
    };
    BrowserCacheManager.prototype.setInteractionInProgress = function (inProgress) {
        // Ensure we don't overwrite interaction in progress for a different clientId
        var key = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.CACHE_PREFIX + "." + _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.INTERACTION_STATUS_KEY;
        if (inProgress) {
            if (this.getInteractionInProgress()) {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_18__.BrowserAuthError.createInteractionInProgressError();
            }
            else {
                // No interaction is in progress
                this.setTemporaryCache(key, this.clientId, false);
            }
        }
        else if (!inProgress && this.getInteractionInProgress() === this.clientId) {
            this.removeItem(key);
        }
    };
    /**
     * Returns username retrieved from ADAL or MSAL v1 idToken
     */
    BrowserCacheManager.prototype.getLegacyLoginHint = function () {
        // Only check for adal/msal token if no SSO params are being used
        var adalIdTokenString = this.getTemporaryCache(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ADAL_ID_TOKEN);
        if (adalIdTokenString) {
            this.browserStorage.removeItem(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ADAL_ID_TOKEN);
            this.logger.verbose("Cached ADAL id token retrieved.");
        }
        // Check for cached MSAL v1 id token
        var msalIdTokenString = this.getTemporaryCache(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ID_TOKEN, true);
        if (msalIdTokenString) {
            this.removeItem(this.generateCacheKey(_azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.PersistentCacheKeys.ID_TOKEN));
            this.logger.verbose("Cached MSAL.js v1 id token retrieved");
        }
        var cachedIdTokenString = msalIdTokenString || adalIdTokenString;
        if (cachedIdTokenString) {
            var cachedIdToken = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_19__.AuthToken(cachedIdTokenString, this.cryptoImpl);
            if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint");
                return cachedIdToken.claims.preferred_username;
            }
            else if (cachedIdToken.claims && cachedIdToken.claims.upn) {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint");
                return cachedIdToken.claims.upn;
            }
            else {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.");
            }
        }
        return null;
    };
    /**
     * Updates a credential's cache key if the current cache key is outdated
     */
    BrowserCacheManager.prototype.updateCredentialCacheKey = function (currentCacheKey, credential) {
        var updatedCacheKey = credential.generateCredentialKey();
        if (currentCacheKey !== updatedCacheKey) {
            var cacheItem = this.getItem(currentCacheKey);
            if (cacheItem) {
                this.removeItem(currentCacheKey);
                this.setItem(updatedCacheKey, cacheItem);
                this.logger.verbose("Updated an outdated " + credential.credentialType + " cache key");
                return updatedCacheKey;
            }
            else {
                this.logger.error("Attempted to update an outdated " + credential.credentialType + " cache key but no item matching the outdated key was found in storage");
            }
        }
        return currentCacheKey;
    };
    return BrowserCacheManager;
}(_azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.CacheManager));
var DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {
    var cacheOptions = {
        cacheLocation: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.MemoryStorage,
        storeAuthStateInCookie: false,
        secureCookies: false
    };
    return new BrowserCacheManager(clientId, cacheOptions, _azure_msal_common__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_CRYPTO_IMPLEMENTATION, logger);
};


//# sourceMappingURL=BrowserCacheManager.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/cache/BrowserStorage.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/BrowserStorage.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserStorage": () => (/* binding */ BrowserStorage)
/* harmony export */ });
/* harmony import */ var _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var BrowserStorage = /** @class */ (function () {
    function BrowserStorage(cacheLocation) {
        this.validateWindowStorage(cacheLocation);
        this.windowStorage = window[cacheLocation];
    }
    BrowserStorage.prototype.validateWindowStorage = function (cacheLocation) {
        if (cacheLocation !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.BrowserCacheLocation.LocalStorage && cacheLocation !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.BrowserCacheLocation.SessionStorage) {
            throw _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
        }
        var storageSupported = !!window[cacheLocation];
        if (!storageSupported) {
            throw _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
        }
    };
    BrowserStorage.prototype.getItem = function (key) {
        return this.windowStorage.getItem(key);
    };
    BrowserStorage.prototype.setItem = function (key, value) {
        this.windowStorage.setItem(key, value);
    };
    BrowserStorage.prototype.removeItem = function (key) {
        this.windowStorage.removeItem(key);
    };
    BrowserStorage.prototype.getKeys = function () {
        return Object.keys(this.windowStorage);
    };
    BrowserStorage.prototype.containsKey = function (key) {
        return this.windowStorage.hasOwnProperty(key);
    };
    return BrowserStorage;
}());


//# sourceMappingURL=BrowserStorage.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DatabaseStorage": () => (/* binding */ DatabaseStorage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
 */
var DatabaseStorage = /** @class */ (function () {
    function DatabaseStorage() {
        this.dbName = _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.DB_NAME;
        this.version = _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.DB_VERSION;
        this.tableName = _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.DB_TABLE_NAME;
        this.dbOpen = false;
    }
    /**
     * Opens IndexedDB instance.
     */
    DatabaseStorage.prototype.open = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var openDB = window.indexedDB.open(_this.dbName, _this.version);
                        openDB.addEventListener("upgradeneeded", function (e) {
                            var event = e;
                            event.target.result.createObjectStore(_this.tableName);
                        });
                        openDB.addEventListener("success", function (e) {
                            var event = e;
                            _this.db = event.target.result;
                            _this.dbOpen = true;
                            resolve();
                        });
                        openDB.addEventListener("error", function () { return reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createDatabaseUnavailableError()); });
                    })];
            });
        });
    };
    /**
     * Opens database if it's not already open
     */
    DatabaseStorage.prototype.validateDbIsOpen = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.dbOpen) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.open()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves item from IndexedDB instance.
     * @param key
     */
    DatabaseStorage.prototype.getItem = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                // TODO: Add timeouts?
                                if (!_this.db) {
                                    return reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbGet = objectStore.get(key);
                                dbGet.addEventListener("success", function (e) {
                                    var event = e;
                                    resolve(event.target.result);
                                });
                                dbGet.addEventListener("error", function (e) { return reject(e); });
                            })];
                }
            });
        });
    };
    /**
     * Adds item to IndexedDB under given key
     * @param key
     * @param payload
     */
    DatabaseStorage.prototype.setItem = function (key, payload) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                // TODO: Add timeouts?
                                if (!_this.db) {
                                    return reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readwrite");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbPut = objectStore.put(payload, key);
                                dbPut.addEventListener("success", function () { return resolve(); });
                                dbPut.addEventListener("error", function (e) { return reject(e); });
                            })];
                }
            });
        });
    };
    /**
     * Removes item from IndexedDB under given key
     * @param key
     */
    DatabaseStorage.prototype.removeItem = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                if (!_this.db) {
                                    return reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readwrite");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbDelete = objectStore.delete(key);
                                dbDelete.addEventListener("success", function () { return resolve(); });
                                dbDelete.addEventListener("error", function (e) { return reject(e); });
                            })];
                }
            });
        });
    };
    /**
     * Get all the keys from the storage object as an iterable array of strings.
     */
    DatabaseStorage.prototype.getKeys = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                if (!_this.db) {
                                    return reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbGetKeys = objectStore.getAllKeys();
                                dbGetKeys.addEventListener("success", function (e) {
                                    var event = e;
                                    resolve(event.target.result);
                                });
                                dbGetKeys.addEventListener("error", function (e) { return reject(e); });
                            })];
                }
            });
        });
    };
    /**
     *
     * Checks whether there is an object under the search key in the object store
     */
    DatabaseStorage.prototype.containsKey = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                if (!_this.db) {
                                    return reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbContainsKey = objectStore.count(key);
                                dbContainsKey.addEventListener("success", function (e) {
                                    var event = e;
                                    resolve(event.target.result === 1);
                                });
                                dbContainsKey.addEventListener("error", function (e) { return reject(e); });
                            })];
                }
            });
        });
    };
    /**
     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible
     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues
     * with IndexedDB database versions.
     */
    DatabaseStorage.prototype.deleteDatabase = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var deleteDbRequest = window.indexedDB.deleteDatabase(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.DB_NAME);
                        deleteDbRequest.addEventListener("success", function () { return resolve(true); });
                        deleteDbRequest.addEventListener("error", function () { return reject(false); });
                    })];
            });
        });
    };
    return DatabaseStorage;
}());


//# sourceMappingURL=DatabaseStorage.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MemoryStorage": () => (/* binding */ MemoryStorage)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var MemoryStorage = /** @class */ (function () {
    function MemoryStorage() {
        this.cache = new Map();
    }
    MemoryStorage.prototype.getItem = function (key) {
        return this.cache.get(key) || null;
    };
    MemoryStorage.prototype.setItem = function (key, value) {
        this.cache.set(key, value);
    };
    MemoryStorage.prototype.removeItem = function (key) {
        this.cache.delete(key);
    };
    MemoryStorage.prototype.getKeys = function () {
        var cacheKeys = [];
        this.cache.forEach(function (value, key) {
            cacheKeys.push(key);
        });
        return cacheKeys;
    };
    MemoryStorage.prototype.containsKey = function (key) {
        return this.cache.has(key);
    };
    MemoryStorage.prototype.clear = function () {
        this.cache.clear();
    };
    return MemoryStorage;
}());


//# sourceMappingURL=MemoryStorage.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/cache/TokenCache.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/TokenCache.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TokenCache": () => (/* binding */ TokenCache)
/* harmony export */ });
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/Authority.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/IdTokenEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/request/ScopeSet.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Token cache manager
 */
var TokenCache = /** @class */ (function () {
    function TokenCache(configuration, storage, logger, cryptoObj) {
        this.isBrowserEnvironment = typeof window !== "undefined";
        this.config = configuration;
        this.storage = storage;
        this.logger = logger;
        this.cryptoObj = cryptoObj;
    }
    // Move getAllAccounts here and cache utility APIs
    /**
     * API to load tokens to msal-browser cache.
     * @param request
     * @param response
     * @param options
     */
    TokenCache.prototype.loadExternalTokens = function (request, response, options) {
        this.logger.info("TokenCache - loadExternalTokens called");
        if (!response.id_token) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("Please ensure server response includes id token.");
        }
        if (request.account) {
            this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);
            this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);
        }
        else if (request.authority) {
            var authorityUrl = _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.Authority.generateAuthority(request.authority, request.azureCloudOptions);
            var authorityOptions = {
                protocolMode: this.config.auth.protocolMode,
                knownAuthorities: this.config.auth.knownAuthorities,
                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                authorityMetadata: this.config.auth.authorityMetadata,
            };
            var authority = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions);
            // "clientInfo" from options takes precedence over "clientInfo" in response
            if (options.clientInfo) {
                this.logger.trace("TokenCache - homeAccountId from options");
                this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);
                this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);
            }
            else if (response.client_info) {
                this.logger.trace("TokenCache - homeAccountId from response");
                this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);
                this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);
            }
            else {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("Please provide clientInfo in the response or options.");
            }
        }
        else {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("Please provide a request with an account or a request with authority.");
        }
    };
    /**
     * Helper function to load id tokens to msal-browser cache
     * @param idToken
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @param options
     */
    TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId, options) {
        var idTokenEntity = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);
        var idAuthToken = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.AuthToken(idToken, this.cryptoObj);
        var accountEntity = options.clientInfo ?
            _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) :
            _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading id token");
            this.storage.setAccount(accountEntity);
            this.storage.setIdTokenCredential(idTokenEntity);
        }
        else {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
        }
    };
    /**
     * Helper function to load access tokens to msal-browser cache
     * @param request
     * @param response
     * @param options
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @returns
     */
    TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {
        if (!response.access_token) {
            this.logger.verbose("TokenCache - No access token provided for caching");
            return;
        }
        if (!response.expires_in) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("Please ensure server response includes expires_in value.");
        }
        if (!options.extendedExpiresOn) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("Please provide an extendedExpiresOn value in the options.");
        }
        var scopes = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.ScopeSet(request.scopes).printScopes();
        var expiresOn = response.expires_in;
        var extendedExpiresOn = options.extendedExpiresOn;
        var accessTokenEntity = _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading access token");
            this.storage.setAccessTokenCredential(accessTokenEntity);
        }
        else {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
        }
    };
    return TokenCache;
}());


//# sourceMappingURL=TokenCache.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/config/Configuration.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/config/Configuration.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_IFRAME_TIMEOUT_MS": () => (/* binding */ DEFAULT_IFRAME_TIMEOUT_MS),
/* harmony export */   "DEFAULT_POPUP_TIMEOUT_MS": () => (/* binding */ DEFAULT_POPUP_TIMEOUT_MS),
/* harmony export */   "DEFAULT_REDIRECT_TIMEOUT_MS": () => (/* binding */ DEFAULT_REDIRECT_TIMEOUT_MS),
/* harmony export */   "buildConfiguration": () => (/* binding */ buildConfiguration)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/ProtocolMode.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/logger/Logger.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/config/ClientConfiguration.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/network/INetworkModule.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _navigation_NavigationClient_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../navigation/NavigationClient.js */ "./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Default timeout for popup windows and iframes in milliseconds
var DEFAULT_POPUP_TIMEOUT_MS = 60000;
var DEFAULT_IFRAME_TIMEOUT_MS = 6000;
var DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
/**
 * MSAL function that sets the default options when not explicitly configured from app developer
 *
 * @param auth
 * @param cache
 * @param system
 *
 * @returns Configuration object
 */
function buildConfiguration(_a, isBrowserEnvironment) {
    var userInputAuth = _a.auth, userInputCache = _a.cache, userInputSystem = _a.system;
    // Default auth options for browser
    var DEFAULT_AUTH_OPTIONS = {
        clientId: "",
        authority: "" + _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.Constants.DEFAULT_AUTHORITY,
        knownAuthorities: [],
        cloudDiscoveryMetadata: "",
        authorityMetadata: "",
        redirectUri: "",
        postLogoutRedirectUri: "",
        navigateToLoginRequestUrl: true,
        clientCapabilities: [],
        protocolMode: _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.AAD,
        azureCloudOptions: {
            azureCloudInstance: _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.AzureCloudInstance.None,
            tenant: ""
        },
    };
    // Default cache options for browser
    var DEFAULT_CACHE_OPTIONS = {
        cacheLocation: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage,
        storeAuthStateInCookie: false,
        secureCookies: false
    };
    // Default logger options for browser
    var DEFAULT_LOGGER_OPTIONS = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        loggerCallback: function () { },
        logLevel: _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Info,
        piiLoggingEnabled: false
    };
    // Default system options for browser
    var DEFAULT_BROWSER_SYSTEM_OPTIONS = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SYSTEM_OPTIONS), { loggerOptions: DEFAULT_LOGGER_OPTIONS, networkClient: isBrowserEnvironment ? _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_7__.BrowserUtils.getBrowserNetworkClient() : _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__.StubbedNetworkModule, navigationClient: new _navigation_NavigationClient_js__WEBPACK_IMPORTED_MODULE_9__.NavigationClient(), loadFrameTimeout: 0, 
        // If loadFrameTimeout is provided, use that as default.
        windowHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_POPUP_TIMEOUT_MS, iframeHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_IFRAME_TIMEOUT_MS, navigateFrameWait: isBrowserEnvironment && _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_7__.BrowserUtils.detectIEOrEdge() ? 500 : 0, redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS, asyncPopups: false, allowRedirectInIframe: false });
    var overlayedConfig = {
        auth: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, DEFAULT_AUTH_OPTIONS), userInputAuth),
        cache: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, DEFAULT_CACHE_OPTIONS), userInputCache),
        system: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, DEFAULT_BROWSER_SYSTEM_OPTIONS), userInputSystem)
    };
    return overlayedConfig;
}


//# sourceMappingURL=Configuration.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserCrypto": () => (/* binding */ BrowserCrypto)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserStringUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserStringUtils.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */






/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
 */
// RSA KeyGen Algorithm
var PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
// SHA-256 hashing algorithm
var S256_HASH_ALG = "SHA-256";
// MOD length for PoP tokens
var MODULUS_LENGTH = 2048;
// Public Exponent
var PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);
/**
 * This class implements functions used by the browser library to perform cryptography operations such as
 * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
 */
var BrowserCrypto = /** @class */ (function () {
    function BrowserCrypto(logger) {
        this.logger = logger;
        if (!(this.hasCryptoAPI())) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createCryptoNotAvailableError("Browser crypto or msCrypto object not available.");
        }
        this._keygenAlgorithmOptions = {
            name: PKCS1_V15_KEYGEN_ALG,
            hash: S256_HASH_ALG,
            modulusLength: MODULUS_LENGTH,
            publicExponent: PUBLIC_EXPONENT
        };
    }
    /**
     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
     * @param dataString
     */
    BrowserCrypto.prototype.sha256Digest = function (dataString) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var data;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                data = _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_2__.BrowserStringUtils.stringToUtf8Arr(dataString);
                return [2 /*return*/, this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data)];
            });
        });
    };
    /**
     * Populates buffer with cryptographically random values.
     * @param dataBuffer
     */
    BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
        var cryptoObj = window["msCrypto"] || window.crypto;
        if (!cryptoObj.getRandomValues) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createCryptoNotAvailableError("getRandomValues does not exist.");
        }
        cryptoObj.getRandomValues(dataBuffer);
    };
    /**
     * Generates a keypair based on current keygen algorithm config.
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, (this.hasIECrypto() ?
                        this.msCryptoGenerateKey(extractable, usages)
                        : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages))];
            });
        });
    };
    /**
     * Export key as Json Web Key (JWK)
     * @param key
     * @param format
     */
    BrowserCrypto.prototype.exportJwk = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key)];
            });
        });
    };
    /**
     * Imports key as Json Web Key (JWK), can set extractable and usages.
     * @param key
     * @param format
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var keyString, keyBuffer;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                keyString = BrowserCrypto.getJwkString(key);
                keyBuffer = _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_2__.BrowserStringUtils.stringToArrayBuffer(keyString);
                return [2 /*return*/, this.hasIECrypto() ?
                        this.msCryptoImportKey(keyBuffer, extractable, usages)
                        : window.crypto.subtle.importKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages)];
            });
        });
    };
    /**
     * Signs given data with given key
     * @param key
     * @param data
     */
    BrowserCrypto.prototype.sign = function (key, data) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, this.hasIECrypto() ?
                        this.msCryptoSign(key, data)
                        : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data)];
            });
        });
    };
    /**
     * Check whether IE crypto or other browser cryptography is available.
     */
    BrowserCrypto.prototype.hasCryptoAPI = function () {
        return this.hasIECrypto() || this.hasBrowserCrypto();
    };
    /**
     * Checks whether IE crypto (AKA msCrypto) is available.
     */
    BrowserCrypto.prototype.hasIECrypto = function () {
        return "msCrypto" in window;
    };
    /**
     * Check whether browser crypto is available.
     */
    BrowserCrypto.prototype.hasBrowserCrypto = function () {
        return "crypto" in window;
    };
    /**
     * Helper function for SHA digest.
     * @param algorithm
     * @param data
     */
    BrowserCrypto.prototype.getSubtleCryptoDigest = function (algorithm, data) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, window.crypto.subtle.digest(algorithm, data)];
            });
        });
    };
    /**
     * IE Helper function for SHA digest.
     * @param algorithm
     * @param data
     */
    BrowserCrypto.prototype.getMSCryptoDigest = function (algorithm, data) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var digestOperation = window["msCrypto"].subtle.digest(algorithm, data.buffer);
                        digestOperation.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        digestOperation.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for generating a keypair
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.msCryptoGenerateKey = function (extractable, usages) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msGenerateKey = window["msCrypto"].subtle.generateKey(_this._keygenAlgorithmOptions, extractable, usages);
                        msGenerateKey.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        msGenerateKey.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for exportKey
     * @param key
     * @param format
     */
    BrowserCrypto.prototype.msCryptoExportJwk = function (key) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msExportKey = window["msCrypto"].subtle.exportKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key);
                        msExportKey.addEventListener("complete", function (e) {
                            var resultBuffer = e.target.result;
                            var resultString = _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_2__.BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer))
                                .replace(/\r/g, "")
                                .replace(/\n/g, "")
                                .replace(/\t/g, "")
                                .split(" ").join("")
                                .replace("\u0000", "");
                            try {
                                resolve(JSON.parse(resultString));
                            }
                            catch (e) {
                                reject(e);
                            }
                        });
                        msExportKey.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for importKey
     * @param key
     * @param format
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.msCryptoImportKey = function (keyBuffer, extractable, usages) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msImportKey = window["msCrypto"].subtle.importKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, keyBuffer, _this._keygenAlgorithmOptions, extractable, usages);
                        msImportKey.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        msImportKey.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for sign JWT
     * @param key
     * @param data
     */
    BrowserCrypto.prototype.msCryptoSign = function (key, data) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msSign = window["msCrypto"].subtle.sign(_this._keygenAlgorithmOptions, key, data);
                        msSign.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        msSign.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * Returns stringified jwk.
     * @param jwk
     */
    BrowserCrypto.getJwkString = function (jwk) {
        return JSON.stringify(jwk, Object.keys(jwk).sort());
    };
    return BrowserCrypto;
}());


//# sourceMappingURL=BrowserCrypto.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CryptoOps": () => (/* binding */ CryptoOps)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _GuidGenerator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GuidGenerator.js */ "./node_modules/@azure/msal-browser/dist/crypto/GuidGenerator.js");
/* harmony import */ var _encode_Base64Encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encode/Base64Encode.js */ "./node_modules/@azure/msal-browser/dist/encode/Base64Encode.js");
/* harmony import */ var _encode_Base64Decode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encode/Base64Decode.js */ "./node_modules/@azure/msal-browser/dist/encode/Base64Decode.js");
/* harmony import */ var _PkceGenerator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PkceGenerator.js */ "./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.js");
/* harmony import */ var _BrowserCrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserCrypto.js */ "./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.js");
/* harmony import */ var _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/BrowserStringUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserStringUtils.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _cache_AsyncMemoryStorage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cache/AsyncMemoryStorage.js */ "./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */












/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
 * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
 */
var CryptoOps = /** @class */ (function () {
    function CryptoOps(logger) {
        this.logger = logger;
        // Browser crypto needs to be validated first before any other classes can be set.
        this.browserCrypto = new _BrowserCrypto_js__WEBPACK_IMPORTED_MODULE_0__.BrowserCrypto(this.logger);
        this.b64Encode = new _encode_Base64Encode_js__WEBPACK_IMPORTED_MODULE_1__.Base64Encode();
        this.b64Decode = new _encode_Base64Decode_js__WEBPACK_IMPORTED_MODULE_2__.Base64Decode();
        this.guidGenerator = new _GuidGenerator_js__WEBPACK_IMPORTED_MODULE_3__.GuidGenerator(this.browserCrypto);
        this.pkceGenerator = new _PkceGenerator_js__WEBPACK_IMPORTED_MODULE_4__.PkceGenerator(this.browserCrypto);
        this.cache = {
            asymmetricKeys: new _cache_AsyncMemoryStorage_js__WEBPACK_IMPORTED_MODULE_5__.AsyncMemoryStorage(this.logger),
            symmetricKeys: new _cache_AsyncMemoryStorage_js__WEBPACK_IMPORTED_MODULE_5__.AsyncMemoryStorage(this.logger)
        };
    }
    /**
     * Creates a new random GUID - used to populate state and nonce.
     * @returns string (GUID)
     */
    CryptoOps.prototype.createNewGuid = function () {
        return this.guidGenerator.generateGuid();
    };
    /**
     * Encodes input string to base64.
     * @param input
     */
    CryptoOps.prototype.base64Encode = function (input) {
        return this.b64Encode.encode(input);
    };
    /**
     * Decodes input string from base64.
     * @param input
     */
    CryptoOps.prototype.base64Decode = function (input) {
        return this.b64Decode.decode(input);
    };
    /**
     * Generates PKCE codes used in Authorization Code Flow.
     */
    CryptoOps.prototype.generatePkceCodes = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                return [2 /*return*/, this.pkceGenerator.generateCodes()];
            });
        });
    };
    /**
     * Generates a keypair, stores it and returns a thumbprint
     * @param request
     */
    CryptoOps.prototype.getPublicKeyThumbprint = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];
                    case 1:
                        keyPair = _a.sent();
                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];
                    case 2:
                        publicKeyJwk = _a.sent();
                        pubKeyThumprintObj = {
                            e: publicKeyJwk.e,
                            kty: publicKeyJwk.kty,
                            n: publicKeyJwk.n
                        };
                        publicJwkString = _BrowserCrypto_js__WEBPACK_IMPORTED_MODULE_0__.BrowserCrypto.getJwkString(pubKeyThumprintObj);
                        return [4 /*yield*/, this.hashString(publicJwkString)];
                    case 3:
                        publicJwkHash = _a.sent();
                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];
                    case 4:
                        privateKeyJwk = _a.sent();
                        return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, ["sign"])];
                    case 5:
                        unextractablePrivateKey = _a.sent();
                        // Store Keypair data in keystore
                        return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {
                                privateKey: unextractablePrivateKey,
                                publicKey: keyPair.publicKey,
                                requestMethod: request.resourceRequestMethod,
                                requestUri: request.resourceRequestUri
                            })];
                    case 6:
                        // Store Keypair data in keystore
                        _a.sent();
                        return [2 /*return*/, publicJwkHash];
                }
            });
        });
    };
    /**
     * Removes cryptographic keypair from key store matching the keyId passed in
     * @param kid
     */
    CryptoOps.prototype.removeTokenBindingKey = function (kid) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var keyFound;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];
                    case 2:
                        keyFound = _a.sent();
                        return [2 /*return*/, !keyFound];
                }
            });
        });
    };
    /**
     * Removes all cryptographic keys from IndexedDB storage
     */
    CryptoOps.prototype.clearKeystore = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var dataStoreNames, databaseStorage, _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataStoreNames = Object.keys(this.cache);
                        databaseStorage = this.cache[dataStoreNames[0]];
                        if (!databaseStorage) return [3 /*break*/, 2];
                        return [4 /*yield*/, databaseStorage.deleteDatabase()];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = false;
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    /**
     * Signs the given object as a jwt payload with private key retrieved by given kid.
     * @param payload
     * @param kid
     */
    CryptoOps.prototype.signJwt = function (payload, kid) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];
                    case 1:
                        cachedKeyPair = _a.sent();
                        if (!cachedKeyPair) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_7__.BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);
                        }
                        return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];
                    case 2:
                        publicKeyJwk = _a.sent();
                        publicKeyJwkString = _BrowserCrypto_js__WEBPACK_IMPORTED_MODULE_0__.BrowserCrypto.getJwkString(publicKeyJwk);
                        header = {
                            alg: publicKeyJwk.alg,
                            type: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_8__.KEY_FORMAT_JWK
                        };
                        encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));
                        // Generate payload
                        payload.cnf = {
                            jwk: JSON.parse(publicKeyJwkString)
                        };
                        encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));
                        tokenString = encodedHeader + "." + encodedPayload;
                        tokenBuffer = _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_9__.BrowserStringUtils.stringToArrayBuffer(tokenString);
                        return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];
                    case 3:
                        signatureBuffer = _a.sent();
                        encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));
                        return [2 /*return*/, tokenString + "." + encodedSignature];
                }
            });
        });
    };
    /**
     * Returns the SHA-256 hash of an input string
     * @param plainText
     */
    CryptoOps.prototype.hashString = function (plainText) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var hashBuffer, hashBytes;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];
                    case 1:
                        hashBuffer = _a.sent();
                        hashBytes = new Uint8Array(hashBuffer);
                        return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];
                }
            });
        });
    };
    CryptoOps.POP_KEY_USAGES = ["sign", "verify"];
    CryptoOps.EXTRACTABLE = true;
    return CryptoOps;
}());


//# sourceMappingURL=CryptoOps.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/crypto/GuidGenerator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/GuidGenerator.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GuidGenerator": () => (/* binding */ GuidGenerator)
/* harmony export */ });
/* harmony import */ var _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/MathUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/MathUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var GuidGenerator = /** @class */ (function () {
    function GuidGenerator(cryptoObj) {
        this.cryptoObj = cryptoObj;
    }
    /*
     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
     * pseudo-random numbers.
     * The algorithm is as follows:
     *     Set the two most significant bits (bits 6 and 7) of the
     *        clock_seq_hi_and_reserved to zero and one, respectively.
     *     Set the four most significant bits (bits 12 through 15) of the
     *        time_hi_and_version field to the 4-bit version number from
     *        Section 4.1.3. Version4
     *     Set all the other bits to randomly (or pseudo-randomly) chosen
     *     values.
     * UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
     * time-low               = 4hexOctet
     * time-mid               = 2hexOctet
     * time-high-and-version  = 2hexOctet
     * clock-seq-and-reserved = hexOctet:
     * clock-seq-low          = hexOctet
     * node                   = 6hexOctet
     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
     * y values are 8, 9, A, B
     */
    GuidGenerator.prototype.generateGuid = function () {
        try {
            var buffer = new Uint8Array(16);
            this.cryptoObj.getRandomValues(buffer);
            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.
            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.
            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.
            return _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[0]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[1])
                + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[2]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[3])
                + "-" + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[4]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[5])
                + "-" + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[6]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[7])
                + "-" + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[8]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[9])
                + "-" + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[10]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[11])
                + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[12]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[13])
                + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[14]) + _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.MathUtils.decimalToHex(buffer[15]);
        }
        catch (err) {
            var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
            var hex = "0123456789abcdef";
            var r = 0;
            var guidResponse = "";
            for (var i = 0; i < 36; i++) {
                if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {
                    // each x and y needs to be random
                    r = Math.random() * 16 | 0;
                }
                if (guidHolder[i] === "x") {
                    guidResponse += hex[r];
                }
                else if (guidHolder[i] === "y") {
                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                    r |= 0x8; // set pos 3 to 1 as 1???
                    guidResponse += hex[r];
                }
                else {
                    guidResponse += guidHolder[i];
                }
            }
            return guidResponse;
        }
    };
    /**
     * verifies if a string is  GUID
     * @param guid
     */
    GuidGenerator.isGuid = function (guid) {
        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return regexGuid.test(guid);
    };
    return GuidGenerator;
}());


//# sourceMappingURL=GuidGenerator.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PkceGenerator": () => (/* binding */ PkceGenerator)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _encode_Base64Encode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encode/Base64Encode.js */ "./node_modules/@azure/msal-browser/dist/encode/Base64Encode.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Constant byte array length
var RANDOM_BYTE_ARR_LENGTH = 32;
/**
 * Class which exposes APIs to generate PKCE codes and code verifiers.
 */
var PkceGenerator = /** @class */ (function () {
    function PkceGenerator(cryptoObj) {
        this.base64Encode = new _encode_Base64Encode_js__WEBPACK_IMPORTED_MODULE_0__.Base64Encode();
        this.cryptoObj = cryptoObj;
    }
    /**
     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
     */
    PkceGenerator.prototype.generateCodes = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var codeVerifier, codeChallenge;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        codeVerifier = this.generateCodeVerifier();
                        return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];
                    case 1:
                        codeChallenge = _a.sent();
                        return [2 /*return*/, {
                                verifier: codeVerifier,
                                challenge: codeChallenge
                            }];
                }
            });
        });
    };
    /**
     * Generates a random 32 byte buffer and returns the base64
     * encoded string to be used as a PKCE Code Verifier
     */
    PkceGenerator.prototype.generateCodeVerifier = function () {
        try {
            // Generate random values as utf-8
            var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
            this.cryptoObj.getRandomValues(buffer);
            // encode verifier as base64
            var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);
            return pkceCodeVerifierB64;
        }
        catch (e) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createPkceNotGeneratedError(e);
        }
    };
    /**
     * Creates a base64 encoded PKCE Code Challenge string from the
     * hash created from the PKCE Code Verifier supplied
     */
    PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var pkceHashedCodeVerifier, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];
                    case 1:
                        pkceHashedCodeVerifier = _a.sent();
                        // encode hash as base64
                        return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];
                    case 2:
                        e_1 = _a.sent();
                        throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createPkceNotGeneratedError(e_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return PkceGenerator;
}());


//# sourceMappingURL=PkceGenerator.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/crypto/SignedHttpRequest.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/SignedHttpRequest.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignedHttpRequest": () => (/* binding */ SignedHttpRequest)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _CryptoOps_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CryptoOps.js */ "./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/logger/Logger.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../packageMetadata.js */ "./node_modules/@azure/msal-browser/dist/packageMetadata.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */






/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SignedHttpRequest = /** @class */ (function () {
    function SignedHttpRequest(shrParameters, shrOptions) {
        var loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};
        this.logger = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.Logger(loggerOptions, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_1__.name, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_1__.version);
        this.cryptoOps = new _CryptoOps_js__WEBPACK_IMPORTED_MODULE_2__.CryptoOps(this.logger);
        this.popTokenGenerator = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.PopTokenGenerator(this.cryptoOps);
        this.shrParameters = shrParameters;
    }
    /**
     * Generates and caches a keypair for the given request options.
     * @returns Public key digest, which should be sent to the token issuer.
     */
    SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function () {
            var kid;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.popTokenGenerator.generateKid(this.shrParameters)];
                    case 1:
                        kid = (_a.sent()).kid;
                        return [2 /*return*/, kid];
                }
            });
        });
    };
    /**
     * Generates a signed http request for the given payload with the given key.
     * @param payload Payload to sign (e.g. access token)
     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)
     * @param claims Additional claims to include/override in the signed JWT
     * @returns Pop token signed with the corresponding private key
     */
    SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                return [2 /*return*/, this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];
            });
        });
    };
    /**
     * Removes cached keys from browser for given public key thumbprint
     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)
     * @returns If keys are properly deleted
     */
    SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SignedHttpRequest;
}());


//# sourceMappingURL=SignedHttpRequest.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/encode/Base64Decode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/encode/Base64Decode.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Base64Decode": () => (/* binding */ Base64Decode)
/* harmony export */ });
/* harmony import */ var _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserStringUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserStringUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */
var Base64Decode = /** @class */ (function () {
    function Base64Decode() {
    }
    /**
     * Returns a URL-safe plaintext decoded string from b64 encoded input.
     * @param input
     */
    Base64Decode.prototype.decode = function (input) {
        var encodedString = input.replace(/-/g, "+").replace(/_/g, "/");
        switch (encodedString.length % 4) {
            case 0:
                break;
            case 2:
                encodedString += "==";
                break;
            case 3:
                encodedString += "=";
                break;
            default:
                throw new Error("Invalid base64 string");
        }
        var inputUtf8Arr = this.base64DecToArr(encodedString);
        return _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_0__.BrowserStringUtils.utf8ArrToString(inputUtf8Arr);
    };
    /**
     * Decodes base64 into Uint8Array
     * @param base64String
     * @param nBlockSize
     */
    Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {
        var sB64Enc = base64String.replace(/[^A-Za-z0-9\+\/]/g, "");
        var nInLen = sB64Enc.length;
        var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;
        var aBytes = new Uint8Array(nOutLen);
        for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
            nMod4 = nInIdx & 3;
            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
            if (nMod4 === 3 || nInLen - nInIdx === 1) {
                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                }
                nUint24 = 0;
            }
        }
        return aBytes;
    };
    /**
     * Base64 string to array decoding helper
     * @param charNum
     */
    Base64Decode.prototype.b64ToUint6 = function (charNum) {
        return charNum > 64 && charNum < 91 ?
            charNum - 65
            : charNum > 96 && charNum < 123 ?
                charNum - 71
                : charNum > 47 && charNum < 58 ?
                    charNum + 4
                    : charNum === 43 ?
                        62
                        : charNum === 47 ?
                            63
                            :
                                0;
    };
    return Base64Decode;
}());


//# sourceMappingURL=Base64Decode.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/encode/Base64Encode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/encode/Base64Encode.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Base64Encode": () => (/* binding */ Base64Encode)
/* harmony export */ });
/* harmony import */ var _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserStringUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserStringUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */
var Base64Encode = /** @class */ (function () {
    function Base64Encode() {
    }
    /**
     * Returns URL Safe b64 encoded string from a plaintext string.
     * @param input
     */
    Base64Encode.prototype.urlEncode = function (input) {
        return encodeURIComponent(this.encode(input)
            .replace(/=/g, "")
            .replace(/\+/g, "-")
            .replace(/\//g, "_"));
    };
    /**
     * Returns URL Safe b64 encoded string from an int8Array.
     * @param inputArr
     */
    Base64Encode.prototype.urlEncodeArr = function (inputArr) {
        return this.base64EncArr(inputArr)
            .replace(/=/g, "")
            .replace(/\+/g, "-")
            .replace(/\//g, "_");
    };
    /**
     * Returns b64 encoded string from plaintext string.
     * @param input
     */
    Base64Encode.prototype.encode = function (input) {
        var inputUtf8Arr = _utils_BrowserStringUtils_js__WEBPACK_IMPORTED_MODULE_0__.BrowserStringUtils.stringToUtf8Arr(input);
        return this.base64EncArr(inputUtf8Arr);
    };
    /**
     * Base64 encode byte array
     * @param aBytes
     */
    Base64Encode.prototype.base64EncArr = function (aBytes) {
        var eqLen = (3 - (aBytes.length % 3)) % 3;
        var sB64Enc = "";
        for (var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
            nMod3 = nIdx % 3;
            /* Uncomment the following line in order to split the output in lines 76-character long: */
            /*
             *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
             */
            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
            if (nMod3 === 2 || aBytes.length - nIdx === 1) {
                sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));
                nUint24 = 0;
            }
        }
        return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? "=" : "==");
    };
    /**
     * Base64 string to array encoding helper
     * @param nUint6
     */
    Base64Encode.prototype.uint6ToB64 = function (nUint6) {
        return nUint6 < 26 ?
            nUint6 + 65
            : nUint6 < 52 ?
                nUint6 + 71
                : nUint6 < 62 ?
                    nUint6 - 4
                    : nUint6 === 62 ?
                        43
                        : nUint6 === 63 ?
                            47
                            :
                                65;
    };
    return Base64Encode;
}());


//# sourceMappingURL=Base64Encode.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserAuthError": () => (/* binding */ BrowserAuthError),
/* harmony export */   "BrowserAuthErrorMessage": () => (/* binding */ BrowserAuthErrorMessage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */
var BrowserAuthErrorMessage = {
    pkceNotGenerated: {
        code: "pkce_not_created",
        desc: "The PKCE code challenge and verifier could not be generated."
    },
    cryptoDoesNotExist: {
        code: "crypto_nonexistent",
        desc: "The crypto object or function is not available."
    },
    httpMethodNotImplementedError: {
        code: "http_method_not_implemented",
        desc: "The HTTP method given has not been implemented in this library."
    },
    emptyNavigateUriError: {
        code: "empty_navigate_uri",
        desc: "Navigation URI is empty. Please check stack trace for more info."
    },
    hashEmptyError: {
        code: "hash_empty_error",
        desc: "Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash."
    },
    hashDoesNotContainStateError: {
        code: "no_state_in_hash",
        desc: "Hash does not contain state. Please verify that the request originated from msal."
    },
    hashDoesNotContainKnownPropertiesError: {
        code: "hash_does_not_contain_known_properties",
        desc: "Hash does not contain known properites. Please verify that your redirectUri is not changing the hash."
    },
    unableToParseStateError: {
        code: "unable_to_parse_state",
        desc: "Unable to parse state. Please verify that the request originated from msal."
    },
    stateInteractionTypeMismatchError: {
        code: "state_interaction_type_mismatch",
        desc: "Hash contains state but the interaction type does not match the caller."
    },
    interactionInProgress: {
        code: "interaction_in_progress",
        desc: "Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors."
    },
    popupWindowError: {
        code: "popup_window_error",
        desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
    },
    emptyWindowError: {
        code: "empty_window_error",
        desc: "window.open returned null or undefined window object."
    },
    userCancelledError: {
        code: "user_cancelled",
        desc: "User cancelled the flow."
    },
    monitorPopupTimeoutError: {
        code: "monitor_window_timeout",
        desc: "Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."
    },
    monitorIframeTimeoutError: {
        code: "monitor_window_timeout",
        desc: "Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."
    },
    redirectInIframeError: {
        code: "redirect_in_iframe",
        desc: "Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs."
    },
    blockTokenRequestsInHiddenIframeError: {
        code: "block_iframe_reload",
        desc: "Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors"
    },
    blockAcquireTokenInPopupsError: {
        code: "block_nested_popups",
        desc: "Request was blocked inside a popup because MSAL detected it was running in a popup."
    },
    iframeClosedPrematurelyError: {
        code: "iframe_closed_prematurely",
        desc: "The iframe being monitored was closed prematurely."
    },
    silentLogoutUnsupportedError: {
        code: "silent_logout_unsupported",
        desc: "Silent logout not supported. Please call logoutRedirect or logoutPopup instead."
    },
    noAccountError: {
        code: "no_account_error",
        desc: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request."
    },
    silentPromptValueError: {
        code: "silent_prompt_value_error",
        desc: "The value given for the prompt value is not valid for silent requests - must be set to 'none'."
    },
    noTokenRequestCacheError: {
        code: "no_token_request_cache_error",
        desc: "No token request found in cache."
    },
    unableToParseTokenRequestCacheError: {
        code: "unable_to_parse_token_request_cache_error",
        desc: "The cached token request could not be parsed."
    },
    noCachedAuthorityError: {
        code: "no_cached_authority_error",
        desc: "No cached authority found."
    },
    authRequestNotSet: {
        code: "auth_request_not_set_error",
        desc: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler"
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    notInBrowserEnvironment: {
        code: "non_browser_environment",
        desc: "Login and token requests are not supported in non-browser environments."
    },
    databaseNotOpen: {
        code: "database_not_open",
        desc: "Database is not open!"
    },
    noNetworkConnectivity: {
        code: "no_network_connectivity",
        desc: "No network connectivity. Check your internet connection."
    },
    postRequestFailed: {
        code: "post_request_failed",
        desc: "Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'"
    },
    getRequestFailed: {
        code: "get_request_failed",
        desc: "Network request failed. Please check the network trace to determine root cause."
    },
    failedToParseNetworkResponse: {
        code: "failed_to_parse_response",
        desc: "Failed to parse network response. Check network trace."
    },
    unableToLoadTokenError: {
        code: "unable_to_load_token",
        desc: "Error loading token to cache."
    },
    signingKeyNotFoundInStorage: {
        code: "crypto_key_not_found",
        desc: "Cryptographic Key or Keypair not found in browser storage."
    },
    authCodeRequired: {
        code: "auth_code_required",
        desc: "An authorization code must be provided (as the `code` property on the request) to this flow."
    },
    databaseUnavailable: {
        code: "database_unavailable",
        desc: "IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts."
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */
var BrowserAuthError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(BrowserAuthError, _super);
    function BrowserAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        Object.setPrototypeOf(_this, BrowserAuthError.prototype);
        _this.name = "BrowserAuthError";
        return _this;
    }
    /**
     * Creates an error thrown when PKCE is not implemented.
     * @param errDetail
     */
    BrowserAuthError.createPkceNotGeneratedError = function (errDetail) {
        return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + " Detail:" + errDetail);
    };
    /**
     * Creates an error thrown when the crypto object is unavailable.
     * @param errDetail
     */
    BrowserAuthError.createCryptoNotAvailableError = function (errDetail) {
        return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + " Detail:" + errDetail);
    };
    /**
     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.
     * @param method
     */
    BrowserAuthError.createHttpMethodNotImplementedError = function (method) {
        return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + " Given Method: " + method);
    };
    /**
     * Creates an error thrown when the navigation URI is empty.
     */
    BrowserAuthError.createEmptyNavigationUriError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     * @param hashValue
     */
    BrowserAuthError.createEmptyHashError = function (hashValue) {
        return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + " Given Url: " + hashValue);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     */
    BrowserAuthError.createHashDoesNotContainStateError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);
    };
    /**
     * Creates an error thrown when the hash string value does not contain known properties
     */
    BrowserAuthError.createHashDoesNotContainKnownPropertiesError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     */
    BrowserAuthError.createUnableToParseStateError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);
    };
    /**
     * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.
     */
    BrowserAuthError.createStateInteractionTypeMismatchError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);
    };
    /**
     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.
     */
    BrowserAuthError.createInteractionInProgressError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);
    };
    /**
     * Creates an error thrown when the popup window could not be opened.
     * @param errDetail
     */
    BrowserAuthError.createPopupWindowError = function (errDetail) {
        var errorMessage = BrowserAuthErrorMessage.popupWindowError.desc;
        errorMessage = !_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(errDetail) ? errorMessage + " Details: " + errDetail : errorMessage;
        return new BrowserAuthError(BrowserAuthErrorMessage.popupWindowError.code, errorMessage);
    };
    /**
     * Creates an error thrown when window.open returns an empty window object.
     * @param errDetail
     */
    BrowserAuthError.createEmptyWindowCreatedError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);
    };
    /**
     * Creates an error thrown when the user closes a popup.
     */
    BrowserAuthError.createUserCancelledError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);
    };
    /**
     * Creates an error thrown when monitorPopupFromHash times out for a given popup.
     */
    BrowserAuthError.createMonitorPopupTimeoutError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);
    };
    /**
     * Creates an error thrown when monitorIframeFromHash times out for a given iframe.
     */
    BrowserAuthError.createMonitorIframeTimeoutError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);
    };
    /**
     * Creates an error thrown when navigateWindow is called inside an iframe.
     * @param windowParentCheck
     */
    BrowserAuthError.createRedirectInIframeError = function (windowParentCheck) {
        return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + " (window.parent !== window) => " + windowParentCheck);
    };
    /**
     * Creates an error thrown when an auth reload is done inside an iframe.
     */
    BrowserAuthError.createBlockReloadInHiddenIframeError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);
    };
    /**
     * Creates an error thrown when a popup attempts to call an acquireToken API
     * @returns
     */
    BrowserAuthError.createBlockAcquireTokenInPopupsError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);
    };
    /**
     * Creates an error thrown when an iframe is found to be closed before the timeout is reached.
     */
    BrowserAuthError.createIframeClosedPrematurelyError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);
    };
    /**
     * Creates an error thrown when the logout API is called on any of the silent interaction clients
     */
    BrowserAuthError.createSilentLogoutUnsupportedError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.silentLogoutUnsupportedError.code, BrowserAuthErrorMessage.silentLogoutUnsupportedError.desc);
    };
    /**
     * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.
     */
    BrowserAuthError.createNoAccountError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);
    };
    /**
     * Creates an error thrown when a given prompt value is invalid for silent requests.
     */
    BrowserAuthError.createSilentPromptValueError = function (givenPrompt) {
        return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + " Given value: " + givenPrompt);
    };
    /**
     * Creates an error thrown when the cached token request could not be retrieved from the cache
     */
    BrowserAuthError.createUnableToParseTokenRequestCacheError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);
    };
    /**
     * Creates an error thrown when the token request could not be retrieved from the cache
     */
    BrowserAuthError.createNoTokenRequestCacheError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);
    };
    /**
     * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)
     */
    BrowserAuthError.createAuthRequestNotSetError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);
    };
    /**
     * Creates an error thrown when the authority could not be retrieved from the cache
     */
    BrowserAuthError.createNoCachedAuthorityError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);
    };
    /**
     * Creates an error thrown if cache type is invalid.
     */
    BrowserAuthError.createInvalidCacheTypeError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, "" + BrowserAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Create an error thrown when login and token requests are made from a non-browser environment
     */
    BrowserAuthError.createNonBrowserEnvironmentError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);
    };
    /**
     * Create an error thrown when indexDB database is not open
     */
    BrowserAuthError.createDatabaseNotOpenError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);
    };
    /**
     * Create an error thrown when token fetch fails due to no internet
     */
    BrowserAuthError.createNoNetworkConnectivityError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);
    };
    /**
     * Create an error thrown when token fetch fails due to reasons other than internet connectivity
     */
    BrowserAuthError.createPostRequestFailedError = function (errorDesc, endpoint) {
        return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, BrowserAuthErrorMessage.postRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when get request fails due to reasons other than internet connectivity
     */
    BrowserAuthError.createGetRequestFailedError = function (errorDesc, endpoint) {
        return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, BrowserAuthErrorMessage.getRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when network client fails to parse network response
     */
    BrowserAuthError.createFailedToParseNetworkResponseError = function (endpoint) {
        return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, BrowserAuthErrorMessage.failedToParseNetworkResponse.desc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when the necessary information is not available to sideload tokens
     */
    BrowserAuthError.createUnableToLoadTokenError = function (errorDetail) {
        return new BrowserAuthError(BrowserAuthErrorMessage.unableToLoadTokenError.code, BrowserAuthErrorMessage.unableToLoadTokenError.desc + " | " + errorDetail);
    };
    /**
     * Create an error thrown when the queried cryptographic key is not found in IndexedDB
     */
    BrowserAuthError.createSigningKeyNotFoundInStorageError = function (keyId) {
        return new BrowserAuthError(BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code, BrowserAuthErrorMessage.signingKeyNotFoundInStorage.desc + " | No match found for KeyId: " + keyId);
    };
    /**
     * Create an error when an authorization code is required but not provided
     */
    BrowserAuthError.createAuthCodeRequiredError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.authCodeRequired.code, BrowserAuthErrorMessage.authCodeRequired.desc);
    };
    /**
     * Create an error when IndexedDB is unavailable
     */
    BrowserAuthError.createDatabaseUnavailableError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.databaseUnavailable.code, BrowserAuthErrorMessage.databaseUnavailable.desc);
    };
    return BrowserAuthError;
}(_azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.AuthError));


//# sourceMappingURL=BrowserAuthError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserConfigurationAuthError": () => (/* binding */ BrowserConfigurationAuthError),
/* harmony export */   "BrowserConfigurationAuthErrorMessage": () => (/* binding */ BrowserConfigurationAuthErrorMessage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */
var BrowserConfigurationAuthErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    storageNotSupportedError: {
        code: "storage_not_supported",
        desc: "Given storage configuration option was not supported."
    },
    noRedirectCallbacksSet: {
        code: "no_redirect_callbacks",
        desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. " +
            "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
    },
    invalidCallbackObject: {
        code: "invalid_callback_object",
        desc: "The object passed for the callback was invalid. " +
            "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
    },
    stubPcaInstanceCalled: {
        code: "stubbed_public_client_application_called",
        desc: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors"
    },
    inMemRedirectUnavailable: {
        code: "in_mem_redirect_unavailable",
        desc: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */
var BrowserConfigurationAuthError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(BrowserConfigurationAuthError, _super);
    function BrowserConfigurationAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "BrowserConfigurationAuthError";
        Object.setPrototypeOf(_this, BrowserConfigurationAuthError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */
    BrowserConfigurationAuthError.createRedirectUriEmptyError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code, BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */
    BrowserConfigurationAuthError.createPostLogoutRedirectUriEmptyError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code, BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates error thrown when given storage location is not supported.
     * @param givenStorageLocation
     */
    BrowserConfigurationAuthError.createStorageNotSupportedError = function (givenStorageLocation) {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc + " Given Location: " + givenStorageLocation);
    };
    /**
     * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().
     */
    BrowserConfigurationAuthError.createRedirectCallbacksNotSetError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);
    };
    /**
     * Creates error thrown when the stub instance of PublicClientApplication is called.
     */
    BrowserConfigurationAuthError.createStubPcaInstanceCalledError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code, BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);
    };
    /*
     * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.
     */
    BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);
    };
    return BrowserConfigurationAuthError;
}(_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.AuthError));


//# sourceMappingURL=BrowserConfigurationAuthError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/event/EventHandler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventHandler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventHandler": () => (/* binding */ EventHandler)
/* harmony export */ });
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/CacheManager.js");
/* harmony import */ var _EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var EventHandler = /** @class */ (function () {
    function EventHandler(logger, browserCrypto) {
        this.eventCallbacks = new Map();
        this.logger = logger;
        this.browserCrypto = browserCrypto;
        this.listeningToStorageEvents = false;
        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */
    EventHandler.prototype.addEventCallback = function (callback) {
        if (typeof window !== "undefined") {
            var callbackId = this.browserCrypto.createNewGuid();
            this.eventCallbacks.set(callbackId, callback);
            this.logger.verbose("Event callback registered with id: " + callbackId);
            return callbackId;
        }
        return null;
    };
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */
    EventHandler.prototype.removeEventCallback = function (callbackId) {
        this.eventCallbacks.delete(callbackId);
        this.logger.verbose("Event callback " + callbackId + " removed.");
    };
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */
    EventHandler.prototype.enableAccountStorageEvents = function () {
        if (typeof window === "undefined") {
            return;
        }
        if (!this.listeningToStorageEvents) {
            this.logger.verbose("Adding account storage listener.");
            this.listeningToStorageEvents = true;
            window.addEventListener("storage", this.handleAccountCacheChange);
        }
        else {
            this.logger.verbose("Account storage listener already registered.");
        }
    };
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */
    EventHandler.prototype.disableAccountStorageEvents = function () {
        if (typeof window === "undefined") {
            return;
        }
        if (this.listeningToStorageEvents) {
            this.logger.verbose("Removing account storage listener.");
            window.removeEventListener("storage", this.handleAccountCacheChange);
            this.listeningToStorageEvents = false;
        }
        else {
            this.logger.verbose("No account storage listener registered.");
        }
    };
    /**
     * Emits events by calling callback with event message
     * @param eventType
     * @param interactionType
     * @param payload
     * @param error
     */
    EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {
        var _this = this;
        if (typeof window !== "undefined") {
            var message_1 = {
                eventType: eventType,
                interactionType: interactionType || null,
                payload: payload || null,
                error: error || null,
                timestamp: Date.now()
            };
            this.logger.info("Emitting event: " + eventType);
            this.eventCallbacks.forEach(function (callback, callbackId) {
                _this.logger.verbose("Emitting event to callback " + callbackId + ": " + eventType);
                callback.apply(null, [message_1]);
            });
        }
    };
    /**
     * Emit account added/removed events when cached accounts are changed in a different tab or frame
     */
    EventHandler.prototype.handleAccountCacheChange = function (e) {
        try {
            var cacheValue = e.newValue || e.oldValue;
            if (!cacheValue) {
                return;
            }
            var parsedValue = JSON.parse(cacheValue);
            if (typeof parsedValue !== "object" || !_azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.AccountEntity.isAccountEntity(parsedValue)) {
                return;
            }
            var accountEntity = _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.CacheManager.toObject(new _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.AccountEntity(), parsedValue);
            var accountInfo = accountEntity.getAccountInfo();
            if (!e.oldValue && e.newValue) {
                this.logger.info("Account was added to cache in a different window");
                this.emitEvent(_EventType_js__WEBPACK_IMPORTED_MODULE_2__.EventType.ACCOUNT_ADDED, undefined, accountInfo);
            }
            else if (!e.newValue && e.oldValue) {
                this.logger.info("Account was removed from cache in a different window");
                this.emitEvent(_EventType_js__WEBPACK_IMPORTED_MODULE_2__.EventType.ACCOUNT_REMOVED, undefined, accountInfo);
            }
        }
        catch (e) {
            return;
        }
    };
    return EventHandler;
}());


//# sourceMappingURL=EventHandler.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/event/EventMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventMessageUtils": () => (/* binding */ EventMessageUtils)
/* harmony export */ });
/* harmony import */ var _EventType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var EventMessageUtils = /** @class */ (function () {
    function EventMessageUtils() {
    }
    /**
     * Gets interaction status from event message
     * @param message
     * @param currentStatus
     */
    EventMessageUtils.getInteractionStatusFromEvent = function (message, currentStatus) {
        switch (message.eventType) {
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGIN_START:
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Login;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.SSO_SILENT_START:
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.SsoSilent;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.ACQUIRE_TOKEN_START:
                if (message.interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect || message.interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Popup) {
                    return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.AcquireToken;
                }
                break;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.HANDLE_REDIRECT_START:
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.HandleRedirect;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGOUT_START:
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Logout;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.SSO_SILENT_SUCCESS:
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.SSO_SILENT_FAILURE:
                if (currentStatus && currentStatus !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.SsoSilent) {
                    // Prevent this event from clearing any status other than ssoSilent
                    break;
                }
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGOUT_END:
                if (currentStatus && currentStatus !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Logout) {
                    // Prevent this event from clearing any status other than logout
                    break;
                }
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.HANDLE_REDIRECT_END:
                if (currentStatus && currentStatus !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.HandleRedirect) {
                    // Prevent this event from clearing any status other than handleRedirect
                    break;
                }
                return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGIN_SUCCESS:
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGIN_FAILURE:
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.ACQUIRE_TOKEN_SUCCESS:
            case _EventType_js__WEBPACK_IMPORTED_MODULE_0__.EventType.ACQUIRE_TOKEN_FAILURE:
                if (message.interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect || message.interactionType === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Popup) {
                    if (currentStatus && currentStatus !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Login && currentStatus !== _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.AcquireToken) {
                        // Prevent this event from clearing any status other than login or acquireToken
                        break;
                    }
                    return _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;
                }
                break;
        }
        return null;
    };
    return EventMessageUtils;
}());


//# sourceMappingURL=EventMessage.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/event/EventType.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventType.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventType": () => (/* binding */ EventType)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var EventType;
(function (EventType) {
    EventType["ACCOUNT_ADDED"] = "msal:accountAdded";
    EventType["ACCOUNT_REMOVED"] = "msal:accountRemoved";
    EventType["LOGIN_START"] = "msal:loginStart";
    EventType["LOGIN_SUCCESS"] = "msal:loginSuccess";
    EventType["LOGIN_FAILURE"] = "msal:loginFailure";
    EventType["ACQUIRE_TOKEN_START"] = "msal:acquireTokenStart";
    EventType["ACQUIRE_TOKEN_SUCCESS"] = "msal:acquireTokenSuccess";
    EventType["ACQUIRE_TOKEN_FAILURE"] = "msal:acquireTokenFailure";
    EventType["ACQUIRE_TOKEN_NETWORK_START"] = "msal:acquireTokenFromNetworkStart";
    EventType["SSO_SILENT_START"] = "msal:ssoSilentStart";
    EventType["SSO_SILENT_SUCCESS"] = "msal:ssoSilentSuccess";
    EventType["SSO_SILENT_FAILURE"] = "msal:ssoSilentFailure";
    EventType["ACQUIRE_TOKEN_BY_CODE_START"] = "msal:acquireTokenByCodeStart";
    EventType["ACQUIRE_TOKEN_BY_CODE_SUCCESS"] = "msal:acquireTokenByCodeSuccess";
    EventType["ACQUIRE_TOKEN_BY_CODE_FAILURE"] = "msal:acquireTokenByCodeFailure";
    EventType["HANDLE_REDIRECT_START"] = "msal:handleRedirectStart";
    EventType["HANDLE_REDIRECT_END"] = "msal:handleRedirectEnd";
    EventType["POPUP_OPENED"] = "msal:popupOpened";
    EventType["LOGOUT_START"] = "msal:logoutStart";
    EventType["LOGOUT_SUCCESS"] = "msal:logoutSuccess";
    EventType["LOGOUT_FAILURE"] = "msal:logoutFailure";
    EventType["LOGOUT_END"] = "msal:logoutEnd";
})(EventType || (EventType = {}));


//# sourceMappingURL=EventType.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountEntity": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_21__.AccountEntity),
/* harmony export */   "ApiId": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.ApiId),
/* harmony export */   "AuthError": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_22__.AuthError),
/* harmony export */   "AuthErrorMessage": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_22__.AuthErrorMessage),
/* harmony export */   "AuthenticationHeaderParser": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_23__.AuthenticationHeaderParser),
/* harmony export */   "AuthenticationScheme": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_24__.AuthenticationScheme),
/* harmony export */   "AzureCloudInstance": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_25__.AzureCloudInstance),
/* harmony export */   "BrowserAuthError": () => (/* reexport safe */ _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_4__.BrowserAuthError),
/* harmony export */   "BrowserAuthErrorMessage": () => (/* reexport safe */ _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_4__.BrowserAuthErrorMessage),
/* harmony export */   "BrowserCacheLocation": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation),
/* harmony export */   "BrowserCacheManager": () => (/* reexport safe */ _cache_BrowserCacheManager_js__WEBPACK_IMPORTED_MODULE_8__.BrowserCacheManager),
/* harmony export */   "BrowserConfigurationAuthError": () => (/* reexport safe */ _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_5__.BrowserConfigurationAuthError),
/* harmony export */   "BrowserConfigurationAuthErrorMessage": () => (/* reexport safe */ _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_5__.BrowserConfigurationAuthErrorMessage),
/* harmony export */   "BrowserConstants": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants),
/* harmony export */   "BrowserUtils": () => (/* reexport safe */ _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__.BrowserUtils),
/* harmony export */   "ClientAuthError": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_26__.ClientAuthError),
/* harmony export */   "ClientAuthErrorMessage": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_26__.ClientAuthErrorMessage),
/* harmony export */   "ClientConfigurationError": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_27__.ClientConfigurationError),
/* harmony export */   "ClientConfigurationErrorMessage": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_27__.ClientConfigurationErrorMessage),
/* harmony export */   "DEFAULT_IFRAME_TIMEOUT_MS": () => (/* reexport safe */ _config_Configuration_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_IFRAME_TIMEOUT_MS),
/* harmony export */   "EventHandler": () => (/* reexport safe */ _event_EventHandler_js__WEBPACK_IMPORTED_MODULE_18__.EventHandler),
/* harmony export */   "EventMessageUtils": () => (/* reexport safe */ _event_EventMessage_js__WEBPACK_IMPORTED_MODULE_16__.EventMessageUtils),
/* harmony export */   "EventType": () => (/* reexport safe */ _event_EventType_js__WEBPACK_IMPORTED_MODULE_17__.EventType),
/* harmony export */   "InteractionRequiredAuthError": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_28__.InteractionRequiredAuthError),
/* harmony export */   "InteractionRequiredAuthErrorMessage": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_28__.InteractionRequiredAuthErrorMessage),
/* harmony export */   "InteractionStatus": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus),
/* harmony export */   "InteractionType": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InteractionType),
/* harmony export */   "LogLevel": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_29__.LogLevel),
/* harmony export */   "Logger": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_29__.Logger),
/* harmony export */   "NavigationClient": () => (/* reexport safe */ _navigation_NavigationClient_js__WEBPACK_IMPORTED_MODULE_7__.NavigationClient),
/* harmony export */   "OIDC_DEFAULT_SCOPES": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_24__.OIDC_DEFAULT_SCOPES),
/* harmony export */   "PopupClient": () => (/* reexport safe */ _interaction_client_PopupClient_js__WEBPACK_IMPORTED_MODULE_11__.PopupClient),
/* harmony export */   "PopupUtils": () => (/* reexport safe */ _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_20__.PopupUtils),
/* harmony export */   "ProtocolMode": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_30__.ProtocolMode),
/* harmony export */   "PublicClientApplication": () => (/* reexport safe */ _app_PublicClientApplication_js__WEBPACK_IMPORTED_MODULE_0__.PublicClientApplication),
/* harmony export */   "RedirectClient": () => (/* reexport safe */ _interaction_client_RedirectClient_js__WEBPACK_IMPORTED_MODULE_10__.RedirectClient),
/* harmony export */   "RedirectHandler": () => (/* reexport safe */ _interaction_handler_RedirectHandler_js__WEBPACK_IMPORTED_MODULE_15__.RedirectHandler),
/* harmony export */   "ServerError": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_31__.ServerError),
/* harmony export */   "SignedHttpRequest": () => (/* reexport safe */ _crypto_SignedHttpRequest_js__WEBPACK_IMPORTED_MODULE_19__.SignedHttpRequest),
/* harmony export */   "SilentCacheClient": () => (/* reexport safe */ _interaction_client_SilentCacheClient_js__WEBPACK_IMPORTED_MODULE_13__.SilentCacheClient),
/* harmony export */   "SilentIframeClient": () => (/* reexport safe */ _interaction_client_SilentIframeClient_js__WEBPACK_IMPORTED_MODULE_12__.SilentIframeClient),
/* harmony export */   "SilentRefreshClient": () => (/* reexport safe */ _interaction_client_SilentRefreshClient_js__WEBPACK_IMPORTED_MODULE_14__.SilentRefreshClient),
/* harmony export */   "StandardInteractionClient": () => (/* reexport safe */ _interaction_client_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_9__.StandardInteractionClient),
/* harmony export */   "StringUtils": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_32__.StringUtils),
/* harmony export */   "TemporaryCacheKeys": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys),
/* harmony export */   "UrlString": () => (/* reexport safe */ _azure_msal_common__WEBPACK_IMPORTED_MODULE_33__.UrlString),
/* harmony export */   "WrapperSKU": () => (/* reexport safe */ _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.WrapperSKU),
/* harmony export */   "stubbedPublicClientApplication": () => (/* reexport safe */ _app_IPublicClientApplication_js__WEBPACK_IMPORTED_MODULE_6__.stubbedPublicClientApplication),
/* harmony export */   "version": () => (/* reexport safe */ _packageMetadata_js__WEBPACK_IMPORTED_MODULE_34__.version)
/* harmony export */ });
/* harmony import */ var _app_PublicClientApplication_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/PublicClientApplication.js */ "./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js");
/* harmony import */ var _config_Configuration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/Configuration.js */ "./node_modules/@azure/msal-browser/dist/config/Configuration.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _error_BrowserConfigurationAuthError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error/BrowserConfigurationAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.js");
/* harmony import */ var _app_IPublicClientApplication_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./app/IPublicClientApplication.js */ "./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.js");
/* harmony import */ var _navigation_NavigationClient_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./navigation/NavigationClient.js */ "./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.js");
/* harmony import */ var _cache_BrowserCacheManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cache/BrowserCacheManager.js */ "./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.js");
/* harmony import */ var _interaction_client_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./interaction_client/StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _interaction_client_RedirectClient_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./interaction_client/RedirectClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.js");
/* harmony import */ var _interaction_client_PopupClient_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./interaction_client/PopupClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.js");
/* harmony import */ var _interaction_client_SilentIframeClient_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./interaction_client/SilentIframeClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.js");
/* harmony import */ var _interaction_client_SilentCacheClient_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./interaction_client/SilentCacheClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.js");
/* harmony import */ var _interaction_client_SilentRefreshClient_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./interaction_client/SilentRefreshClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.js");
/* harmony import */ var _interaction_handler_RedirectHandler_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./interaction_handler/RedirectHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.js");
/* harmony import */ var _event_EventMessage_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./event/EventMessage.js */ "./node_modules/@azure/msal-browser/dist/event/EventMessage.js");
/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./event/EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _event_EventHandler_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./event/EventHandler.js */ "./node_modules/@azure/msal-browser/dist/event/EventHandler.js");
/* harmony import */ var _crypto_SignedHttpRequest_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./crypto/SignedHttpRequest.js */ "./node_modules/@azure/msal-browser/dist/crypto/SignedHttpRequest.js");
/* harmony import */ var _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/PopupUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/PopupUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/request/AuthenticationHeaderParser.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/logger/Logger.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/ProtocolMode.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ServerError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./packageMetadata.js */ "./node_modules/@azure/msal-browser/dist/packageMetadata.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */
























//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseInteractionClient": () => (/* binding */ BaseInteractionClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../packageMetadata.js */ "./node_modules/@azure/msal-browser/dist/packageMetadata.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var BaseInteractionClient = /** @class */ (function () {
    function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, correlationId) {
        this.config = config;
        this.browserStorage = storageImpl;
        this.browserCrypto = browserCrypto;
        this.networkClient = this.config.system.networkClient;
        this.eventHandler = eventHandler;
        this.correlationId = correlationId || this.browserCrypto.createNewGuid();
        this.logger = logger.clone(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_0__.BrowserConstants.MSAL_SKU, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_1__.version, this.correlationId);
    }
    BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!account) return [3 /*break*/, 5];
                        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {
                            this.logger.verbose("Setting active account to null");
                            this.browserStorage.setActiveAccount(null);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.browserStorage.removeAccount(_azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.generateAccountCacheKey(account))];
                    case 2:
                        _a.sent();
                        this.logger.verbose("Cleared cache items belonging to the account provided in the logout request.");
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        this.logger.error("Account provided in logout request was not found. Local cache unchanged.");
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        _a.trys.push([5, 8, , 9]);
                        // Clear all accounts and tokens
                        return [4 /*yield*/, this.browserStorage.clear()];
                    case 6:
                        // Clear all accounts and tokens
                        _a.sent();
                        // Clear any stray keys from IndexedDB
                        return [4 /*yield*/, this.browserCrypto.clearKeystore()];
                    case 7:
                        // Clear any stray keys from IndexedDB
                        _a.sent();
                        this.logger.verbose("No account provided in logout request, clearing all cache items.");
                        return [3 /*break*/, 9];
                    case 8:
                        _a.sent();
                        this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged.");
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Initializer function for all request APIs
     * @param request
     */
    BaseInteractionClient.prototype.initializeBaseRequest = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var authority, scopes, validatedRequest, _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.logger.verbose("Initializing BaseAuthRequest");
                        authority = request.authority || this.config.auth.authority;
                        scopes = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spread)(((request && request.scopes) || []));
                        validatedRequest = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, request), { correlationId: this.correlationId, authority: authority,
                            scopes: scopes });
                        // Set authenticationScheme to BEARER if not explicitly set in the request
                        if (!validatedRequest.authenticationScheme) {
                            validatedRequest.authenticationScheme = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.BEARER;
                            this.logger.verbose("Authentication Scheme wasn't explicitly set in request, defaulting to \"Bearer\" request");
                        }
                        else {
                            if (validatedRequest.authenticationScheme === _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.SSH) {
                                if (!request.sshJwk) {
                                    throw _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.ClientConfigurationError.createMissingSshJwkError();
                                }
                                if (!request.sshKid) {
                                    throw _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.ClientConfigurationError.createMissingSshKidError();
                                }
                            }
                            this.logger.verbose("Authentication Scheme set to \"" + validatedRequest.authenticationScheme + "\" as configured in Auth request");
                        }
                        if (!(request.claims && !_azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.StringUtils.isEmpty(request.claims))) return [3 /*break*/, 2];
                        _a = validatedRequest;
                        return [4 /*yield*/, this.browserCrypto.hashString(request.claims)];
                    case 1:
                        _a.requestedClaimsHash = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, validatedRequest];
                }
            });
        });
    };
    /**
     *
     * Use to get the redirect uri configured in MSAL or null.
     * @param requestRedirectUri
     * @returns Redirect URL
     *
     */
    BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {
        this.logger.verbose("getRedirectUri called");
        var redirectUri = requestRedirectUri || this.config.auth.redirectUri || _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_7__.BrowserUtils.getCurrentUri();
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__.UrlString.getAbsoluteUrl(redirectUri, _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_7__.BrowserUtils.getCurrentUri());
    };
    /**
     *
     * @param apiId
     * @param correlationId
     * @param forceRefresh
     */
    BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {
        this.logger.verbose("initializeServerTelemetryManager called");
        var telemetryPayload = {
            clientId: this.config.auth.clientId,
            correlationId: this.correlationId,
            apiId: apiId,
            forceRefresh: forceRefresh || false,
            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],
            wrapperVer: this.browserStorage.getWrapperMetadata()[1]
        };
        return new _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__.ServerTelemetryManager(telemetryPayload, this.browserStorage);
    };
    return BaseInteractionClient;
}());


//# sourceMappingURL=BaseInteractionClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HybridSpaAuthorizationCodeClient": () => (/* binding */ HybridSpaAuthorizationCodeClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var HybridSpaAuthorizationCodeClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(HybridSpaAuthorizationCodeClient, _super);
    function HybridSpaAuthorizationCodeClient(config) {
        var _this = _super.call(this, config) || this;
        _this.includeRedirectUri = false;
        return _this;
    }
    return HybridSpaAuthorizationCodeClient;
}(_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.AuthorizationCodeClient));


//# sourceMappingURL=HybridSpaAuthorizationCodeClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopupClient": () => (/* binding */ PopupClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PopupUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/PopupUtils.js");
/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../event/EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _interaction_handler_PopupHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interaction_handler/PopupHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/PopupHandler.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */










/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var PopupClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(PopupClient, _super);
    function PopupClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority
     * @param request
     */
    PopupClient.prototype.acquireToken = function (request) {
        try {
            var popupName = _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__.PopupUtils.generatePopupName(this.config.auth.clientId, request.scopes || _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority, this.correlationId);
            var popupWindowAttributes = request.popupWindowAttributes || {};
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true, acquiring token");
                // Passes on popup position and dimensions if in request
                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);
            }
            else {
                // asyncPopups flag is set to false. Opens popup before acquiring token.
                this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
                var popup = _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__.PopupUtils.openSizedPopup("about:blank", popupName, popupWindowAttributes, this.logger);
                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */
    PopupClient.prototype.logout = function (logoutRequest) {
        try {
            this.logger.verbose("logoutPopup called");
            var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
            var popupName = _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__.PopupUtils.generateLogoutPopupName(this.config.auth.clientId, validLogoutRequest);
            var authority = logoutRequest && logoutRequest.authority;
            var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;
            var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {};
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true");
                // Passes on popup position and dimensions if in request
                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);
            }
            else {
                // asyncPopups flag is set to false. Opens popup before logging out.
                this.logger.verbose("asyncPopup set to false, opening popup");
                var popup = _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__.PopupUtils.openSizedPopup("about:blank", popupName, popupWindowAttributes, this.logger);
                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);
            }
        }
        catch (e) {
            // Since this function is synchronous we need to reject
            return Promise.reject(e);
        }
    };
    /**
     * Helper which obtains an access_token for your API via opening a popup window in the user's browser
     * @param validRequest
     * @param popupName
     * @param popup
     * @param popupWindowAttributes
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var serverTelemetryManager, validRequest, authCodeRequest, authClient, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, state, result, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("acquireTokenPopupAsync called");
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenPopup);
                        return [4 /*yield*/, this.initializeAuthorizationRequest(request, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup)];
                    case 1:
                        validRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 8, , 9]);
                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                    case 3:
                        authCodeRequest = _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];
                    case 4:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                    case 5:
                        navigateUrl = _a.sent();
                        interactionHandler = new _interaction_handler_PopupHandler_js__WEBPACK_IMPORTED_MODULE_4__.PopupHandler(authClient, this.browserStorage, authCodeRequest, this.logger);
                        popupParameters = {
                            popup: popup,
                            popupName: popupName,
                            popupWindowAttributes: popupWindowAttributes
                        };
                        popupWindow = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.POPUP_OPENED, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup, { popupWindow: popupWindow }, null);
                        return [4 /*yield*/, interactionHandler.monitorPopupForHash(popupWindow)];
                    case 6:
                        hash = _a.sent();
                        state = this.validateAndExtractStateFromHash(hash, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup, validRequest.correlationId);
                        // Remove throttle if it exists
                        _azure_msal_common__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);
                        return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];
                    case 7:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 8:
                        e_1 = _a.sent();
                        if (popup) {
                            // Close the synchronous popup if an error is thrown before the window unload event is registered
                            popup.close();
                        }
                        if (e_1 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_7__.AuthError) {
                            e_1.setCorrelationId(this.correlationId);
                        }
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(validRequest.state);
                        throw e_1;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * @param validRequest
     * @param popupName
     * @param requestAuthority
     * @param popup
     * @param mainWindowRedirectUri
     * @param popupWindowAttributes
     */
    PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var serverTelemetryManager, authClient, logoutUri, popupUtils, popupWindow, e_2, navigationOptions, absoluteUrl, e_3;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("logoutPopupAsync called");
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.LOGOUT_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup, validRequest);
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.ApiId.logoutPopup);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 8, , 9]);
                        // Clear cache on logout
                        return [4 /*yield*/, this.clearCacheOnLogout(validRequest.account)];
                    case 2:
                        // Clear cache on logout
                        _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];
                    case 3:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        logoutUri = authClient.getLogoutUri(validRequest);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup, validRequest);
                        popupUtils = new _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__.PopupUtils(this.browserStorage, this.logger);
                        popupWindow = popupUtils.openPopup(logoutUri, { popupName: popupName, popupWindowAttributes: popupWindowAttributes, popup: popup });
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.POPUP_OPENED, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup, { popupWindow: popupWindow }, null);
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        // Don't care if this throws an error (User Cancelled)
                        return [4 /*yield*/, popupUtils.monitorPopupForSameOrigin(popupWindow)];
                    case 5:
                        // Don't care if this throws an error (User Cancelled)
                        _a.sent();
                        this.logger.verbose("Popup successfully redirected to postLogoutRedirectUri");
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _a.sent();
                        this.logger.verbose("Error occurred while monitoring popup for same origin. Session on server may remain active. Error: " + e_2);
                        return [3 /*break*/, 7];
                    case 7:
                        popupUtils.cleanPopup(popupWindow);
                        if (mainWindowRedirectUri) {
                            navigationOptions = {
                                apiId: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.ApiId.logoutPopup,
                                timeout: this.config.system.redirectNavigationTimeout,
                                noHistory: false
                            };
                            absoluteUrl = _azure_msal_common__WEBPACK_IMPORTED_MODULE_8__.UrlString.getAbsoluteUrl(mainWindowRedirectUri, _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_9__.BrowserUtils.getCurrentUri());
                            this.logger.verbose("Redirecting main window to url specified in the request");
                            this.logger.verbosePii("Redirecting main window to: " + absoluteUrl);
                            this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
                        }
                        else {
                            this.logger.verbose("No main window navigation requested");
                        }
                        return [3 /*break*/, 9];
                    case 8:
                        e_3 = _a.sent();
                        if (popup) {
                            // Close the synchronous popup if an error is thrown before the window unload event is registered
                            popup.close();
                        }
                        if (e_3 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_7__.AuthError) {
                            e_3.setCorrelationId(this.correlationId);
                        }
                        this.browserStorage.setInteractionInProgress(false);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.LOGOUT_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup, null, e_3);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.LOGOUT_END, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup);
                        serverTelemetryManager.cacheFailedRequest(e_3);
                        throw e_3;
                    case 9:
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_5__.EventType.LOGOUT_END, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Popup);
                        return [2 /*return*/];
                }
            });
        });
    };
    return PopupClient;
}(_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_10__.StandardInteractionClient));


//# sourceMappingURL=PopupClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RedirectClient": () => (/* binding */ RedirectClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _interaction_handler_RedirectHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interaction_handler/RedirectHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../event/EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */










/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RedirectClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(RedirectClient, _super);
    function RedirectClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Redirects the page to the /authorize endpoint of the IDP
     * @param request
     */
    RedirectClient.prototype.acquireToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.initializeAuthorizationRequest(request, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect)];
                    case 1:
                        validRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.acquireTokenRedirect);
                        handleBackButton = function (event) {
                            // Clear temporary cache if the back button is clicked during the redirect flow.
                            if (event.persisted) {
                                _this.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache.");
                                _this.browserStorage.cleanRequestByState(validRequest.state);
                            }
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                    case 3:
                        authCodeRequest = _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];
                    case 4:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        interactionHandler = new _interaction_handler_RedirectHandler_js__WEBPACK_IMPORTED_MODULE_2__.RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);
                        return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                    case 5:
                        navigateUrl = _a.sent();
                        redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
                        this.logger.verbosePii("Redirect start page: " + redirectStartPage);
                        // Clear temporary cache if the back button is clicked during the redirect flow.
                        window.addEventListener("pageshow", handleBackButton);
                        return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {
                                navigationClient: this.navigationClient,
                                redirectTimeout: this.config.system.redirectNavigationTimeout,
                                redirectStartPage: redirectStartPage,
                                onRedirectNavigate: request.onRedirectNavigate
                            })];
                    case 6: 
                    // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                    return [2 /*return*/, _a.sent()];
                    case 7:
                        e_1 = _a.sent();
                        if (e_1 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.AuthError) {
                            e_1.setCorrelationId(this.correlationId);
                        }
                        window.removeEventListener("pageshow", handleBackButton);
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(validRequest.state);
                        throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if navigateToLoginRequestUrl is set, and:
     * - if true, performs logic to cache and navigate
     * - if false, handles hash string and parses response
     * @param hash
     */
    RedirectClient.prototype.handleRedirectPromise = function (hash) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var serverTelemetryManager, responseHash, state, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.handleRedirectPromise);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 10, , 11]);
                        if (!this.browserStorage.isInteractionInProgress(true)) {
                            this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                            return [2 /*return*/, null];
                        }
                        responseHash = this.getRedirectResponseHash(hash || window.location.hash);
                        if (!responseHash) {
                            // Not a recognized server response hash or hash not associated with a redirect request
                            this.logger.info("handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.");
                            this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect);
                            return [2 /*return*/, null];
                        }
                        state = void 0;
                        try {
                            state = this.validateAndExtractStateFromHash(responseHash, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect);
                            this.logger.verbose("State extracted from hash");
                        }
                        catch (e) {
                            this.logger.info("handleRedirectPromise was unable to extract state due to: " + e);
                            this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect);
                            return [2 /*return*/, null];
                        }
                        loginRequestUrl = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.TemporaryCacheKeys.ORIGIN_URI, true) || "";
                        loginRequestUrlNormalized = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.UrlString.removeHashFromUrl(loginRequestUrl);
                        currentUrlNormalized = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.UrlString.removeHashFromUrl(window.location.href);
                        if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 3];
                        // We are on the page we need to navigate to - handle hash
                        this.logger.verbose("Current page is loginRequestUrl, handling hash");
                        return [4 /*yield*/, this.handleHash(responseHash, state, serverTelemetryManager)];
                    case 2:
                        handleHashResult = _a.sent();
                        if (loginRequestUrl.indexOf("#") > -1) {
                            // Replace current hash with non-msal hash, if present
                            _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_5__.BrowserUtils.replaceHash(loginRequestUrl);
                        }
                        return [2 /*return*/, handleHashResult];
                    case 3:
                        if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 4];
                        this.logger.verbose("NavigateToLoginRequestUrl set to false, handling hash");
                        return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];
                    case 4:
                        if (!(!_utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_5__.BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3 /*break*/, 9];
                        /*
                         * Returned from authority using redirect - need to perform navigation before processing response
                         * Cache the hash to be retrieved after the next redirect
                         */
                        this.browserStorage.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.TemporaryCacheKeys.URL_HASH, responseHash, true);
                        navigationOptions = {
                            apiId: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.handleRedirectPromise,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: true
                        };
                        processHashOnRedirect = true;
                        if (!(!loginRequestUrl || loginRequestUrl === "null")) return [3 /*break*/, 6];
                        homepage = _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_5__.BrowserUtils.getHomepage();
                        // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                        this.browserStorage.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.TemporaryCacheKeys.ORIGIN_URI, homepage, true);
                        this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                        return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];
                    case 5:
                        processHashOnRedirect = _a.sent();
                        return [3 /*break*/, 8];
                    case 6:
                        // Navigate to page that initiated the redirect request
                        this.logger.verbose("Navigating to loginRequestUrl: " + loginRequestUrl);
                        return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];
                    case 7:
                        processHashOnRedirect = _a.sent();
                        _a.label = 8;
                    case 8:
                        // If navigateInternal implementation returns false, handle the hash now
                        if (!processHashOnRedirect) {
                            return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];
                        }
                        _a.label = 9;
                    case 9: return [2 /*return*/, null];
                    case 10:
                        e_2 = _a.sent();
                        if (e_2 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.AuthError) {
                            e_2.setCorrelationId(this.correlationId);
                        }
                        serverTelemetryManager.cacheFailedRequest(e_2);
                        this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect);
                        throw e_2;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the response hash for a redirect request
     * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
     * @param hash
     */
    RedirectClient.prototype.getRedirectResponseHash = function (hash) {
        this.logger.verbose("getRedirectResponseHash called");
        // Get current location hash from window or cache.
        var isResponseHash = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.UrlString.hashContainsKnownProperties(hash);
        if (isResponseHash) {
            _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_5__.BrowserUtils.clearHash(window);
            this.logger.verbose("Hash contains known properties, returning response hash");
            return hash;
        }
        var cachedHash = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.TemporaryCacheKeys.URL_HASH, true);
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.TemporaryCacheKeys.URL_HASH));
        this.logger.verbose("Hash does not contain known properties, returning cached hash");
        return cachedHash;
    };
    /**
     * Checks if hash exists and handles in window.
     * @param hash
     * @param state
     */
    RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var cachedRequest, currentAuthority, authClient, interactionHandler;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);
                        this.logger.verbose("handleHash called, retrieved cached request");
                        currentAuthority = this.browserStorage.getCachedAuthority(state);
                        if (!currentAuthority) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_6__.BrowserAuthError.createNoCachedAuthorityError();
                        }
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];
                    case 1:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        interactionHandler = new _interaction_handler_RedirectHandler_js__WEBPACK_IMPORTED_MODULE_2__.RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);
                        return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */
    RedirectClient.prototype.logout = function (logoutRequest) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("logoutRedirect called");
                        validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.logout);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 10, , 11]);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_7__.EventType.LOGOUT_START, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect, logoutRequest);
                        // Clear cache on logout
                        return [4 /*yield*/, this.clearCacheOnLogout(validLogoutRequest.account)];
                    case 2:
                        // Clear cache on logout
                        _a.sent();
                        navigationOptions = {
                            apiId: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.logout,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: false
                        };
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];
                    case 3:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        logoutUri = authClient.getLogoutUri(validLogoutRequest);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_7__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect, validLogoutRequest);
                        if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === "function")) return [3 /*break*/, 7];
                        navigate = logoutRequest.onRedirectNavigate(logoutUri);
                        if (!(navigate !== false)) return [3 /*break*/, 5];
                        this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                        return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                    case 5:
                        this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                        _a.label = 6;
                    case 6: return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        e_3 = _a.sent();
                        if (e_3 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.AuthError) {
                            e_3.setCorrelationId(this.correlationId);
                        }
                        serverTelemetryManager.cacheFailedRequest(e_3);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_7__.EventType.LOGOUT_FAILURE, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect, null, e_3);
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_7__.EventType.LOGOUT_END, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect);
                        throw e_3;
                    case 11:
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_7__.EventType.LOGOUT_END, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Use to get the redirectStartPage either from request or use current window
     * @param requestStartPage
     */
    RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {
        var redirectStartPage = requestStartPage || window.location.href;
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.UrlString.getAbsoluteUrl(redirectStartPage, _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_5__.BrowserUtils.getCurrentUri());
    };
    return RedirectClient;
}(_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_8__.StandardInteractionClient));


//# sourceMappingURL=RedirectClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SilentAuthCodeClient": () => (/* binding */ SilentAuthCodeClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _interaction_handler_SilentHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interaction_handler/SilentHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.js");
/* harmony import */ var _HybridSpaAuthorizationCodeClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HybridSpaAuthorizationCodeClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */









/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentAuthCodeClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(SilentAuthCodeClient, _super);
    function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {
        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;
        _this.apiId = apiId;
        return _this;
    }
    /**
     * Acquires a token silently by redeeming an authorization code against the /token endpoint
     * @param request
     */
    SilentAuthCodeClient.prototype.acquireToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.trace("SilentAuthCodeClient.acquireToken called");
                        // Auth code payload is required
                        if (!request.code) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_1__.BrowserAuthError.createAuthCodeRequiredError();
                        }
                        return [4 /*yield*/, this.initializeAuthorizationRequest(request, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Silent)];
                    case 1:
                        silentRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || "", silentRequest.account || null);
                        serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        authCodeRequest = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, silentRequest), { code: request.code });
                        return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];
                    case 3:
                        clientConfig = _a.sent();
                        authClient = new _HybridSpaAuthorizationCodeClient_js__WEBPACK_IMPORTED_MODULE_3__.HybridSpaAuthorizationCodeClient(clientConfig);
                        this.logger.verbose("Auth code client created");
                        silentHandler = new _interaction_handler_SilentHandler_js__WEBPACK_IMPORTED_MODULE_4__.SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);
                        // Handle auth code parameters from request
                        return [2 /*return*/, silentHandler.handleCodeResponseFromServer({
                                code: request.code,
                                msgraph_host: request.msGraphHost,
                                cloud_graph_host_name: request.cloudGraphHostName,
                                cloud_instance_host_name: request.cloudInstanceHostName
                            }, silentRequest.state, authClient.authority, this.networkClient, false)];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.AuthError) {
                            e_1.setCorrelationId(this.correlationId);
                        }
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(silentRequest.state);
                        throw e_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */
    SilentAuthCodeClient.prototype.logout = function () {
        // Synchronous so we must reject
        return Promise.reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_1__.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    return SilentAuthCodeClient;
}(_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_6__.StandardInteractionClient));


//# sourceMappingURL=SilentAuthCodeClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SilentCacheClient": () => (/* binding */ SilentCacheClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/client/SilentFlowClient.js");
/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../event/EventType.js */ "./node_modules/@azure/msal-browser/dist/event/EventType.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */








/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentCacheClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(SilentCacheClient, _super);
    function SilentCacheClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns unexpired tokens from the cache, if available
     * @param silentRequest
     */
    SilentCacheClient.prototype.acquireToken = function (silentRequest) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var serverTelemetryManager, silentAuthClient, cachedToken, error_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.acquireTokenSilent_silentFlow);
                        return [4 /*yield*/, this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];
                    case 1:
                        silentAuthClient = _a.sent();
                        this.logger.verbose("Silent auth client created");
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, silentAuthClient.acquireCachedToken(silentRequest)];
                    case 3:
                        cachedToken = _a.sent();
                        this.eventHandler.emitEvent(_event_EventType_js__WEBPACK_IMPORTED_MODULE_2__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Silent, cachedToken);
                        return [2 /*return*/, cachedToken];
                    case 4:
                        error_1 = _a.sent();
                        if (error_1 instanceof _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError && error_1.errorCode === _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {
                            this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.");
                        }
                        throw error_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */
    SilentCacheClient.prototype.logout = function () {
        // Synchronous so we must reject
        return Promise.reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    /**
     * Creates an Silent Flow Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */
    SilentCacheClient.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var clientConfig;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];
                    case 1:
                        clientConfig = _a.sent();
                        return [2 /*return*/, new _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.SilentFlowClient(clientConfig)];
                }
            });
        });
    };
    SilentCacheClient.prototype.initializeSilentRequest = function (request, account) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = [(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, request)];
                        return [4 /*yield*/, this.initializeBaseRequest(request)];
                    case 1: return [2 /*return*/, _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign.apply(void 0, [_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign.apply(void 0, _a.concat([_b.sent()])), { account: account, forceRefresh: request.forceRefresh || false }])];
                }
            });
        });
    };
    return SilentCacheClient;
}(_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_5__.StandardInteractionClient));


//# sourceMappingURL=SilentCacheClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SilentIframeClient": () => (/* binding */ SilentIframeClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _interaction_handler_SilentHandler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../interaction_handler/SilentHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */








/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentIframeClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(SilentIframeClient, _super);
    function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {
        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;
        _this.apiId = apiId;
        return _this;
    }
    /**
     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none
     * @param request
     */
    SilentIframeClient.prototype.acquireToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var silentRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("acquireTokenByIframe called");
                        // Check that we have some SSO data
                        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(request.loginHint) && _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(request.sid) && (!request.account || _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(request.account.username))) {
                            this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");
                        }
                        // Check that prompt is set to none, throw error if it is set to anything else.
                        if (request.prompt && request.prompt !== _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createSilentPromptValueError(request.prompt);
                        }
                        return [4 /*yield*/, this.initializeAuthorizationRequest((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, request), { prompt: _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE }), _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_4__.InteractionType.Silent)];
                    case 1:
                        silentRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || "", silentRequest.account || null);
                        serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(silentRequest)];
                    case 3:
                        authCodeRequest = _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];
                    case 4:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        return [4 /*yield*/, authClient.getAuthCodeUrl(silentRequest)];
                    case 5:
                        navigateUrl = _a.sent();
                        return [4 /*yield*/, this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger)];
                    case 6: return [2 /*return*/, _a.sent()];
                    case 7:
                        e_1 = _a.sent();
                        if (e_1 instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.AuthError) {
                            e_1.setCorrelationId(this.correlationId);
                        }
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(silentRequest.state);
                        throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */
    SilentIframeClient.prototype.logout = function () {
        // Synchronous so we must reject
        return Promise.reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    /**
     * Helper which acquires an authorization code silently using a hidden iframe from given url
     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
     * @param navigateUrl
     * @param userRequestScopes
     */
    SilentIframeClient.prototype.silentTokenHelper = function (navigateUrl, authCodeRequest, authClient, browserRequestLogger) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var silentHandler, msalFrame, hash, state;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        silentHandler = new _interaction_handler_SilentHandler_js__WEBPACK_IMPORTED_MODULE_6__.SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);
                        return [4 /*yield*/, silentHandler.initiateAuthRequest(navigateUrl)];
                    case 1:
                        msalFrame = _a.sent();
                        return [4 /*yield*/, silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];
                    case 2:
                        hash = _a.sent();
                        state = this.validateAndExtractStateFromHash(hash, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_4__.InteractionType.Silent, authCodeRequest.correlationId);
                        // Handle response from hash string
                        return [2 /*return*/, silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];
                }
            });
        });
    };
    return SilentIframeClient;
}(_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_7__.StandardInteractionClient));


//# sourceMappingURL=SilentIframeClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SilentRefreshClient": () => (/* binding */ SilentRefreshClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./StandardInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentRefreshClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(SilentRefreshClient, _super);
    function SilentRefreshClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Exchanges the refresh token for new tokens
     * @param request
     */
    SilentRefreshClient.prototype.acquireToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var silentRequest, _a, serverTelemetryManager, refreshTokenClient;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = [(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, request)];
                        return [4 /*yield*/, this.initializeBaseRequest(request)];
                    case 1:
                        silentRequest = _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign.apply(void 0, _a.concat([_b.sent()]));
                        serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.ApiId.acquireTokenSilent_silentFlow);
                        return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];
                    case 2:
                        refreshTokenClient = _b.sent();
                        this.logger.verbose("Refresh token client created");
                        // Send request to renew token. Auth module will throw errors if token cannot be renewed.
                        return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest).catch(function (e) {
                                if (e instanceof _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.AuthError) {
                                    e.setCorrelationId(_this.correlationId);
                                }
                                serverTelemetryManager.cacheFailedRequest(e);
                                throw e;
                            })];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */
    SilentRefreshClient.prototype.logout = function () {
        // Synchronous so we must reject
        return Promise.reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    /**
     * Creates a Refresh Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */
    SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var clientConfig;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];
                    case 1:
                        clientConfig = _a.sent();
                        return [2 /*return*/, new _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.RefreshTokenClient(clientConfig)];
                }
            });
        });
    };
    return SilentRefreshClient;
}(_StandardInteractionClient_js__WEBPACK_IMPORTED_MODULE_5__.StandardInteractionClient));


//# sourceMappingURL=SilentRefreshClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StandardInteractionClient": () => (/* binding */ StandardInteractionClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/Authority.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _BaseInteractionClient_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BaseInteractionClient.js */ "./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../packageMetadata.js */ "./node_modules/@azure/msal-browser/dist/packageMetadata.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserProtocolUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/BrowserProtocolUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */










/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Defines the class structure and helper functions used by the "standard", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))
 */
var StandardInteractionClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(StandardInteractionClient, _super);
    function StandardInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) {
        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, correlationId) || this;
        _this.navigationClient = navigationClient;
        return _this;
    }
    /**
     * Generates an auth code request tied to the url request.
     * @param request
     */
    StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var generatedPkceParams, authCodeRequest;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("initializeAuthorizationRequest called", request.correlationId);
                        return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];
                    case 1:
                        generatedPkceParams = _a.sent();
                        authCodeRequest = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, request), { redirectUri: request.redirectUri, code: "", codeVerifier: generatedPkceParams.verifier });
                        request.codeChallenge = generatedPkceParams.challenge;
                        request.codeChallengeMethod = _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.Constants.S256_CODE_CHALLENGE_METHOD;
                        return [2 /*return*/, authCodeRequest];
                }
            });
        });
    };
    /**
     * Initializer for the logout request.
     * @param logoutRequest
     */
    StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {
        this.logger.verbose("initializeLogoutRequest called", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
        var validLogoutRequest = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({ correlationId: this.browserCrypto.createNewGuid() }, logoutRequest);
        /**
         * Set logout_hint to be login_hint from ID Token Claims if present
         * and logoutHint attribute wasn't manually set in logout request
         */
        if (logoutRequest) {
            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims
            if (!logoutRequest.logoutHint) {
                if (logoutRequest.account) {
                    var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);
                    if (logoutHint) {
                        this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided");
                        validLogoutRequest.logoutHint = logoutHint;
                    }
                }
                else {
                    this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");
                }
            }
            else {
                this.logger.verbose("logoutHint has already been set in logoutRequest");
            }
        }
        else {
            this.logger.verbose("logoutHint will not be set since no logout request was configured");
        }
        /*
         * Only set redirect uri if logout request isn't provided or the set uri isn't null.
         * Otherwise, use passed uri, config, or current page.
         */
        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {
            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__.BrowserUtils.getCurrentUri());
            }
            else if (this.config.auth.postLogoutRedirectUri === null) {
                this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect", validLogoutRequest.correlationId);
            }
            else if (this.config.auth.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to configured uri", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__.BrowserUtils.getCurrentUri());
            }
            else {
                this.logger.verbose("Setting postLogoutRedirectUri to current page", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.UrlString.getAbsoluteUrl(_utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__.BrowserUtils.getCurrentUri(), _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_3__.BrowserUtils.getCurrentUri());
            }
        }
        else {
            this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri", validLogoutRequest.correlationId);
        }
        return validLogoutRequest;
    };
    /**
     * Parses login_hint ID Token Claim out of AccountInfo object to be used as
     * logout_hint in end session request.
     * @param account
     */
    StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {
        var idTokenClaims = account.idTokenClaims;
        if (idTokenClaims) {
            if (idTokenClaims.login_hint) {
                return idTokenClaims.login_hint;
            }
            else {
                this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request");
            }
        }
        else {
            this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");
        }
        return null;
    };
    /**
     * Creates an Authorization Code Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */
    StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var clientConfig;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];
                    case 1:
                        clientConfig = _a.sent();
                        return [2 /*return*/, new _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.AuthorizationCodeClient(clientConfig)];
                }
            });
        });
    };
    /**
     * Creates a Client Configuration object with the given request authority, or the default authority.
     * @param serverTelemetryManager
     * @param requestAuthority
     * @param requestCorrelationId
     */
    StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var discoveredAuthority;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("getClientConfiguration called");
                        return [4 /*yield*/, this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];
                    case 1:
                        discoveredAuthority = _a.sent();
                        return [2 /*return*/, {
                                authOptions: {
                                    clientId: this.config.auth.clientId,
                                    authority: discoveredAuthority,
                                    clientCapabilities: this.config.auth.clientCapabilities
                                },
                                systemOptions: {
                                    tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,
                                    preventCorsPreflight: true
                                },
                                loggerOptions: {
                                    loggerCallback: this.config.system.loggerOptions.loggerCallback,
                                    piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,
                                    logLevel: this.config.system.loggerOptions.logLevel,
                                    correlationId: this.correlationId
                                },
                                cryptoInterface: this.browserCrypto,
                                networkInterface: this.networkClient,
                                storageInterface: this.browserStorage,
                                serverTelemetryManager: serverTelemetryManager,
                                libraryInfo: {
                                    sku: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_5__.BrowserConstants.MSAL_SKU,
                                    version: _packageMetadata_js__WEBPACK_IMPORTED_MODULE_6__.version,
                                    cpu: "",
                                    os: ""
                                }
                            }];
                }
            });
        });
    };
    /**
     * @param hash
     * @param interactionType
     */
    StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (hash, interactionType, requestCorrelationId) {
        this.logger.verbose("validateAndExtractStateFromHash called", requestCorrelationId);
        // Deserialize hash fragment response parameters.
        var serverParams = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.UrlString.getDeserializedHash(hash);
        if (!serverParams.state) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_7__.BrowserAuthError.createHashDoesNotContainStateError();
        }
        var platformStateObj = _utils_BrowserProtocolUtils_js__WEBPACK_IMPORTED_MODULE_8__.BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);
        if (!platformStateObj) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_7__.BrowserAuthError.createUnableToParseStateError();
        }
        if (platformStateObj.interactionType !== interactionType) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_7__.BrowserAuthError.createStateInteractionTypeMismatchError();
        }
        this.logger.verbose("Returning state from hash", requestCorrelationId);
        return serverParams.state;
    };
    /**
     * Used to get a discovered version of the default authority.
     * @param requestAuthority
     * @param requestCorrelationId
     */
    StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var authorityOptions, userAuthority, builtAuthority;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("getDiscoveredAuthority called");
                        authorityOptions = {
                            protocolMode: this.config.auth.protocolMode,
                            knownAuthorities: this.config.auth.knownAuthorities,
                            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                            authorityMetadata: this.config.auth.authorityMetadata,
                        };
                        userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;
                        builtAuthority = _azure_msal_common__WEBPACK_IMPORTED_MODULE_9__.Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);
                        this.logger.verbose("Creating discovered authority with configured authority");
                        return [4 /*yield*/, _azure_msal_common__WEBPACK_IMPORTED_MODULE_10__.AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Helper to initialize required request parameters for interactive APIs and ssoSilent()
     * @param request
     * @param interactionType
     */
    StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.logger.verbose("initializeAuthorizationRequest called");
                        redirectUri = this.getRedirectUri(request.redirectUri);
                        browserState = {
                            interactionType: interactionType
                        };
                        state = _azure_msal_common__WEBPACK_IMPORTED_MODULE_11__.ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING, browserState);
                        _a = [{}];
                        return [4 /*yield*/, this.initializeBaseRequest(request)];
                    case 1:
                        validatedRequest = _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign.apply(void 0, [_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign.apply(void 0, _a.concat([_b.sent()])), { redirectUri: redirectUri, state: state, nonce: request.nonce || this.browserCrypto.createNewGuid(), responseMode: _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.ResponseMode.FRAGMENT }]);
                        account = request.account || this.browserStorage.getActiveAccount();
                        if (account) {
                            this.logger.verbose("Setting validated request account");
                            this.logger.verbosePii("Setting validated request account: " + account);
                            validatedRequest.account = account;
                        }
                        // Check for ADAL/MSAL v1 SSO
                        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_12__.StringUtils.isEmpty(validatedRequest.loginHint) && !account) {
                            legacyLoginHint = this.browserStorage.getLegacyLoginHint();
                            if (legacyLoginHint) {
                                validatedRequest.loginHint = legacyLoginHint;
                            }
                        }
                        return [2 /*return*/, validatedRequest];
                }
            });
        });
    };
    return StandardInteractionClient;
}(_BaseInteractionClient_js__WEBPACK_IMPORTED_MODULE_13__.BaseInteractionClient));


//# sourceMappingURL=StandardInteractionClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractionHandler": () => (/* binding */ InteractionHandler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */






/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Abstract class which defines operations for a browser interaction handling class.
 */
var InteractionHandler = /** @class */ (function () {
    function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {
        this.authModule = authCodeModule;
        this.browserStorage = storageImpl;
        this.authCodeRequest = authCodeRequest;
        this.browserRequestLogger = browserRequestLogger;
    }
    /**
     * Function to handle response parameters from hash.
     * @param locationHash
     */
    InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var stateKey, requestState, authCodeResponse;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                this.browserRequestLogger.verbose("InteractionHandler.handleCodeResponse called");
                // Check that location hash isn't empty.
                if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(locationHash)) {
                    throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createEmptyHashError(locationHash);
                }
                stateKey = this.browserStorage.generateStateKey(state);
                requestState = this.browserStorage.getTemporaryCache(stateKey);
                if (!requestState) {
                    throw _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createStateNotFoundError("Cached State");
                }
                authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];
            });
        });
    };
    /**
     * Process auth code response from AAD
     * @param authCodeResponse
     * @param state
     * @param authority
     * @param networkModule
     * @returns
     */
    InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {
        if (validateNonce === void 0) { validateNonce = true; }
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.browserRequestLogger.trace("InteractionHandler.handleCodeResponseFromServer called");
                        stateKey = this.browserStorage.generateStateKey(state);
                        requestState = this.browserStorage.getTemporaryCache(stateKey);
                        if (!requestState) {
                            throw _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createStateNotFoundError("Cached State");
                        }
                        nonceKey = this.browserStorage.generateNonceKey(requestState);
                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                        // Assign code to request
                        this.authCodeRequest.code = authCodeResponse.code;
                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)
                        if (validateNonce) {
                            authCodeResponse.nonce = cachedNonce || undefined;
                        }
                        authCodeResponse.state = requestState;
                        // Add CCS parameters if available
                        if (authCodeResponse.client_info) {
                            this.authCodeRequest.clientInfo = authCodeResponse.client_info;
                        }
                        else {
                            cachedCcsCred = this.checkCcsCredentials();
                            if (cachedCcsCred) {
                                this.authCodeRequest.ccsCredential = cachedCcsCred;
                            }
                        }
                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                    case 3:
                        tokenResponse = _a.sent();
                        this.browserStorage.cleanRequestByState(state);
                        return [2 /*return*/, tokenResponse];
                }
            });
        });
    };
    /**
     * Updates authority based on cloudInstanceHostname
     * @param cloudInstanceHostname
     * @param authority
     * @param networkModule
     */
    InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var cloudInstanceAuthorityUri, cloudInstanceAuthority;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cloudInstanceAuthorityUri = "https://" + cloudInstanceHostname + "/" + authority.tenant + "/";
                        return [4 /*yield*/, _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];
                    case 1:
                        cloudInstanceAuthority = _a.sent();
                        this.authModule.updateAuthority(cloudInstanceAuthority);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Looks up ccs creds in the cache
     */
    InteractionHandler.prototype.checkCcsCredentials = function () {
        // Look up ccs credential in temp cache
        var cachedCcsCred = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_5__.TemporaryCacheKeys.CCS_CREDENTIAL, true);
        if (cachedCcsCred) {
            try {
                return JSON.parse(cachedCcsCred);
            }
            catch (e) {
                this.authModule.logger.error("Cache credential could not be parsed");
                this.authModule.logger.errorPii("Cache credential could not be parsed: " + cachedCcsCred);
            }
        }
        return null;
    };
    return InteractionHandler;
}());


//# sourceMappingURL=InteractionHandler.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_handler/PopupHandler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/PopupHandler.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopupHandler": () => (/* binding */ PopupHandler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _InteractionHandler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./InteractionHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PopupUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/PopupUtils.js");
/* harmony import */ var _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/BrowserUtils.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */








/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements the interaction handler base class for browsers. It is written specifically for handling
 * popup window scenarios. It includes functions for monitoring the popup window for a hash.
 */
var PopupHandler = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(PopupHandler, _super);
    function PopupHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;
        // Properly sets this reference for the unload event.
        _this.popupUtils = new _utils_PopupUtils_js__WEBPACK_IMPORTED_MODULE_1__.PopupUtils(storageImpl, browserRequestLogger);
        return _this;
    }
    /**
     * Opens a popup window with given request Url.
     * @param requestUrl
     */
    PopupHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
        // Check that request url is not empty.
        if (!_azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmpty(requestUrl)) {
            this.browserRequestLogger.infoPii("Navigate to: " + requestUrl);
            // Open the popup window to requestUrl.
            return this.popupUtils.openPopup(requestUrl, params);
        }
        else {
            // Throw error if request URL is empty.
            this.browserRequestLogger.error("Navigate url is empty");
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createEmptyNavigationUriError();
        }
    };
    /**
     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.
     * @param popupWindow - window that is being monitored
     * @param timeout - milliseconds until timeout
     */
    PopupHandler.prototype.monitorPopupForHash = function (popupWindow) {
        var _this = this;
        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(function () {
            var contentHash = popupWindow.location.hash;
            _utils_BrowserUtils_js__WEBPACK_IMPORTED_MODULE_4__.BrowserUtils.clearHash(popupWindow);
            _this.popupUtils.cleanPopup(popupWindow);
            if (!contentHash) {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createEmptyHashError(popupWindow.location.href);
            }
            if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.UrlString.hashContainsKnownProperties(contentHash)) {
                return contentHash;
            }
            else {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createHashDoesNotContainKnownPropertiesError();
            }
        });
    };
    return PopupHandler;
}(_InteractionHandler_js__WEBPACK_IMPORTED_MODULE_6__.InteractionHandler));


//# sourceMappingURL=PopupHandler.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RedirectHandler": () => (/* binding */ RedirectHandler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _InteractionHandler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./InteractionHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RedirectHandler = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(RedirectHandler, _super);
    function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;
        _this.browserCrypto = browserCrypto;
        return _this;
    }
    /**
     * Redirects window to given URL.
     * @param urlNavigate
     */
    RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var navigationOptions, navigate;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest called");
                        if (!!_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];
                        // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
                        if (params.redirectStartPage) {
                            this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page");
                            this.browserStorage.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);
                        }
                        // Set interaction status in the library.
                        this.browserStorage.setTemporaryCache(_utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);
                        this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);
                        this.browserRequestLogger.infoPii("RedirectHandler.initiateAuthRequest: Navigate to: " + requestUrl);
                        navigationOptions = {
                            apiId: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenRedirect,
                            timeout: params.redirectTimeout,
                            noHistory: false
                        };
                        if (!(typeof params.onRedirectNavigate === "function")) return [3 /*break*/, 4];
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");
                        navigate = params.onRedirectNavigate(requestUrl);
                        if (!(navigate !== false)) return [3 /*break*/, 2];
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating");
                        return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation");
                        return [2 /*return*/];
                    case 3: return [3 /*break*/, 6];
                    case 4:
                        // Navigate window to request URL
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url");
                        return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        // Throw error if request URL is empty.
                        this.browserRequestLogger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty");
                        throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createEmptyNavigationUriError();
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Handle authorization code response in the window.
     * @param hash
     */
    RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule, clientId) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.browserRequestLogger.verbose("RedirectHandler.handleCodeResponse called");
                        // Check that location hash isn't empty.
                        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(locationHash)) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_3__.BrowserAuthError.createEmptyHashError(locationHash);
                        }
                        // Interaction is completed - remove interaction status.
                        this.browserStorage.setInteractionInProgress(false);
                        stateKey = this.browserStorage.generateStateKey(state);
                        requestState = this.browserStorage.getTemporaryCache(stateKey);
                        if (!requestState) {
                            throw _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createStateNotFoundError("Cached State");
                        }
                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                        nonceKey = this.browserStorage.generateNonceKey(requestState);
                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                        // Assign code to request
                        this.authCodeRequest.code = authCodeResponse.code;
                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authCodeResponse.nonce = cachedNonce || undefined;
                        authCodeResponse.state = requestState;
                        // Add CCS parameters if available
                        if (authCodeResponse.client_info) {
                            this.authCodeRequest.clientInfo = authCodeResponse.client_info;
                        }
                        else {
                            cachedCcsCred = this.checkCcsCredentials();
                            if (cachedCcsCred) {
                                this.authCodeRequest.ccsCredential = cachedCcsCred;
                            }
                        }
                        // Remove throttle if it exists
                        if (clientId) {
                            _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest);
                        }
                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                    case 3:
                        tokenResponse = _a.sent();
                        this.browserStorage.cleanRequestByState(state);
                        return [2 /*return*/, tokenResponse];
                }
            });
        });
    };
    return RedirectHandler;
}(_InteractionHandler_js__WEBPACK_IMPORTED_MODULE_6__.InteractionHandler));


//# sourceMappingURL=RedirectHandler.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SilentHandler": () => (/* binding */ SilentHandler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _InteractionHandler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./InteractionHandler.js */ "./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _config_Configuration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/Configuration.js */ "./node_modules/@azure/msal-browser/dist/config/Configuration.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */








/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentHandler = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(SilentHandler, _super);
    function SilentHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, navigateFrameWait) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;
        _this.navigateFrameWait = navigateFrameWait;
        return _this;
    }
    /**
     * Creates a hidden iframe to given URL using user-requested scopes as an id.
     * @param urlNavigate
     * @param userRequestScopes
     */
    SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(requestUrl)) {
                            // Throw error if request URL is empty.
                            this.browserRequestLogger.info("Navigate url is empty");
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createEmptyNavigationUriError();
                        }
                        if (!this.navigateFrameWait) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadFrame(requestUrl)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = this.loadFrameSync(requestUrl);
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    /**
     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
     * @param iframe
     * @param timeout
     */
    SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (timeout < _config_Configuration_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_IFRAME_TIMEOUT_MS) {
                _this.browserRequestLogger.warning("system.loadFrameTimeout or system.iframeHashTimeout set to lower (" + timeout + "ms) than the default (" + _config_Configuration_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_IFRAME_TIMEOUT_MS + "ms). This may result in timeouts.");
            }
            /*
             * Polling for iframes can be purely timing based,
             * since we don't need to account for interaction.
             */
            var nowMark = window.performance.now();
            var timeoutMark = nowMark + timeout;
            var intervalId = setInterval(function () {
                if (window.performance.now() > timeoutMark) {
                    _this.removeHiddenIframe(iframe);
                    clearInterval(intervalId);
                    reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createMonitorIframeTimeoutError());
                    return;
                }
                var href = _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;
                var contentWindow = iframe.contentWindow;
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */
                    href = contentWindow ? contentWindow.location.href : _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;
                }
                catch (e) { }
                if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(href)) {
                    return;
                }
                var contentHash = contentWindow ? contentWindow.location.hash : _azure_msal_common__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;
                if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_5__.UrlString.hashContainsKnownProperties(contentHash)) {
                    // Success case
                    _this.removeHiddenIframe(iframe);
                    clearInterval(intervalId);
                    resolve(contentHash);
                    return;
                }
            }, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_6__.BrowserConstants.POLL_INTERVAL_MS);
        });
    };
    /**
     * @hidden
     * Loads iframe with authorization endpoint URL
     * @ignore
     */
    SilentHandler.prototype.loadFrame = function (urlNavigate) {
        /*
         * This trick overcomes iframe navigation in IE
         * IE does not load the page consistently in iframe
         */
        var _this = this;
        return new Promise(function (resolve, reject) {
            var frameHandle = _this.createHiddenIframe();
            setTimeout(function () {
                if (!frameHandle) {
                    reject("Unable to load iframe");
                    return;
                }
                frameHandle.src = urlNavigate;
                resolve(frameHandle);
            }, _this.navigateFrameWait);
        });
    };
    /**
     * @hidden
     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
     * @param urlNavigate
     * @param frameName
     * @param logger
     */
    SilentHandler.prototype.loadFrameSync = function (urlNavigate) {
        var frameHandle = this.createHiddenIframe();
        frameHandle.src = urlNavigate;
        return frameHandle;
    };
    /**
     * @hidden
     * Creates a new hidden iframe or gets an existing one for silent token renewal.
     * @ignore
     */
    SilentHandler.prototype.createHiddenIframe = function () {
        var authFrame = document.createElement("iframe");
        authFrame.style.visibility = "hidden";
        authFrame.style.position = "absolute";
        authFrame.style.width = authFrame.style.height = "0";
        authFrame.style.border = "0";
        authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
        document.getElementsByTagName("body")[0].appendChild(authFrame);
        return authFrame;
    };
    /**
     * @hidden
     * Removes a hidden iframe from the page.
     * @ignore
     */
    SilentHandler.prototype.removeHiddenIframe = function (iframe) {
        if (document.body === iframe.parentNode) {
            document.body.removeChild(iframe);
        }
    };
    return SilentHandler;
}(_InteractionHandler_js__WEBPACK_IMPORTED_MODULE_7__.InteractionHandler));


//# sourceMappingURL=SilentHandler.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NavigationClient": () => (/* binding */ NavigationClient)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var NavigationClient = /** @class */ (function () {
    function NavigationClient() {
    }
    /**
     * Navigates to other pages within the same web application
     * @param url
     * @param options
     */
    NavigationClient.prototype.navigateInternal = function (url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    };
    /**
     * Navigates to other pages outside the web application i.e. the Identity Provider
     * @param url
     * @param options
     */
    NavigationClient.prototype.navigateExternal = function (url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    };
    /**
     * Default navigation implementation invoked by the internal and external functions
     * @param url
     * @param options
     */
    NavigationClient.defaultNavigateWindow = function (url, options) {
        if (options.noHistory) {
            window.location.replace(url);
        }
        else {
            window.location.assign(url);
        }
        return new Promise(function (resolve) {
            setTimeout(function () {
                resolve(true);
            }, options.timeout);
        });
    };
    return NavigationClient;
}());


//# sourceMappingURL=NavigationClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/network/FetchClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/network/FetchClient.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FetchClient": () => (/* binding */ FetchClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 */
var FetchClient = /** @class */ (function () {
    function FetchClient() {
    }
    /**
     * Fetch Client for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */
    FetchClient.prototype.sendGetRequestAsync = function (url, options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var response, e_1, _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fetch(url, {
                                method: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.GET,
                                headers: this.getFetchHeaders(options)
                            })];
                    case 1:
                        response = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        if (window.navigator.onLine) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createGetRequestFailedError(e_1, url);
                        }
                        else {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createNoNetworkConnectivityError();
                        }
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        _a = {
                            headers: this.getHeaderDict(response.headers)
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_a.body = (_b.sent()),
                            _a.status = response.status,
                            _a)];
                    case 5:
                        _b.sent();
                        throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createFailedToParseNetworkResponseError(url);
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch Client for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */
    FetchClient.prototype.sendPostRequestAsync = function (url, options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var reqBody, response, e_3, _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reqBody = (options && options.body) || "";
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetch(url, {
                                method: _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.POST,
                                headers: this.getFetchHeaders(options),
                                body: reqBody
                            })];
                    case 2:
                        response = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _b.sent();
                        if (window.navigator.onLine) {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createPostRequestFailedError(e_3, url);
                        }
                        else {
                            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createNoNetworkConnectivityError();
                        }
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        _a = {
                            headers: this.getHeaderDict(response.headers)
                        };
                        return [4 /*yield*/, response.json()];
                    case 5: return [2 /*return*/, (_a.body = (_b.sent()),
                            _a.status = response.status,
                            _a)];
                    case 6:
                        _b.sent();
                        throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createFailedToParseNetworkResponseError(url);
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Fetch API Headers object from string map
     * @param inputHeaders
     */
    FetchClient.prototype.getFetchHeaders = function (options) {
        var headers = new Headers();
        if (!(options && options.headers)) {
            return headers;
        }
        var optionsHeaders = options.headers;
        Object.keys(optionsHeaders).forEach(function (key) {
            headers.append(key, optionsHeaders[key]);
        });
        return headers;
    };
    FetchClient.prototype.getHeaderDict = function (headers) {
        var headerDict = {};
        headers.forEach(function (value, key) {
            headerDict[key] = value;
        });
        return headerDict;
    };
    return FetchClient;
}());


//# sourceMappingURL=FetchClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/network/XhrClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/network/XhrClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XhrClient": () => (/* binding */ XhrClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-browser/dist/_virtual/_tslib.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This client implements the XMLHttpRequest class to send GET and POST requests.
 */
var XhrClient = /** @class */ (function () {
    function XhrClient() {
    }
    /**
     * XhrClient for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */
    XhrClient.prototype.sendGetRequestAsync = function (url, options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, this.sendRequestAsync(url, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.GET, options)];
            });
        });
    };
    /**
     * XhrClient for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */
    XhrClient.prototype.sendPostRequestAsync = function (url, options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, this.sendRequestAsync(url, _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.POST, options)];
            });
        });
    };
    /**
     * Helper for XhrClient requests.
     * @param url
     * @param method
     * @param options
     */
    XhrClient.prototype.sendRequestAsync = function (url, method, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open(method, url, /* async: */ true);
            _this.setXhrHeaders(xhr, options);
            xhr.onload = function () {
                if (xhr.status < 200 || xhr.status >= 300) {
                    if (method === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.POST) {
                        reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                    }
                    else {
                        reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                    }
                }
                try {
                    var jsonResponse = JSON.parse(xhr.responseText);
                    var networkResponse = {
                        headers: _this.getHeaderDict(xhr),
                        body: jsonResponse,
                        status: xhr.status
                    };
                    resolve(networkResponse);
                }
                catch (e) {
                    reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createFailedToParseNetworkResponseError(url));
                }
            };
            xhr.onerror = function () {
                if (window.navigator.onLine) {
                    if (method === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.POST) {
                        reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                    }
                    else {
                        reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                    }
                }
                else {
                    reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createNoNetworkConnectivityError());
                }
            };
            if (method === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.POST && options && options.body) {
                xhr.send(options.body);
            }
            else if (method === _utils_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.HTTP_REQUEST_TYPE.GET) {
                xhr.send();
            }
            else {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError.createHttpMethodNotImplementedError(method);
            }
        });
    };
    /**
     * Helper to set XHR headers for request.
     * @param xhr
     * @param options
     */
    XhrClient.prototype.setXhrHeaders = function (xhr, options) {
        if (options && options.headers) {
            var headers_1 = options.headers;
            Object.keys(headers_1).forEach(function (key) {
                xhr.setRequestHeader(key, headers_1[key]);
            });
        }
    };
    /**
     * Gets a string map of the headers received in the response.
     *
     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
     * @param xhr
     */
    XhrClient.prototype.getHeaderDict = function (xhr) {
        var headerString = xhr.getAllResponseHeaders();
        var headerArr = headerString.trim().split(/[\r\n]+/);
        var headerDict = {};
        headerArr.forEach(function (value) {
            var parts = value.split(": ");
            var headerName = parts.shift();
            var headerVal = parts.join(": ");
            if (headerName && headerVal) {
                headerDict[headerName] = headerVal;
            }
        });
        return headerDict;
    };
    return XhrClient;
}());


//# sourceMappingURL=XhrClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/packageMetadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/packageMetadata.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => (/* binding */ name),
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/* eslint-disable header/header */
var name = "@azure/msal-browser";
var version = "2.22.1";


//# sourceMappingURL=packageMetadata.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiId": () => (/* binding */ ApiId),
/* harmony export */   "BrowserCacheLocation": () => (/* binding */ BrowserCacheLocation),
/* harmony export */   "BrowserConstants": () => (/* binding */ BrowserConstants),
/* harmony export */   "DB_NAME": () => (/* binding */ DB_NAME),
/* harmony export */   "DB_TABLE_NAME": () => (/* binding */ DB_TABLE_NAME),
/* harmony export */   "DB_VERSION": () => (/* binding */ DB_VERSION),
/* harmony export */   "DEFAULT_REQUEST": () => (/* binding */ DEFAULT_REQUEST),
/* harmony export */   "HTTP_REQUEST_TYPE": () => (/* binding */ HTTP_REQUEST_TYPE),
/* harmony export */   "InMemoryCacheKeys": () => (/* binding */ InMemoryCacheKeys),
/* harmony export */   "InteractionStatus": () => (/* binding */ InteractionStatus),
/* harmony export */   "InteractionType": () => (/* binding */ InteractionType),
/* harmony export */   "KEY_FORMAT_JWK": () => (/* binding */ KEY_FORMAT_JWK),
/* harmony export */   "TemporaryCacheKeys": () => (/* binding */ TemporaryCacheKeys),
/* harmony export */   "WrapperSKU": () => (/* binding */ WrapperSKU)
/* harmony export */ });
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Constants
 */
var BrowserConstants = {
    /**
     * Interaction in progress cache value
     */
    INTERACTION_IN_PROGRESS_VALUE: "interaction_in_progress",
    /**
     * Invalid grant error code
     */
    INVALID_GRANT_ERROR: "invalid_grant",
    /**
     * Default popup window width
     */
    POPUP_WIDTH: 483,
    /**
     * Default popup window height
     */
    POPUP_HEIGHT: 600,
    /**
     * Name of the popup window starts with
     */
    POPUP_NAME_PREFIX: "msal",
    /**
     * Default popup monitor poll interval in milliseconds
     */
    POLL_INTERVAL_MS: 50,
    /**
     * Msal-browser SKU
     */
    MSAL_SKU: "msal.js.browser",
};
var BrowserCacheLocation;
(function (BrowserCacheLocation) {
    BrowserCacheLocation["LocalStorage"] = "localStorage";
    BrowserCacheLocation["SessionStorage"] = "sessionStorage";
    BrowserCacheLocation["MemoryStorage"] = "memoryStorage";
})(BrowserCacheLocation || (BrowserCacheLocation = {}));
/**
 * HTTP Request types supported by MSAL.
 */
var HTTP_REQUEST_TYPE;
(function (HTTP_REQUEST_TYPE) {
    HTTP_REQUEST_TYPE["GET"] = "GET";
    HTTP_REQUEST_TYPE["POST"] = "POST";
})(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));
/**
 * Temporary cache keys for MSAL, deleted after any request.
 */
var TemporaryCacheKeys;
(function (TemporaryCacheKeys) {
    TemporaryCacheKeys["AUTHORITY"] = "authority";
    TemporaryCacheKeys["ACQUIRE_TOKEN_ACCOUNT"] = "acquireToken.account";
    TemporaryCacheKeys["SESSION_STATE"] = "session.state";
    TemporaryCacheKeys["REQUEST_STATE"] = "request.state";
    TemporaryCacheKeys["NONCE_IDTOKEN"] = "nonce.id_token";
    TemporaryCacheKeys["ORIGIN_URI"] = "request.origin";
    TemporaryCacheKeys["RENEW_STATUS"] = "token.renew.status";
    TemporaryCacheKeys["URL_HASH"] = "urlHash";
    TemporaryCacheKeys["REQUEST_PARAMS"] = "request.params";
    TemporaryCacheKeys["SCOPES"] = "scopes";
    TemporaryCacheKeys["INTERACTION_STATUS_KEY"] = "interaction.status";
    TemporaryCacheKeys["CCS_CREDENTIAL"] = "ccs.credential";
    TemporaryCacheKeys["CORRELATION_ID"] = "request.correlationId";
})(TemporaryCacheKeys || (TemporaryCacheKeys = {}));
/**
 * Cache keys stored in-memory
 */
var InMemoryCacheKeys;
(function (InMemoryCacheKeys) {
    InMemoryCacheKeys["WRAPPER_SKU"] = "wrapper.sku";
    InMemoryCacheKeys["WRAPPER_VER"] = "wrapper.version";
})(InMemoryCacheKeys || (InMemoryCacheKeys = {}));
/**
 * API Codes for Telemetry purposes.
 * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
 * 0-99 Silent Flow
 * 800-899 Auth Code Flow
 */
var ApiId;
(function (ApiId) {
    ApiId[ApiId["acquireTokenRedirect"] = 861] = "acquireTokenRedirect";
    ApiId[ApiId["acquireTokenPopup"] = 862] = "acquireTokenPopup";
    ApiId[ApiId["ssoSilent"] = 863] = "ssoSilent";
    ApiId[ApiId["acquireTokenSilent_authCode"] = 864] = "acquireTokenSilent_authCode";
    ApiId[ApiId["handleRedirectPromise"] = 865] = "handleRedirectPromise";
    ApiId[ApiId["acquireTokenByCode"] = 866] = "acquireTokenByCode";
    ApiId[ApiId["acquireTokenSilent_silentFlow"] = 61] = "acquireTokenSilent_silentFlow";
    ApiId[ApiId["logout"] = 961] = "logout";
    ApiId[ApiId["logoutPopup"] = 962] = "logoutPopup";
})(ApiId || (ApiId = {}));
/*
 * Interaction type of the API - used for state and telemetry
 */
var InteractionType;
(function (InteractionType) {
    InteractionType["Redirect"] = "redirect";
    InteractionType["Popup"] = "popup";
    InteractionType["Silent"] = "silent";
    InteractionType["None"] = "none";
})(InteractionType || (InteractionType = {}));
/**
 * Types of interaction currently in progress.
 * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.
 */
var InteractionStatus;
(function (InteractionStatus) {
    /**
     * Initial status before interaction occurs
     */
    InteractionStatus["Startup"] = "startup";
    /**
     * Status set when all login calls occuring
     */
    InteractionStatus["Login"] = "login";
    /**
     * Status set when logout call occuring
     */
    InteractionStatus["Logout"] = "logout";
    /**
     * Status set for acquireToken calls
     */
    InteractionStatus["AcquireToken"] = "acquireToken";
    /**
     * Status set for ssoSilent calls
     */
    InteractionStatus["SsoSilent"] = "ssoSilent";
    /**
     * Status set when handleRedirect in progress
     */
    InteractionStatus["HandleRedirect"] = "handleRedirect";
    /**
     * Status set when interaction is complete
     */
    InteractionStatus["None"] = "none";
})(InteractionStatus || (InteractionStatus = {}));
var DEFAULT_REQUEST = {
    scopes: _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.OIDC_DEFAULT_SCOPES
};
/**
 * JWK Key Format string (Type MUST be defined for window crypto APIs)
 */
var KEY_FORMAT_JWK = "jwk";
// Supported wrapper SKUs
var WrapperSKU;
(function (WrapperSKU) {
    WrapperSKU["React"] = "@azure/msal-react";
    WrapperSKU["Angular"] = "@azure/msal-angular";
})(WrapperSKU || (WrapperSKU = {}));
// DatabaseStorage Constants
var DB_NAME = "msal.db";
var DB_VERSION = 1;
var DB_TABLE_NAME = DB_NAME + ".keys";


//# sourceMappingURL=BrowserConstants.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserProtocolUtils": () => (/* binding */ BrowserProtocolUtils)
/* harmony export */ });
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var BrowserProtocolUtils = /** @class */ (function () {
    function BrowserProtocolUtils() {
    }
    /**
     * Extracts the BrowserStateObject from the state string.
     * @param browserCrypto
     * @param state
     */
    BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {
        if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(state)) {
            return null;
        }
        try {
            var requestStateObj = _azure_msal_common__WEBPACK_IMPORTED_MODULE_1__.ProtocolUtils.parseRequestState(browserCrypto, state);
            return requestStateObj.libraryState.meta;
        }
        catch (e) {
            throw _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.ClientAuthError.createInvalidStateError(state, e);
        }
    };
    /**
     * Parses properties of server response from url hash
     * @param locationHash Hash from url
     */
    BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {
        if (!locationHash) {
            return {};
        }
        var hashUrlString = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.UrlString(locationHash);
        return _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.UrlString.getDeserializedHash(hashUrlString.getHash());
    };
    return BrowserProtocolUtils;
}());


//# sourceMappingURL=BrowserProtocolUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/utils/BrowserStringUtils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserStringUtils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserStringUtils": () => (/* binding */ BrowserStringUtils)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility functions for strings in a browser. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */
var BrowserStringUtils = /** @class */ (function () {
    function BrowserStringUtils() {
    }
    /**
     * Converts string to Uint8Array
     * @param sDOMStr
     */
    BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {
        var nChr;
        var nArrLen = 0;
        var nStrLen = sDOMStr.length;
        /* mapping... */
        for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {
            nChr = sDOMStr.charCodeAt(nMapIdx);
            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;
        }
        var aBytes = new Uint8Array(nArrLen);
        /* transcription... */
        for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {
            nChr = sDOMStr.charCodeAt(nChrIdx);
            if (nChr < 128) {
                /* one byte */
                aBytes[nIdx++] = nChr;
            }
            else if (nChr < 0x800) {
                /* two bytes */
                aBytes[nIdx++] = 192 + (nChr >>> 6);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else if (nChr < 0x10000) {
                /* three bytes */
                aBytes[nIdx++] = 224 + (nChr >>> 12);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else if (nChr < 0x200000) {
                /* four bytes */
                aBytes[nIdx++] = 240 + (nChr >>> 18);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else if (nChr < 0x4000000) {
                /* five bytes */
                aBytes[nIdx++] = 248 + (nChr >>> 24);
                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else /* if (nChr <= 0x7fffffff) */ {
                /* six bytes */
                aBytes[nIdx++] = 252 + (nChr >>> 30);
                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
        }
        return aBytes;
    };
    /**
     * Converst string to ArrayBuffer
     * @param dataString
     */
    BrowserStringUtils.stringToArrayBuffer = function (dataString) {
        var data = new ArrayBuffer(dataString.length);
        var dataView = new Uint8Array(data);
        for (var i = 0; i < dataString.length; i++) {
            dataView[i] = dataString.charCodeAt(i);
        }
        return data;
    };
    /**
     * Converts Uint8Array to a string
     * @param aBytes
     */
    BrowserStringUtils.utf8ArrToString = function (aBytes) {
        var sView = "";
        for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {
            nPart = aBytes[nIdx];
            sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */
                /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */
                (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */
                    (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                    : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */
                        (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                        : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */
                            (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                            : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */
                                (nPart - 192 << 6) + aBytes[++nIdx] - 128
                                : /* nPart < 127 ? */ /* one byte */
                                    nPart);
        }
        return sView;
    };
    return BrowserStringUtils;
}());


//# sourceMappingURL=BrowserStringUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserUtils": () => (/* binding */ BrowserUtils)
/* harmony export */ });
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _network_FetchClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../network/FetchClient.js */ "./node_modules/@azure/msal-browser/dist/network/FetchClient.js");
/* harmony import */ var _network_XhrClient_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../network/XhrClient.js */ "./node_modules/@azure/msal-browser/dist/network/XhrClient.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class for browser specific functions
 */
var BrowserUtils = /** @class */ (function () {
    function BrowserUtils() {
    }
    // #region Window Navigation and URL management
    /**
     * Clears hash from window url.
     */
    BrowserUtils.clearHash = function (contentWindow) {
        // Office.js sets history.replaceState to null
        contentWindow.location.hash = _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
        if (typeof contentWindow.history.replaceState === "function") {
            // Full removes "#" from url
            contentWindow.history.replaceState(null, _azure_msal_common__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING, "" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);
        }
    };
    /**
     * Replaces current hash with hash from provided url
     */
    BrowserUtils.replaceHash = function (url) {
        var urlParts = url.split("#");
        urlParts.shift(); // Remove part before the hash
        window.location.hash = urlParts.length > 0 ? urlParts.join("#") : "";
    };
    /**
     * Returns boolean of whether the current window is in an iframe or not.
     */
    BrowserUtils.isInIframe = function () {
        return window.parent !== window;
    };
    /**
     * Returns boolean of whether or not the current window is a popup opened by msal
     */
    BrowserUtils.isInPopup = function () {
        return typeof window !== "undefined" && !!window.opener &&
            window.opener !== window &&
            typeof window.name === "string" &&
            window.name.indexOf(_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_NAME_PREFIX + ".") === 0;
    };
    // #endregion
    /**
     * Returns current window URL as redirect uri
     */
    BrowserUtils.getCurrentUri = function () {
        return window.location.href.split("?")[0].split("#")[0];
    };
    /**
     * Gets the homepage url for the current window location.
     */
    BrowserUtils.getHomepage = function () {
        var currentUrl = new _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.UrlString(window.location.href);
        var urlComponents = currentUrl.getUrlComponents();
        return urlComponents.Protocol + "//" + urlComponents.HostNameAndPort + "/";
    };
    /**
     * Returns best compatible network client object.
     */
    BrowserUtils.getBrowserNetworkClient = function () {
        if (window.fetch && window.Headers) {
            return new _network_FetchClient_js__WEBPACK_IMPORTED_MODULE_3__.FetchClient();
        }
        else {
            return new _network_XhrClient_js__WEBPACK_IMPORTED_MODULE_4__.XhrClient();
        }
    };
    /**
     * Throws error if we have completed an auth and are
     * attempting another auth request inside an iframe.
     */
    BrowserUtils.blockReloadInHiddenIframes = function () {
        var isResponseHash = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.UrlString.hashContainsKnownProperties(window.location.hash);
        // return an error if called from the hidden iframe created by the msal js silent calls
        if (isResponseHash && BrowserUtils.isInIframe()) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_5__.BrowserAuthError.createBlockReloadInHiddenIframeError();
        }
    };
    /**
     * Block redirect operations in iframes unless explicitly allowed
     * @param interactionType Interaction type for the request
     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
     */
    BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {
        var isIframedApp = BrowserUtils.isInIframe();
        if (interactionType === _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {
            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_5__.BrowserAuthError.createRedirectInIframeError(isIframedApp);
        }
    };
    /**
     * Block redirectUri loaded in popup from calling AcquireToken APIs
     */
    BrowserUtils.blockAcquireTokenInPopups = function () {
        // Popups opened by msal popup APIs are given a name that starts with "msal."
        if (BrowserUtils.isInPopup()) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_5__.BrowserAuthError.createBlockAcquireTokenInPopupsError();
        }
    };
    /**
     * Throws error if token requests are made in non-browser environment
     * @param isBrowserEnvironment Flag indicating if environment is a browser.
     */
    BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {
        if (!isBrowserEnvironment) {
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_5__.BrowserAuthError.createNonBrowserEnvironmentError();
        }
    };
    /**
     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.
     */
    BrowserUtils.detectIEOrEdge = function () {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        var msie11 = ua.indexOf("Trident/");
        var msedge = ua.indexOf("Edge/");
        var isIE = msie > 0 || msie11 > 0;
        var isEdge = msedge > 0;
        return isIE || isEdge;
    };
    return BrowserUtils;
}());


//# sourceMappingURL=BrowserUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/utils/MathUtils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/MathUtils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MathUtils": () => (/* binding */ MathUtils)
/* harmony export */ });
/*! @azure/msal-browser v2.22.1 2022-03-07 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class for math specific functions in browser.
 */
var MathUtils = /** @class */ (function () {
    function MathUtils() {
    }
    /**
     * Decimal to Hex
     *
     * @param num
     */
    MathUtils.decimalToHex = function (num) {
        var hex = num.toString(16);
        while (hex.length < 2) {
            hex = "0" + hex;
        }
        return hex;
    };
    return MathUtils;
}());


//# sourceMappingURL=MathUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-browser/dist/utils/PopupUtils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/PopupUtils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopupUtils": () => (/* binding */ PopupUtils)
/* harmony export */ });
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _azure_msal_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.js */ "./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.js");
/* harmony import */ var _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserConstants.js */ "./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var PopupUtils = /** @class */ (function () {
    function PopupUtils(storageImpl, logger) {
        this.browserStorage = storageImpl;
        this.logger = logger;
        // Properly sets this reference for the unload event.
        this.unloadWindow = this.unloadWindow.bind(this);
    }
    /**
     * @hidden
     *
     * Configures popup window for login.
     *
     * @param urlNavigate
     * @param title
     * @param popUpWidth
     * @param popUpHeight
     * @param popupWindowAttributes
     * @ignore
     * @hidden
     */
    PopupUtils.prototype.openPopup = function (urlNavigate, popupParams) {
        try {
            var popupWindow = void 0;
            // Popup window passed in, setting url to navigate to
            if (popupParams.popup) {
                popupWindow = popupParams.popup;
                this.logger.verbosePii("Navigating popup window to: " + urlNavigate);
                popupWindow.location.assign(urlNavigate);
            }
            else if (typeof popupParams.popup === "undefined") {
                // Popup will be undefined if it was not passed in
                this.logger.verbosePii("Opening popup window to: " + urlNavigate);
                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);
            }
            // Popup will be null if popups are blocked
            if (!popupWindow) {
                throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createEmptyWindowCreatedError();
            }
            if (popupWindow.focus) {
                popupWindow.focus();
            }
            this.currentWindow = popupWindow;
            window.addEventListener("beforeunload", this.unloadWindow);
            return popupWindow;
        }
        catch (e) {
            this.logger.error("error opening popup " + e.message);
            this.browserStorage.setInteractionInProgress(false);
            throw _error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createPopupWindowError(e.toString());
        }
    };
    /**
     * Helper function to set popup window dimensions and position
     * @param urlNavigate
     * @param popupName
     * @param popupWindowAttributes
     * @returns
     */
    PopupUtils.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes, logger) {
        var _a, _b, _c, _d;
        /**
         * adding winLeft and winTop to account for dual monitor
         * using screenLeft and screenTop for IE8 and earlier
         */
        var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
        var winTop = window.screenTop ? window.screenTop : window.screenY;
        /**
         * window.innerWidth displays browser window"s height and width excluding toolbars
         * using document.documentElement.clientWidth for IE8 and earlier
         */
        var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;
        var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;
        var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;
        var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;
        if (!width || width < 0 || width > winWidth) {
            logger.verbose("Default popup window width used. Window width not configured or invalid.");
            width = _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_WIDTH;
        }
        if (!height || height < 0 || height > winHeight) {
            logger.verbose("Default popup window height used. Window height not configured or invalid.");
            height = _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_HEIGHT;
        }
        if (!top || top < 0 || top > winHeight) {
            logger.verbose("Default popup window top position used. Window top not configured or invalid.");
            top = Math.max(0, ((winHeight / 2) - (_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_HEIGHT / 2)) + winTop);
        }
        if (!left || left < 0 || left > winWidth) {
            logger.verbose("Default popup window left position used. Window left not configured or invalid.");
            left = Math.max(0, ((winWidth / 2) - (_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_WIDTH / 2)) + winLeft);
        }
        return window.open(urlNavigate, popupName, "width=" + width + ", height=" + height + ", top=" + top + ", left=" + left + ", scrollbars=yes");
    };
    /**
     * Event callback to unload main window.
     */
    PopupUtils.prototype.unloadWindow = function (e) {
        this.browserStorage.cleanRequestByInteractionType(_BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Popup);
        if (this.currentWindow) {
            this.currentWindow.close();
        }
        // Guarantees browser unload will happen, so no other errors will be thrown.
        e.preventDefault();
    };
    /**
     * Closes popup, removes any state vars created during popup calls.
     * @param popupWindow
     */
    PopupUtils.prototype.cleanPopup = function (popupWindow) {
        if (popupWindow) {
            // Close window.
            popupWindow.close();
        }
        // Remove window unload function
        window.removeEventListener("beforeunload", this.unloadWindow);
        // Interaction is completed - remove interaction status.
        this.browserStorage.setInteractionInProgress(false);
    };
    /**
     * Monitors a window until it loads a url with the same origin.
     * @param popupWindow - window that is being monitored
     */
    PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var intervalId = setInterval(function () {
                if (popupWindow.closed) {
                    // Window is closed
                    _this.cleanPopup();
                    clearInterval(intervalId);
                    reject(_error_BrowserAuthError_js__WEBPACK_IMPORTED_MODULE_0__.BrowserAuthError.createUserCancelledError());
                    return;
                }
                var href = _azure_msal_common__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */
                    href = popupWindow.location.href;
                }
                catch (e) { }
                // Don't process blank pages or cross domain
                if (_azure_msal_common__WEBPACK_IMPORTED_MODULE_3__.StringUtils.isEmpty(href) || href === "about:blank") {
                    return;
                }
                clearInterval(intervalId);
                resolve();
            }, _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POLL_INTERVAL_MS);
        });
    };
    /**
     * Generates the name for the popup based on the client id and request
     * @param clientId
     * @param request
     */
    PopupUtils.generatePopupName = function (clientId, scopes, authority, correlationId) {
        return _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_NAME_PREFIX + "." + clientId + "." + scopes.join("-") + "." + authority + "." + correlationId;
    };
    /**
     * Generates the name for the popup based on the client id and request for logouts
     * @param clientId
     * @param request
     */
    PopupUtils.generateLogoutPopupName = function (clientId, request) {
        var homeAccountId = request.account && request.account.homeAccountId;
        return _BrowserConstants_js__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.POPUP_NAME_PREFIX + "." + clientId + "." + homeAccountId + "." + request.correlationId;
    };
    return PopupUtils;
}());


//# sourceMappingURL=PopupUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/_virtual/_tslib.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}


//# sourceMappingURL=_tslib.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/account/AuthToken.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AuthToken.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthToken": () => (/* binding */ AuthToken)
/* harmony export */ });
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * JWT Token representation class. Parses token string and generates claims object.
 */
var AuthToken = /** @class */ (function () {
    function AuthToken(rawToken, crypto) {
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(rawToken)) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createTokenNullOrEmptyError(rawToken);
        }
        this.rawToken = rawToken;
        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);
    }
    /**
     * Extract token by decoding the rawToken
     *
     * @param encodedToken
     */
    AuthToken.extractTokenClaims = function (encodedToken, crypto) {
        var decodedToken = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.decodeAuthToken(encodedToken);
        // token will be decoded to get the username
        try {
            var base64TokenPayload = decodedToken.JWSPayload;
            // base64Decode() should throw an error if there is an issue
            var base64Decoded = crypto.base64Decode(base64TokenPayload);
            return JSON.parse(base64Decoded);
        }
        catch (err) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createTokenParsingError(err);
        }
    };
    return AuthToken;
}());


//# sourceMappingURL=AuthToken.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/account/CcsCredential.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/CcsCredential.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CcsCredentialType": () => (/* binding */ CcsCredentialType)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var CcsCredentialType;
(function (CcsCredentialType) {
    CcsCredentialType["HOME_ACCOUNT_ID"] = "home_account_id";
    CcsCredentialType["UPN"] = "UPN";
})(CcsCredentialType || (CcsCredentialType = {}));


//# sourceMappingURL=CcsCredential.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/account/ClientInfo.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/ClientInfo.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buildClientInfo": () => (/* binding */ buildClientInfo),
/* harmony export */   "buildClientInfoFromHomeAccountId": () => (/* binding */ buildClientInfoFromHomeAccountId)
/* harmony export */ });
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Function to build a client info object from server clientInfo string
 * @param rawClientInfo
 * @param crypto
 */
function buildClientInfo(rawClientInfo, crypto) {
    if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(rawClientInfo)) {
        throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createClientInfoEmptyError();
    }
    try {
        var decodedClientInfo = crypto.base64Decode(rawClientInfo);
        return JSON.parse(decodedClientInfo);
    }
    catch (e) {
        throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createClientInfoDecodingError(e);
    }
}
/**
 * Function to build a client info object from cached homeAccountId string
 * @param homeAccountId
 */
function buildClientInfoFromHomeAccountId(homeAccountId) {
    if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(homeAccountId)) {
        throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createClientInfoDecodingError("Home account ID was empty.");
    }
    var clientInfoParts = homeAccountId.split(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Separators.CLIENT_INFO_SEPARATOR, 2);
    return {
        uid: clientInfoParts[0],
        utid: clientInfoParts.length < 2 ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING : clientInfoParts[1]
    };
}


//# sourceMappingURL=ClientInfo.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/Authority.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/Authority.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Authority": () => (/* binding */ Authority)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuthorityType.js */ "./node_modules/@azure/msal-common/dist/authority/AuthorityType.js");
/* harmony import */ var _OpenIdConfigResponse_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./OpenIdConfigResponse.js */ "./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.js");
/* harmony import */ var _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.js */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _ProtocolMode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ProtocolMode.js */ "./node_modules/@azure/msal-common/dist/authority/ProtocolMode.js");
/* harmony import */ var _cache_entities_AuthorityMetadataEntity_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/entities/AuthorityMetadataEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/AuthorityMetadataEntity.js");
/* harmony import */ var _AuthorityOptions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./AuthorityOptions.js */ "./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.js");
/* harmony import */ var _CloudInstanceDiscoveryResponse_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CloudInstanceDiscoveryResponse.js */ "./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.js");
/* harmony import */ var _RegionDiscovery_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RegionDiscovery.js */ "./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */














/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
 * endpoint. It will store the pertinent config data in this object for use during token calls.
 */
var Authority = /** @class */ (function () {
    function Authority(authority, networkInterface, cacheManager, authorityOptions, proxyUrl) {
        this.canonicalAuthority = authority;
        this._canonicalAuthority.validateAsUri();
        this.networkInterface = networkInterface;
        this.cacheManager = cacheManager;
        this.authorityOptions = authorityOptions;
        this.regionDiscovery = new _RegionDiscovery_js__WEBPACK_IMPORTED_MODULE_0__.RegionDiscovery(networkInterface);
        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };
        this.proxyUrl = proxyUrl || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;
    }
    Object.defineProperty(Authority.prototype, "authorityType", {
        // See above for AuthorityType
        get: function () {
            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;
            if (pathSegments.length && pathSegments[0].toLowerCase() === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.ADFS) {
                return _AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs;
            }
            return _AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "protocolMode", {
        /**
         * ProtocolMode enum representing the way endpoints are constructed.
         */
        get: function () {
            return this.authorityOptions.protocolMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "options", {
        /**
         * Returns authorityOptions which can be used to reinstantiate a new authority instance
         */
        get: function () {
            return this.authorityOptions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "canonicalAuthority", {
        /**
         * A URL that is the authority set by the developer
         */
        get: function () {
            return this._canonicalAuthority.urlString;
        },
        /**
         * Sets canonical authority.
         */
        set: function (url) {
            this._canonicalAuthority = new _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString(url);
            this._canonicalAuthority.validateAsUri();
            this._canonicalAuthorityUrlComponents = null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "canonicalAuthorityUrlComponents", {
        /**
         * Get authority components.
         */
        get: function () {
            if (!this._canonicalAuthorityUrlComponents) {
                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
            }
            return this._canonicalAuthorityUrlComponents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "hostnameAndPort", {
        /**
         * Get hostname and port i.e. login.microsoftonline.com
         */
        get: function () {
            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "tenant", {
        /**
         * Get tenant for authority.
         */
        get: function () {
            return this.canonicalAuthorityUrlComponents.PathSegments[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "authorizationEndpoint", {
        /**
         * OAuth /authorize endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.authorization_endpoint);
                return this.replaceTenant(endpoint);
            }
            else {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "tokenEndpoint", {
        /**
         * OAuth /token endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.token_endpoint);
                return this.replaceTenant(endpoint);
            }
            else {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "deviceCodeEndpoint", {
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.token_endpoint.replace("/token", "/devicecode"));
                return this.replaceTenant(endpoint);
            }
            else {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "endSessionEndpoint", {
        /**
         * OAuth logout endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                // ROPC policies may not have end_session_endpoint set
                if (!this.metadata.end_session_endpoint) {
                    throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createLogoutNotSupportedError();
                }
                var endpoint = this.replacePath(this.metadata.end_session_endpoint);
                return this.replaceTenant(endpoint);
            }
            else {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "selfSignedJwtAudience", {
        /**
         * OAuth issuer for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.issuer);
                return this.replaceTenant(endpoint);
            }
            else {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Replaces tenant in url path with current tenant. Defaults to common.
     * @param urlString
     */
    Authority.prototype.replaceTenant = function (urlString) {
        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
    };
    /**
     * Replaces path such as tenant or policy with the current tenant or policy.
     * @param urlString
     */
    Authority.prototype.replacePath = function (urlString) {
        var endpoint = urlString;
        var cachedAuthorityUrl = new _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.canonical_authority);
        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;
        currentAuthorityParts.forEach(function (currentPart, index) {
            var cachedPart = cachedAuthorityParts[index];
            if (currentPart !== cachedPart) {
                endpoint = endpoint.replace("/" + cachedPart + "/", "/" + currentPart + "/");
            }
        });
        return endpoint;
    };
    Object.defineProperty(Authority.prototype, "defaultOpenIdConfigurationEndpoint", {
        /**
         * The default open id configuration endpoint for any canonical authority.
         */
        get: function () {
            if (this.authorityType === _AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs || this.protocolMode === _ProtocolMode_js__WEBPACK_IMPORTED_MODULE_5__.ProtocolMode.OIDC) {
                return this.canonicalAuthority + ".well-known/openid-configuration";
            }
            return this.canonicalAuthority + "v2.0/.well-known/openid-configuration";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Boolean that returns whethr or not tenant discovery has been completed.
     */
    Authority.prototype.discoveryComplete = function () {
        return !!this.metadata;
    };
    /**
     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network
     * and the /authorize, /token and logout endpoints.
     */
    Authority.prototype.resolveEndpointsAsync = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);
                        if (!metadataEntity) {
                            metadataEntity = new _cache_entities_AuthorityMetadataEntity_js__WEBPACK_IMPORTED_MODULE_7__.AuthorityMetadataEntity();
                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                        }
                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];
                    case 1:
                        cloudDiscoverySource = _a.sent();
                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);
                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];
                    case 2:
                        endpointSource = _a.sent();
                        if (cloudDiscoverySource !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE && endpointSource !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE) {
                            // Reset the expiration time unless both values came from a successful cache lookup
                            metadataEntity.resetExpiresAt();
                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                        }
                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);
                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);
                        this.metadata = metadataEntity;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update AuthorityMetadataEntity with new endpoints and return where the information came from
     * @param metadataEntity
     */
    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {
        var _a;
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var metadata, autodetectedRegionName, azureRegion;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        metadata = this.getEndpointMetadataFromConfig();
                        if (metadata) {
                            metadataEntity.updateEndpointMetadata(metadata, false);
                            return [2 /*return*/, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG];
                        }
                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {
                            // No need to update
                            return [2 /*return*/, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE];
                        }
                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];
                    case 1:
                        metadata = _b.sent();
                        if (!metadata) return [3 /*break*/, 4];
                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl)];
                    case 2:
                        autodetectedRegionName = _b.sent();
                        azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG
                            ? autodetectedRegionName
                            : this.authorityOptions.azureRegionConfiguration.azureRegion;
                        if (this.authorityOptions.azureRegionConfiguration.azureRegion === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {
                            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?
                                _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :
                                _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;
                        }
                        else {
                            if (autodetectedRegionName) {
                                this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?
                                    _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :
                                    _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;
                            }
                            else {
                                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;
                            }
                        }
                        if (azureRegion) {
                            this.regionDiscoveryMetadata.region_used = azureRegion;
                            metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);
                        }
                        _b.label = 3;
                    case 3:
                        metadataEntity.updateEndpointMetadata(metadata, true);
                        return [2 /*return*/, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK];
                    case 4: throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);
                }
            });
        });
    };
    /**
     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority
     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy
     * @param metadataEntity
     */
    Authority.prototype.isAuthoritySameType = function (metadataEntity) {
        var cachedAuthorityUrl = new _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString(metadataEntity.canonical_authority);
        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;
    };
    /**
     * Parse authorityMetadata config option
     */
    Authority.prototype.getEndpointMetadataFromConfig = function () {
        if (this.authorityOptions.authorityMetadata) {
            try {
                return JSON.parse(this.authorityOptions.authorityMetadata);
            }
            catch (e) {
                throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_8__.ClientConfigurationError.createInvalidAuthorityMetadataError();
            }
        }
        return null;
    };
    /**
     * Gets OAuth endpoints from the given OpenID configuration endpoint.
     */
    Authority.prototype.getEndpointMetadataFromNetwork = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var options, response;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {};
                        if (this.proxyUrl) {
                            options.proxyUrl = this.proxyUrl;
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, (0,_OpenIdConfigResponse_js__WEBPACK_IMPORTED_MODULE_9__.isOpenIdConfigResponse)(response.body) ? response.body : null];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from
     * @param cachedMetadata
     * @param newMetadata
     */
    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var metadata;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadata = this.getCloudDiscoveryMetadataFromConfig();
                        if (metadata) {
                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);
                            return [2 /*return*/, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG];
                        }
                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network
                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {
                            // No need to update
                            return [2 /*return*/, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE];
                        }
                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];
                    case 1:
                        metadata = _a.sent();
                        if (metadata) {
                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);
                            return [2 /*return*/, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK];
                        }
                        else {
                            // Metadata could not be obtained from config, cache or network
                            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_8__.ClientConfigurationError.createUntrustedAuthorityError();
                        }
                }
            });
        });
    };
    /**
     * Parse cloudDiscoveryMetadata config or check knownAuthorities
     */
    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {
        // Check if network response was provided in config
        if (this.authorityOptions.cloudDiscoveryMetadata) {
            try {
                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);
                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);
                if (metadata) {
                    return metadata;
                }
            }
            catch (e) {
                throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_8__.ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();
            }
        }
        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities
        if (this.isInKnownAuthorities()) {
            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
        }
        return null;
    };
    /**
     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
     * @param networkInterface
     */
    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {
            var instanceDiscoveryEndpoint, options, match, response, metadata;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        instanceDiscoveryEndpoint = "" + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + "oauth2/v2.0/authorize";
                        options = {};
                        if (this.proxyUrl) {
                            options.proxyUrl = this.proxyUrl;
                        }
                        match = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];
                    case 2:
                        response = _a.sent();
                        metadata = (0,_CloudInstanceDiscoveryResponse_js__WEBPACK_IMPORTED_MODULE_10__.isCloudInstanceDiscoveryResponse)(response.body) ? response.body.metadata : [];
                        if (metadata.length === 0) {
                            // If no metadata is returned, authority is untrusted
                            return [2 /*return*/, null];
                        }
                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 4:
                        if (!match) {
                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded
                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
                        }
                        return [2 /*return*/, match];
                }
            });
        });
    };
    /**
     * Helper function to determine if this host is included in the knownAuthorities config option
     */
    Authority.prototype.isInKnownAuthorities = function () {
        var _this = this;
        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {
            return _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;
        });
        return matches.length > 0;
    };
    /**
     * helper function to populate the authority based on azureCloudOptions
     * @param authorityString
     * @param azureCloudOptions
     */
    Authority.generateAuthority = function (authorityString, azureCloudOptions) {
        var authorityAzureCloudInstance;
        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== _AuthorityOptions_js__WEBPACK_IMPORTED_MODULE_11__.AzureCloudInstance.None) {
            var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_COMMON_TENANT;
            authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + "/" + tenant + "/";
        }
        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;
    };
    /**
     * Creates cloud discovery metadata object from a given host
     * @param host
     */
    Authority.createCloudDiscoveryMetadataFromHost = function (host) {
        return {
            preferred_network: host,
            preferred_cache: host,
            aliases: [host]
        };
    };
    /**
     * Searches instance discovery network response for the entry that contains the host in the aliases list
     * @param response
     * @param authority
     */
    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {
        for (var i = 0; i < response.length; i++) {
            var metadata = response[i];
            if (metadata.aliases.indexOf(authority) > -1) {
                return metadata;
            }
        }
        return null;
    };
    /**
     * helper function to generate environment from authority object
     */
    Authority.prototype.getPreferredCache = function () {
        if (this.discoveryComplete()) {
            return this.metadata.preferred_cache;
        }
        else {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        }
    };
    /**
     * Returns whether or not the provided host is an alias of this authority instance
     * @param host
     */
    Authority.prototype.isAlias = function (host) {
        return this.metadata.aliases.indexOf(host) > -1;
    };
    /**
     * Checks whether the provided host is that of a public cloud authority
     *
     * @param authority string
     * @returns bool
     */
    Authority.isPublicCloudAuthority = function (host) {
        return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;
    };
    /**
     * Rebuild the authority string with the region
     *
     * @param host string
     * @param region string
     */
    Authority.buildRegionalAuthorityString = function (host, region, queryString) {
        // Create and validate a Url string object with the initial authority string
        var authorityUrlInstance = new _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString(host);
        authorityUrlInstance.validateAsUri();
        var authorityUrlParts = authorityUrlInstance.getUrlComponents();
        var hostNameAndPort = region + "." + authorityUrlParts.HostNameAndPort;
        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {
            hostNameAndPort = region + "." + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;
        }
        // Include the query string portion of the url
        var url = _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString.constructAuthorityUriFromObject((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;
        // Add the query string if a query string was provided
        if (queryString)
            return url + "?" + queryString;
        return url;
    };
    /**
     * Replace the endpoints in the metadata object with their regional equivalents.
     *
     * @param metadata OpenIdConfigResponse
     * @param azureRegion string
     */
    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {
        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);
        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature
        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, "allowestsrnonmsi=true");
        if (metadata.end_session_endpoint) {
            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);
        }
        return metadata;
    };
    return Authority;
}());


//# sourceMappingURL=Authority.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthorityFactory": () => (/* binding */ AuthorityFactory)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _Authority_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Authority.js */ "./node_modules/@azure/msal-common/dist/authority/Authority.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var AuthorityFactory = /** @class */ (function () {
    function AuthorityFactory() {
    }
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Also performs endpoint discovery.
     *
     * @param authorityUri
     * @param networkClient
     * @param protocolMode
     */
    AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, proxyUrl) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var acquireTokenAuthority, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions, proxyUrl);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, acquireTokenAuthority];
                    case 3:
                        e_1 = _a.sent();
                        throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Does not perform endpoint discovery.
     *
     * @param authorityUrl
     * @param networkInterface
     * @param protocolMode
     */
    AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, proxyUrl) {
        // Throw error if authority url is empty
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmpty(authorityUrl)) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__.ClientConfigurationError.createUrlEmptyError();
        }
        return new _Authority_js__WEBPACK_IMPORTED_MODULE_4__.Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, proxyUrl);
    };
    return AuthorityFactory;
}());


//# sourceMappingURL=AuthorityFactory.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AzureCloudInstance": () => (/* binding */ AzureCloudInstance)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var AzureCloudInstance;
(function (AzureCloudInstance) {
    // AzureCloudInstance is not specified.
    AzureCloudInstance[AzureCloudInstance["None"] = 0] = "None";
    // Microsoft Azure public cloud
    AzureCloudInstance["AzurePublic"] = "https://login.microsoftonline.com";
    // Microsoft Chinese national cloud
    AzureCloudInstance["AzureChina"] = "https://login.chinacloudapi.cn";
    // Microsoft German national cloud ("Black Forest")
    AzureCloudInstance["AzureGermany"] = "https://login.microsoftonline.de";
    // US Government cloud
    AzureCloudInstance["AzureUsGovernment"] = "https://login.microsoftonline.us";
})(AzureCloudInstance || (AzureCloudInstance = {}));


//# sourceMappingURL=AuthorityOptions.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/AuthorityType.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityType.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthorityType": () => (/* binding */ AuthorityType)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Authority types supported by MSAL.
 */
var AuthorityType;
(function (AuthorityType) {
    AuthorityType[AuthorityType["Default"] = 0] = "Default";
    AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
})(AuthorityType || (AuthorityType = {}));


//# sourceMappingURL=AuthorityType.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isCloudInstanceDiscoveryResponse": () => (/* binding */ isCloudInstanceDiscoveryResponse)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
function isCloudInstanceDiscoveryResponse(response) {
    return (response.hasOwnProperty("tenant_discovery_endpoint") &&
        response.hasOwnProperty("metadata"));
}


//# sourceMappingURL=CloudInstanceDiscoveryResponse.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isOpenIdConfigResponse": () => (/* binding */ isOpenIdConfigResponse)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
function isOpenIdConfigResponse(response) {
    return (response.hasOwnProperty("authorization_endpoint") &&
        response.hasOwnProperty("token_endpoint") &&
        response.hasOwnProperty("issuer"));
}


//# sourceMappingURL=OpenIdConfigResponse.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/ProtocolMode.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/ProtocolMode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProtocolMode": () => (/* binding */ ProtocolMode)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Protocol modes supported by MSAL.
 */
var ProtocolMode;
(function (ProtocolMode) {
    ProtocolMode["AAD"] = "AAD";
    ProtocolMode["OIDC"] = "OIDC";
})(ProtocolMode || (ProtocolMode = {}));


//# sourceMappingURL=ProtocolMode.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RegionDiscovery": () => (/* binding */ RegionDiscovery)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RegionDiscovery = /** @class */ (function () {
    function RegionDiscovery(networkInterface) {
        this.networkInterface = networkInterface;
    }
    /**
     * Detect the region from the application's environment.
     *
     * @returns Promise<string | null>
     */
    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata, proxyUrl) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        autodetectedRegionName = environmentRegion;
                        if (!!autodetectedRegionName) return [3 /*break*/, 8];
                        options = RegionDiscovery.IMDS_OPTIONS;
                        if (proxyUrl) {
                            options.proxyUrl = proxyUrl;
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, this.getRegionFromIMDS(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.IMDS_VERSION, options)];
                    case 2:
                        localIMDSVersionResponse = _a.sent();
                        if (localIMDSVersionResponse.status === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.ResponseCodes.httpSuccess) {
                            autodetectedRegionName = localIMDSVersionResponse.body;
                            regionDiscoveryMetadata.region_source = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoverySources.IMDS;
                        }
                        if (!(localIMDSVersionResponse.status === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getCurrentVersion(options)];
                    case 3:
                        currentIMDSVersion = _a.sent();
                        if (!currentIMDSVersion) {
                            regionDiscoveryMetadata.region_source = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoverySources.FAILED_AUTO_DETECTION;
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];
                    case 4:
                        currentIMDSVersionResponse = _a.sent();
                        if (currentIMDSVersionResponse.status === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.ResponseCodes.httpSuccess) {
                            autodetectedRegionName = currentIMDSVersionResponse.body;
                            regionDiscoveryMetadata.region_source = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoverySources.IMDS;
                        }
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        _a.sent();
                        regionDiscoveryMetadata.region_source = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoverySources.FAILED_AUTO_DETECTION;
                        return [2 /*return*/, null];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        regionDiscoveryMetadata.region_source = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoverySources.ENVIRONMENT_VARIABLE;
                        _a.label = 9;
                    case 9:
                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION
                        if (!autodetectedRegionName) {
                            regionDiscoveryMetadata.region_source = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoverySources.FAILED_AUTO_DETECTION;
                        }
                        return [2 /*return*/, autodetectedRegionName || null];
                }
            });
        });
    };
    /**
     * Make the call to the IMDS endpoint
     *
     * @param imdsEndpointUrl
     * @returns Promise<NetworkResponse<string>>
     */
    RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.IMDS_ENDPOINT + "?api-version=" + version + "&format=text", options, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.IMDS_TIMEOUT)];
            });
        });
    };
    /**
     * Get the most recent version of the IMDS endpoint available
     *
     * @returns Promise<string | null>
     */
    RegionDiscovery.prototype.getCurrentVersion = function (options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.IMDS_ENDPOINT + "?format=json", options)];
                    case 1:
                        response = _a.sent();
                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.
                        if (response.status === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.ResponseCodes.httpBadRequest && response.body && response.body["newest-versions"] && response.body["newest-versions"].length > 0) {
                            return [2 /*return*/, response.body["newest-versions"][0]];
                        }
                        return [2 /*return*/, null];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // Options for the IMDS endpoint request
    RegionDiscovery.IMDS_OPTIONS = {
        headers: {
            Metadata: "true",
        },
    };
    return RegionDiscovery;
}());


//# sourceMappingURL=RegionDiscovery.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/CacheManager.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/CacheManager.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CacheManager": () => (/* binding */ CacheManager),
/* harmony export */   "DefaultStorageClass": () => (/* binding */ DefaultStorageClass)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _entities_CredentialEntity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./entities/CredentialEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js");
/* harmony import */ var _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../request/ScopeSet.js */ "./node_modules/@azure/msal-common/dist/request/ScopeSet.js");
/* harmony import */ var _entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entities/AccountEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../account/AuthToken.js */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */










/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
 */
var CacheManager = /** @class */ (function () {
    function CacheManager(clientId, cryptoImpl) {
        this.clientId = clientId;
        this.cryptoImpl = cryptoImpl;
    }
    /**
     * Returns all accounts in cache
     */
    CacheManager.prototype.getAllAccounts = function () {
        var _this = this;
        var currentAccounts = this.getAccountsFilteredBy();
        var accountValues = Object.keys(currentAccounts).map(function (accountKey) { return currentAccounts[accountKey]; });
        var numAccounts = accountValues.length;
        if (numAccounts < 1) {
            return [];
        }
        else {
            var allAccounts = accountValues.map(function (value) {
                var accountEntity = CacheManager.toObject(new _entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_0__.AccountEntity(), value);
                var accountInfo = accountEntity.getAccountInfo();
                var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);
                if (idToken && !accountInfo.idTokenClaims) {
                    accountInfo.idTokenClaims = new _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_1__.AuthToken(idToken.secret, _this.cryptoImpl).claims;
                }
                return accountInfo;
            });
            return allAccounts;
        }
    };
    /**
     * saves a cache record
     * @param cacheRecord
     */
    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!cacheRecord) {
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createNullOrUndefinedCacheRecord();
                        }
                        if (!!cacheRecord.account) {
                            this.setAccount(cacheRecord.account);
                        }
                        if (!!cacheRecord.idToken) {
                            this.setIdTokenCredential(cacheRecord.idToken);
                        }
                        if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!!cacheRecord.refreshToken) {
                            this.setRefreshTokenCredential(cacheRecord.refreshToken);
                        }
                        if (!!cacheRecord.appMetadata) {
                            this.setAppMetadata(cacheRecord.appMetadata);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * saves access token credential
     * @param credential
     */
    CacheManager.prototype.saveAccessToken = function (credential) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var currentTokenCache, currentScopes, currentAccessTokens, removedAccessTokens_1;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentTokenCache = this.getCredentialsFilteredBy({
                            clientId: credential.clientId,
                            credentialType: credential.credentialType,
                            environment: credential.environment,
                            homeAccountId: credential.homeAccountId,
                            realm: credential.realm,
                            tokenType: credential.tokenType,
                            requestedClaimsHash: credential.requestedClaimsHash
                        });
                        currentScopes = _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_4__.ScopeSet.fromString(credential.target);
                        currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) { return currentTokenCache.accessTokens[key]; });
                        if (!currentAccessTokens) return [3 /*break*/, 2];
                        removedAccessTokens_1 = [];
                        currentAccessTokens.forEach(function (tokenEntity) {
                            var tokenScopeSet = _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_4__.ScopeSet.fromString(tokenEntity.target);
                            if (tokenScopeSet.intersectingScopeSets(currentScopes)) {
                                removedAccessTokens_1.push(_this.removeCredential(tokenEntity));
                            }
                        });
                        return [4 /*yield*/, Promise.all(removedAccessTokens_1)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.setAccessTokenCredential(credential);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */
    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {
        return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : "", accountFilter ? accountFilter.environment : "", accountFilter ? accountFilter.realm : "");
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */
    CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAccounts = {};
        allCacheKeys.forEach(function (cacheKey) {
            var entity = _this.getAccount(cacheKey);
            if (!entity) {
                return;
            }
            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {
                return;
            }
            if (!!environment && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!!realm && !_this.matchRealm(entity, realm)) {
                return;
            }
            matchingAccounts[cacheKey] = entity;
        });
        return matchingAccounts;
    };
    /**
     * retrieve credentails matching all provided filters; if no filter is set, get all credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     */
    CacheManager.prototype.getCredentialsFilteredBy = function (filter) {
        return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion, filter.tokenType, filter.keyId, filter.requestedClaimsHash);
    };
    /**
     * Support function to help match credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     * @param oboAssertion
     * @param tokenType
     */
    CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion, tokenType, keyId, requestedClaimsHash) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingCredentials = {
            idTokens: {},
            accessTokens: {},
            refreshTokens: {},
        };
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-credential type cache entities
            var credType = _entities_CredentialEntity_js__WEBPACK_IMPORTED_MODULE_5__.CredentialEntity.getCredentialType(cacheKey);
            if (credType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.Constants.NOT_DEFINED) {
                return;
            }
            // Attempt retrieval
            var entity = _this.getSpecificCredential(cacheKey, credType);
            if (!entity) {
                return;
            }
            if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {
                return;
            }
            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {
                return;
            }
            if (!!environment && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!!realm && !_this.matchRealm(entity, realm)) {
                return;
            }
            if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {
                return;
            }
            if (!!clientId && !_this.matchClientId(entity, clientId)) {
                return;
            }
            if (!!familyId && !_this.matchFamilyId(entity, familyId)) {
                return;
            }
            /*
             * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
             * Resource specific refresh tokens case will be added when the support is deemed necessary
             */
            if (!!target && !_this.matchTarget(entity, target)) {
                return;
            }
            // If request OR cached entity has requested Claims Hash, check if they match
            if (requestedClaimsHash || entity.requestedClaimsHash) {
                // Don't match if either is undefined or they are different
                if (entity.requestedClaimsHash !== requestedClaimsHash) {
                    return;
                }
            }
            // Access Token with Auth Scheme specific matching
            if (credentialType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {
                if (!!tokenType && !_this.matchTokenType(entity, tokenType)) {
                    return;
                }
                // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key
                if (tokenType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.AuthenticationScheme.SSH) {
                    if (keyId && !_this.matchKeyId(entity, keyId)) {
                        return;
                    }
                }
            }
            // At this point, the entity matches the request, update cache key if key schema has changed
            var updatedCacheKey = _this.updateCredentialCacheKey(cacheKey, entity);
            switch (credType) {
                case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:
                    matchingCredentials.idTokens[updatedCacheKey] = entity;
                    break;
                case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:
                case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                    matchingCredentials.accessTokens[updatedCacheKey] = entity;
                    break;
                case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:
                    matchingCredentials.refreshTokens[updatedCacheKey] = entity;
                    break;
            }
        });
        return matchingCredentials;
    };
    /**
     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata
     * @param filter
     */
    CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {
        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);
    };
    /**
     * Support function to help match appMetadata
     * @param environment
     * @param clientId
     */
    CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAppMetadata = {};
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-appMetadata type cache entities
            if (!_this.isAppMetadata(cacheKey)) {
                return;
            }
            // Attempt retrieval
            var entity = _this.getAppMetadata(cacheKey);
            if (!entity) {
                return;
            }
            if (!!environment && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!!clientId && !_this.matchClientId(entity, clientId)) {
                return;
            }
            matchingAppMetadata[cacheKey] = entity;
        });
        return matchingAppMetadata;
    };
    /**
     * retrieve authorityMetadata that contains a matching alias
     * @param filter
     */
    CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {
        var _this = this;
        var allCacheKeys = this.getAuthorityMetadataKeys();
        var matchedEntity = null;
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-authorityMetadata type cache entities
            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {
                return;
            }
            // Attempt retrieval
            var entity = _this.getAuthorityMetadata(cacheKey);
            if (!entity) {
                return;
            }
            if (entity.aliases.indexOf(host) === -1) {
                return;
            }
            matchedEntity = entity;
        });
        return matchedEntity;
    };
    /**
     * Removes all accounts and related tokens from cache.
     */
    CacheManager.prototype.removeAllAccounts = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var allCacheKeys, removedAccounts;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allCacheKeys = this.getKeys();
                        removedAccounts = [];
                        allCacheKeys.forEach(function (cacheKey) {
                            var entity = _this.getAccount(cacheKey);
                            if (!entity) {
                                return;
                            }
                            removedAccounts.push(_this.removeAccount(cacheKey));
                        });
                        return [4 /*yield*/, Promise.all(removedAccounts)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
    CacheManager.prototype.removeAccount = function (accountKey) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var account;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        account = this.getAccount(accountKey);
                        if (!account) {
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createNoAccountFoundError();
                        }
                        return [4 /*yield*/, this.removeAccountContext(account)];
                    case 1: return [2 /*return*/, ((_a.sent()) && this.removeItem(accountKey, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CacheSchemaType.ACCOUNT))];
                }
            });
        });
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
    CacheManager.prototype.removeAccountContext = function (account) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var allCacheKeys, accountId, removedCredentials;
            var _this = this;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allCacheKeys = this.getKeys();
                        accountId = account.generateAccountId();
                        removedCredentials = [];
                        allCacheKeys.forEach(function (cacheKey) {
                            // don't parse any non-credential type cache entities
                            var credType = _entities_CredentialEntity_js__WEBPACK_IMPORTED_MODULE_5__.CredentialEntity.getCredentialType(cacheKey);
                            if (credType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.Constants.NOT_DEFINED) {
                                return;
                            }
                            var cacheEntity = _this.getSpecificCredential(cacheKey, credType);
                            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {
                                removedCredentials.push(_this.removeCredential(cacheEntity));
                            }
                        });
                        return [4 /*yield*/, Promise.all(removedCredentials)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * returns a boolean if the given credential is removed
     * @param credential
     */
    CacheManager.prototype.removeCredential = function (credential) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var key, accessTokenWithAuthSchemeEntity, kid;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = credential.generateCredentialKey();
                        if (!(credential.credentialType.toLowerCase() === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];
                        if (!(credential.tokenType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.AuthenticationScheme.POP)) return [3 /*break*/, 4];
                        accessTokenWithAuthSchemeEntity = credential;
                        kid = accessTokenWithAuthSchemeEntity.keyId;
                        if (!kid) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createBindingKeyNotRemovedError();
                    case 4: return [2 /*return*/, this.removeItem(key, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CacheSchemaType.CREDENTIAL)];
                }
            });
        });
    };
    /**
     * Removes all app metadata objects from cache.
     */
    CacheManager.prototype.removeAppMetadata = function () {
        var _this = this;
        var allCacheKeys = this.getKeys();
        allCacheKeys.forEach(function (cacheKey) {
            if (_this.isAppMetadata(cacheKey)) {
                _this.removeItem(cacheKey, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CacheSchemaType.APP_METADATA);
            }
        });
        return true;
    };
    /**
     * Retrieve the cached credentials into a cacherecord
     * @param account
     * @param clientId
     * @param scopes
     * @param environment
     * @param authScheme
     */
    CacheManager.prototype.readCacheRecord = function (account, clientId, request, environment) {
        var cachedAccount = this.readAccountFromCache(account);
        var cachedIdToken = this.readIdTokenFromCache(clientId, account);
        var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, request);
        var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);
        var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);
        if (cachedAccount && cachedIdToken) {
            cachedAccount.idTokenClaims = new _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_1__.AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;
        }
        return {
            account: cachedAccount,
            idToken: cachedIdToken,
            accessToken: cachedAccessToken,
            refreshToken: cachedRefreshToken,
            appMetadata: cachedAppMetadata,
        };
    };
    /**
     * Retrieve AccountEntity from cache
     * @param account
     */
    CacheManager.prototype.readAccountFromCache = function (account) {
        var accountKey = _entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_0__.AccountEntity.generateAccountCacheKey(account);
        return this.getAccount(accountKey);
    };
    /**
     * Retrieve IdTokenEntity from cache
     * @param clientId
     * @param account
     * @param inputRealm
     */
    CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {
        var idTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN,
            clientId: clientId,
            realm: account.tenantId,
        };
        var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);
        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });
        var numIdTokens = idTokens.length;
        if (numIdTokens < 1) {
            return null;
        }
        else if (numIdTokens > 1) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return idTokens[0];
    };
    /**
     * Retrieve AccessTokenEntity from cache
     * @param clientId
     * @param account
     * @param scopes
     * @param authScheme
     */
    CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, request) {
        var scopes = new _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_4__.ScopeSet(request.scopes || []);
        var authScheme = request.authenticationScheme || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.AuthenticationScheme.BEARER;
        /*
         * Distinguish between Bearer and PoP/SSH token cache types
         * Cast to lowercase to handle "bearer" from ADFS
         */
        var credentialType = (authScheme && authScheme.toLowerCase() !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.AuthenticationScheme.BEARER.toLowerCase()) ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN;
        var accessTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: credentialType,
            clientId: clientId,
            realm: account.tenantId,
            target: scopes.printScopesLowerCase(),
            tokenType: authScheme,
            keyId: request.sshKid,
            requestedClaimsHash: request.requestedClaimsHash
        };
        var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);
        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
        var numAccessTokens = accessTokens.length;
        if (numAccessTokens < 1) {
            return null;
        }
        else if (numAccessTokens > 1) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return accessTokens[0];
    };
    /**
     * Helper to retrieve the appropriate refresh token from cache
     * @param clientId
     * @param account
     * @param familyRT
     */
    CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {
        var id = familyRT ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.THE_FAMILY_ID : undefined;
        var refreshTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN,
            clientId: clientId,
            familyId: id
        };
        var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);
        var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) { return credentialCache.refreshTokens[key]; });
        var numRefreshTokens = refreshTokens.length;
        if (numRefreshTokens < 1) {
            return null;
        }
        // address the else case after remove functions address environment aliases
        return refreshTokens[0];
    };
    /**
     * Retrieve AppMetadataEntity from cache
     */
    CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {
        var appMetadataFilter = {
            environment: environment,
            clientId: clientId,
        };
        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);
        var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });
        var numAppMetadata = appMetadataEntries.length;
        if (numAppMetadata < 1) {
            return null;
        }
        else if (numAppMetadata > 1) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createMultipleMatchingAppMetadataInCacheError();
        }
        return appMetadataEntries[0];
    };
    /**
     * Return the family_id value associated  with FOCI
     * @param environment
     * @param clientId
     */
    CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {
        var appMetadata = this.readAppMetadataFromCache(environment, clientId);
        return !!(appMetadata && appMetadata.familyId === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.THE_FAMILY_ID);
    };
    /**
     * helper to match account ids
     * @param value
     * @param homeAccountId
     */
    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {
        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);
    };
    /**
     * helper to match assertion
     * @param value
     * @param oboAssertion
     */
    CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {
        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);
    };
    /**
     * helper to match environment
     * @param value
     * @param environment
     */
    CacheManager.prototype.matchEnvironment = function (entity, environment) {
        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);
        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {
            return true;
        }
        return false;
    };
    /**
     * helper to match credential type
     * @param entity
     * @param credentialType
     */
    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {
        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());
    };
    /**
     * helper to match client ids
     * @param entity
     * @param clientId
     */
    CacheManager.prototype.matchClientId = function (entity, clientId) {
        return !!(entity.clientId && clientId === entity.clientId);
    };
    /**
     * helper to match family ids
     * @param entity
     * @param familyId
     */
    CacheManager.prototype.matchFamilyId = function (entity, familyId) {
        return !!(entity.familyId && familyId === entity.familyId);
    };
    /**
     * helper to match realm
     * @param entity
     * @param realm
     */
    CacheManager.prototype.matchRealm = function (entity, realm) {
        return !!(entity.realm && realm === entity.realm);
    };
    /**
     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
     * @param entity
     * @param target
     */
    CacheManager.prototype.matchTarget = function (entity, target) {
        var isNotAccessTokenCredential = (entity.credentialType !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN && entity.credentialType !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);
        if (isNotAccessTokenCredential || !entity.target) {
            return false;
        }
        var entityScopeSet = _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_4__.ScopeSet.fromString(entity.target);
        var requestTargetScopeSet = _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_4__.ScopeSet.fromString(target);
        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {
            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes
        }
        else {
            requestTargetScopeSet.removeScope(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.Constants.OFFLINE_ACCESS_SCOPE);
        }
        return entityScopeSet.containsScopeSet(requestTargetScopeSet);
    };
    /**
     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise
     * @param entity
     * @param tokenType
     */
    CacheManager.prototype.matchTokenType = function (entity, tokenType) {
        return !!(entity.tokenType && entity.tokenType === tokenType);
    };
    /**
     * Returns true if the credential's keyId matches the one in the request, false otherwise
     * @param entity
     * @param tokenType
     */
    CacheManager.prototype.matchKeyId = function (entity, keyId) {
        return !!(entity.keyId && entity.keyId === keyId);
    };
    /**
     * returns if a given cache entity is of the type appmetadata
     * @param key
     */
    CacheManager.prototype.isAppMetadata = function (key) {
        return key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.APP_METADATA) !== -1;
    };
    /**
     * returns if a given cache entity is of the type authoritymetadata
     * @param key
     */
    CacheManager.prototype.isAuthorityMetadata = function (key) {
        return key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;
    };
    /**
     * returns cache key used for cloud instance metadata
     */
    CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {
        return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + "-" + this.clientId + "-" + authority;
    };
    /**
     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache
     * @param key
     * @param credType
     */
    CacheManager.prototype.getSpecificCredential = function (key, credType) {
        switch (credType) {
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN: {
                return this.getIdTokenCredential(key);
            }
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {
                return this.getAccessTokenCredential(key);
            }
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN: {
                return this.getRefreshTokenCredential(key);
            }
            default:
                return null;
        }
    };
    /**
     * Helper to convert serialized data to object
     * @param obj
     * @param json
     */
    CacheManager.toObject = function (obj, json) {
        for (var propertyName in json) {
            obj[propertyName] = json[propertyName];
        }
        return obj;
    };
    return CacheManager;
}());
var DefaultStorageClass = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__extends)(DefaultStorageClass, _super);
    function DefaultStorageClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultStorageClass.prototype.setAccount = function () {
        var notImplErr = "Storage interface - setAccount() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAccount = function () {
        var notImplErr = "Storage interface - getAccount() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setIdTokenCredential = function () {
        var notImplErr = "Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getIdTokenCredential = function () {
        var notImplErr = "Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setAccessTokenCredential = function () {
        var notImplErr = "Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAccessTokenCredential = function () {
        var notImplErr = "Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setRefreshTokenCredential = function () {
        var notImplErr = "Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getRefreshTokenCredential = function () {
        var notImplErr = "Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setAppMetadata = function () {
        var notImplErr = "Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAppMetadata = function () {
        var notImplErr = "Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setServerTelemetry = function () {
        var notImplErr = "Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getServerTelemetry = function () {
        var notImplErr = "Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setAuthorityMetadata = function () {
        var notImplErr = "Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAuthorityMetadata = function () {
        var notImplErr = "Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {
        var notImplErr = "Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setThrottlingCache = function () {
        var notImplErr = "Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getThrottlingCache = function () {
        var notImplErr = "Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.removeItem = function () {
        var notImplErr = "Storage interface - removeItem() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.containsKey = function () {
        var notImplErr = "Storage interface - containsKey() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getKeys = function () {
        var notImplErr = "Storage interface - getKeys() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.clear = function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                notImplErr = "Storage interface - clear() has not been implemented for the cacheStorage interface.";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    };
    DefaultStorageClass.prototype.updateCredentialCacheKey = function () {
        var notImplErr = "Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_7__.AuthError.createUnexpectedError(notImplErr);
    };
    return DefaultStorageClass;
}(CacheManager));


//# sourceMappingURL=CacheManager.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccessTokenEntity": () => (/* binding */ AccessTokenEntity)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _CredentialEntity_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CredentialEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/TimeUtils.js */ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../account/AuthToken.js */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */









/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ACCESS_TOKEN Credential Type
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      cachedAt: Absolute device time when entry was created in the cache.
 *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.
 *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.
 *      keyId: used for POP and SSH tokenTypes
 *      tokenType: Type of the token issued. Usually "Bearer"
 * }
 */
var AccessTokenEntity = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(AccessTokenEntity, _super);
    function AccessTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create AccessTokenEntity
     * @param homeAccountId
     * @param environment
     * @param accessToken
     * @param clientId
     * @param tenantId
     * @param scopes
     * @param expiresOn
     * @param extExpiresOn
     */
    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion, keyId, requestedClaims, requestedClaimsHash) {
        var _a, _b;
        var atEntity = new AccessTokenEntity();
        atEntity.homeAccountId = homeAccountId;
        atEntity.credentialType = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ACCESS_TOKEN;
        atEntity.secret = accessToken;
        var currentTime = _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_2__.TimeUtils.nowSeconds();
        atEntity.cachedAt = currentTime.toString();
        /*
         * Token expiry time.
         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.
         */
        atEntity.expiresOn = expiresOn.toString();
        atEntity.extendedExpiresOn = extExpiresOn.toString();
        if (refreshOn) {
            atEntity.refreshOn = refreshOn.toString();
        }
        atEntity.environment = environment;
        atEntity.clientId = clientId;
        atEntity.realm = tenantId;
        atEntity.target = scopes;
        atEntity.oboAssertion = oboAssertion;
        atEntity.tokenType = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.isEmpty(tokenType) ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER : tokenType;
        if (requestedClaims) {
            atEntity.requestedClaims = requestedClaims;
            atEntity.requestedClaimsHash = requestedClaimsHash;
        }
        /*
         * Create Access Token With Auth Scheme instead of regular access token
         * Cast to lower to handle "bearer" from ADFS
         */
        if (((_a = atEntity.tokenType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER.toLowerCase()) {
            atEntity.credentialType = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
            switch (atEntity.tokenType) {
                case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.POP:
                    // Make sure keyId is present and add it to credential
                    var tokenClaims = _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_4__.AuthToken.extractTokenClaims(accessToken, cryptoUtils);
                    if (!((_b = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _b === void 0 ? void 0 : _b.kid)) {
                        throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_5__.ClientAuthError.createTokenClaimsRequiredError();
                    }
                    atEntity.keyId = tokenClaims.cnf.kid;
                    break;
                case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.SSH:
                    atEntity.keyId = keyId;
            }
        }
        return atEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AccessTokenEntity.isAccessTokenEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity.hasOwnProperty("target") &&
            (entity["credentialType"] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ACCESS_TOKEN || entity["credentialType"] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));
    };
    return AccessTokenEntity;
}(_CredentialEntity_js__WEBPACK_IMPORTED_MODULE_6__.CredentialEntity));


//# sourceMappingURL=AccessTokenEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountEntity": () => (/* binding */ AccountEntity)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../account/ClientInfo.js */ "./node_modules/@azure/msal-common/dist/account/ClientInfo.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _authority_AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../authority/AuthorityType.js */ "./node_modules/@azure/msal-common/dist/authority/AuthorityType.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
 *
 * Key : Value Schema
 *
 * Key: <home_account_id>-<environment>-<realm*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
 *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
 *      authorityType: Accounts authority type as a string
 *      name: Full name for the account, including given name and family name,
 *      clientInfo: Full base64 encoded client info received from ESTS
 *      lastModificationTime: last time this entity was modified in the cache
 *      lastModificationApp:
 *      oboAssertion: access token passed in as part of OBO request
 *      idTokenClaims: Object containing claims parsed from ID token
 * }
 */
var AccountEntity = /** @class */ (function () {
    function AccountEntity() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */
    AccountEntity.prototype.generateAccountId = function () {
        var accountId = [this.homeAccountId, this.environment];
        return accountId.join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>
     */
    AccountEntity.prototype.generateAccountKey = function () {
        return AccountEntity.generateAccountCacheKey({
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            localAccountId: this.localAccountId
        });
    };
    /**
     * returns the type of the cache (in this case account)
     */
    AccountEntity.prototype.generateType = function () {
        switch (this.authorityType) {
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.ADFS_ACCOUNT_TYPE:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.ADFS;
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.MSAV1_ACCOUNT_TYPE:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.MSA;
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.MSSTS_ACCOUNT_TYPE:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.MSSTS;
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.GENERIC;
            default: {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createUnexpectedAccountTypeError();
            }
        }
    };
    /**
     * Returns the AccountInfo interface for this account.
     */
    AccountEntity.prototype.getAccountInfo = function () {
        return {
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            localAccountId: this.localAccountId,
            name: this.name,
            idTokenClaims: this.idTokenClaims
        };
    };
    /**
     * Generates account key from interface
     * @param accountInterface
     */
    AccountEntity.generateAccountCacheKey = function (accountInterface) {
        var accountKey = [
            accountInterface.homeAccountId,
            accountInterface.environment || "",
            accountInterface.tenantId || "",
        ];
        return accountKey.join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
     * @param clientInfo
     * @param authority
     * @param idToken
     * @param policy
     */
    AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {
        var _a, _b, _c, _d, _e, _f;
        var account = new AccountEntity();
        account.authorityType = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.MSSTS_ACCOUNT_TYPE;
        account.clientInfo = clientInfo;
        account.homeAccountId = homeAccountId;
        var env = environment || (authority && authority.getPreferredCache());
        if (!env) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createInvalidCacheEnvironmentError();
        }
        account.environment = env;
        // non AAD scenarios can have empty realm
        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || "";
        account.oboAssertion = oboAssertion;
        if (idToken) {
            account.idTokenClaims = idToken.claims;
            // How do you account for MSA CID here?
            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || "";
            /*
             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.
             * This field should not be relied upon if a custom policy is configured to return more than 1 email.
             */
            account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : "");
            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;
        }
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        return account;
    };
    /**
     * Builds non-AAD/ADFS account.
     * @param authority
     * @param idToken
     */
    AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {
        var _a, _b, _c, _d;
        var account = new AccountEntity();
        account.authorityType = (authority && authority.authorityType === _authority_AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs) ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.ADFS_ACCOUNT_TYPE : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;
        account.homeAccountId = homeAccountId;
        // non AAD scenarios can have empty realm
        account.realm = "";
        account.oboAssertion = oboAssertion;
        var env = environment || authority && authority.getPreferredCache();
        if (!env) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createInvalidCacheEnvironmentError();
        }
        if (idToken) {
            // How do you account for MSA CID here?
            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || "";
            // upn claim for most ADFS scenarios
            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || "";
            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || "";
            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;
        }
        account.environment = env;
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        /*
         * add uniqueName to claims
         * account.name = idToken.claims.uniqueName;
         */
        return account;
    };
    /**
     * Generate HomeAccountId from server response
     * @param serverClientInfo
     * @param authType
     */
    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {
        var _a;
        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
        // since ADFS does not have tid and does not set client_info
        if (authType === _authority_AuthorityType_js__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs) {
            return accountId;
        }
        // for cases where there is clientInfo
        if (serverClientInfo) {
            try {
                var clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(serverClientInfo, cryptoObj);
                if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmpty(clientInfo.uid) && !_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmpty(clientInfo.utid)) {
                    return "" + clientInfo.uid + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;
                }
            }
            catch (e) { }
        }
        // default to "sub" claim
        logger.verbose("No client info in response");
        return accountId;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AccountEntity.isAccountEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("localAccountId") &&
            entity.hasOwnProperty("username") &&
            entity.hasOwnProperty("authorityType"));
    };
    /**
     * Helper function to determine whether 2 accountInfo objects represent the same account
     * @param accountA
     * @param accountB
     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality
     */
    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {
        if (!accountA || !accountB) {
            return false;
        }
        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false
        if (compareClaims) {
            var accountAClaims = (accountA.idTokenClaims || {});
            var accountBClaims = (accountB.idTokenClaims || {});
            // issued at timestamp and nonce are expected to change each time a new id token is acquired
            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&
                (accountAClaims.nonce === accountBClaims.nonce);
        }
        return (accountA.homeAccountId === accountB.homeAccountId) &&
            (accountA.localAccountId === accountB.localAccountId) &&
            (accountA.username === accountB.username) &&
            (accountA.tenantId === accountB.tenantId) &&
            (accountA.environment === accountB.environment) &&
            claimsMatch;
    };
    return AccountEntity;
}());


//# sourceMappingURL=AccountEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/AppMetadataEntity.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AppMetadataEntity.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppMetadataEntity": () => (/* binding */ AppMetadataEntity)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * APP_METADATA Cache
 *
 * Key:Value Schema:
 *
 * Key: appmetadata-<environment>-<client_id>
 *
 * Value:
 * {
 *      clientId: client ID of the application
 *      environment: entity that issued the token, represented as a full host
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 * }
 */
var AppMetadataEntity = /** @class */ (function () {
    function AppMetadataEntity() {
    }
    /**
     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
     */
    AppMetadataEntity.prototype.generateAppMetadataKey = function () {
        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);
    };
    /**
     * Generate AppMetadata Cache Key
     */
    AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {
        var appMetaDataKeyArray = [
            _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA,
            environment,
            clientId,
        ];
        return appMetaDataKeyArray.join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Creates AppMetadataEntity
     * @param clientId
     * @param environment
     * @param familyId
     */
    AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {
        var appMetadata = new AppMetadataEntity();
        appMetadata.clientId = clientId;
        appMetadata.environment = environment;
        if (familyId) {
            appMetadata.familyId = familyId;
        }
        return appMetadata;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AppMetadataEntity.isAppMetadataEntity = function (key, entity) {
        if (!entity) {
            return false;
        }
        return (key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA) === 0 &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("environment"));
    };
    return AppMetadataEntity;
}());


//# sourceMappingURL=AppMetadataEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/AuthorityMetadataEntity.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AuthorityMetadataEntity.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthorityMetadataEntity": () => (/* binding */ AuthorityMetadataEntity)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/TimeUtils.js */ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var AuthorityMetadataEntity = /** @class */ (function () {
    function AuthorityMetadataEntity() {
        this.expiresAt = _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_0__.TimeUtils.nowSeconds() + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
    }
    /**
     * Update the entity with new aliases, preferred_cache and preferred_network values
     * @param metadata
     * @param fromNetwork
     */
    AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {
        this.aliases = metadata.aliases;
        this.preferred_cache = metadata.preferred_cache;
        this.preferred_network = metadata.preferred_network;
        this.aliasesFromNetwork = fromNetwork;
    };
    /**
     * Update the entity with new endpoints
     * @param metadata
     * @param fromNetwork
     */
    AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {
        this.authorization_endpoint = metadata.authorization_endpoint;
        this.token_endpoint = metadata.token_endpoint;
        this.end_session_endpoint = metadata.end_session_endpoint;
        this.issuer = metadata.issuer;
        this.endpointsFromNetwork = fromNetwork;
    };
    /**
     * Save the authority that was used to create this cache entry
     * @param authority
     */
    AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {
        this.canonical_authority = authority;
    };
    /**
     * Reset the exiresAt value
     */
    AuthorityMetadataEntity.prototype.resetExpiresAt = function () {
        this.expiresAt = _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_0__.TimeUtils.nowSeconds() + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
    };
    /**
     * Returns whether or not the data needs to be refreshed
     */
    AuthorityMetadataEntity.prototype.isExpired = function () {
        return this.expiresAt <= _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_0__.TimeUtils.nowSeconds();
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {
        if (!entity) {
            return false;
        }
        return (key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&
            entity.hasOwnProperty("aliases") &&
            entity.hasOwnProperty("preferred_cache") &&
            entity.hasOwnProperty("preferred_network") &&
            entity.hasOwnProperty("canonical_authority") &&
            entity.hasOwnProperty("authorization_endpoint") &&
            entity.hasOwnProperty("token_endpoint") &&
            entity.hasOwnProperty("issuer") &&
            entity.hasOwnProperty("aliasesFromNetwork") &&
            entity.hasOwnProperty("endpointsFromNetwork") &&
            entity.hasOwnProperty("expiresAt"));
    };
    return AuthorityMetadataEntity;
}());


//# sourceMappingURL=AuthorityMetadataEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/CacheRecord.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/CacheRecord.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CacheRecord": () => (/* binding */ CacheRecord)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var CacheRecord = /** @class */ (function () {
    function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
        this.account = accountEntity || null;
        this.idToken = idTokenEntity || null;
        this.accessToken = accessTokenEntity || null;
        this.refreshToken = refreshTokenEntity || null;
        this.appMetadata = appMetadataEntity || null;
    }
    return CacheRecord;
}());


//# sourceMappingURL=CacheRecord.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CredentialEntity": () => (/* binding */ CredentialEntity)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc
 *
 * Key:Value Schema:
 *
 * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      oboAssertion: access token passed in as part of OBO request
 *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)
 *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request
 * }
 */
var CredentialEntity = /** @class */ (function () {
    function CredentialEntity() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */
    CredentialEntity.prototype.generateAccountId = function () {
        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);
    };
    /**
     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>
     */
    CredentialEntity.prototype.generateCredentialId = function () {
        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);
    };
    /**
     * Generate target key component as per schema: <target>
     */
    CredentialEntity.prototype.generateTarget = function () {
        return CredentialEntity.generateTargetForCacheKey(this.target);
    };
    /**
     * generates credential key
     */
    CredentialEntity.prototype.generateCredentialKey = function () {
        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);
    };
    /**
     * returns the type of the cache (in this case credential)
     */
    CredentialEntity.prototype.generateType = function () {
        switch (this.credentialType) {
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.ID_TOKEN;
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN:
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.ACCESS_TOKEN;
            case _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN:
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheType.REFRESH_TOKEN;
            default: {
                throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createUnexpectedCredentialTypeError();
            }
        }
    };
    /**
     * helper function to return `CredentialType`
     * @param key
     */
    CredentialEntity.getCredentialType = function (key) {
        // First keyword search will match all "AccessToken" and "AccessToken_With_AuthScheme" credentials
        if (key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {
            // Perform second search to differentiate between "AccessToken" and "AccessToken_With_AuthScheme" credential types
            if (key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {
                return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
            }
            return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN;
        }
        else if (key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN.toLowerCase()) !== -1) {
            return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN;
        }
        else if (key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {
            return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN;
        }
        return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.NOT_DEFINED;
    };
    /**
     * generates credential key
     * <home_account_id*>-\<environment>-<credential_type>-<client_id>-<realm\*>-<target\*>-<scheme\*>
     */
    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {
        var credentialKey = [
            this.generateAccountIdForCacheKey(homeAccountId, environment),
            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),
            this.generateTargetForCacheKey(target),
            this.generateClaimsHashForCacheKey(requestedClaimsHash),
            this.generateSchemeForCacheKey(tokenType)
        ];
        return credentialKey.join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * generates Account Id for keys
     * @param homeAccountId
     * @param environment
     */
    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {
        var accountId = [homeAccountId, environment];
        return accountId.join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generates Credential Id for keys
     * @param credentialType
     * @param realm
     * @param clientId
     * @param familyId
     */
    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {
        var clientOrFamilyId = credentialType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN
            ? familyId || clientId
            : clientId;
        var credentialId = [
            credentialType,
            clientOrFamilyId,
            realm || "",
        ];
        return credentialId.join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate target key component as per schema: <target>
     */
    CredentialEntity.generateTargetForCacheKey = function (scopes) {
        return (scopes || "").toLowerCase();
    };
    /**
     * Generate requested claims key component as per schema: <requestedClaims>
     */
    CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {
        return (requestedClaimsHash || "").toLowerCase();
    };
    /**
     * Generate scheme key componenet as per schema: <scheme>
     */
    CredentialEntity.generateSchemeForCacheKey = function (tokenType) {
        /*
         * PoP Tokens and SSH certs include scheme in cache key
         * Cast to lowercase to handle "bearer" from ADFS
         */
        return (tokenType && tokenType.toLowerCase() !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : "";
    };
    return CredentialEntity;
}());


//# sourceMappingURL=CredentialEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/IdTokenEntity.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/IdTokenEntity.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IdTokenEntity": () => (/* binding */ IdTokenEntity)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _CredentialEntity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CredentialEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ID_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      realm: Full tenant or organizational identifier that the account belongs to
 * }
 */
var IdTokenEntity = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(IdTokenEntity, _super);
    function IdTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create IdTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */
    IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {
        var idTokenEntity = new IdTokenEntity();
        idTokenEntity.credentialType = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ID_TOKEN;
        idTokenEntity.homeAccountId = homeAccountId;
        idTokenEntity.environment = environment;
        idTokenEntity.clientId = clientId;
        idTokenEntity.secret = idToken;
        idTokenEntity.realm = tenantId;
        idTokenEntity.oboAssertion = oboAssertion;
        return idTokenEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    IdTokenEntity.isIdTokenEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity["credentialType"] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ID_TOKEN);
    };
    return IdTokenEntity;
}(_CredentialEntity_js__WEBPACK_IMPORTED_MODULE_2__.CredentialEntity));


//# sourceMappingURL=IdTokenEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/RefreshTokenEntity.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/RefreshTokenEntity.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RefreshTokenEntity": () => (/* binding */ RefreshTokenEntity)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _CredentialEntity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CredentialEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * REFRESH_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--
 *
 * Value:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 * }
 */
var RefreshTokenEntity = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(RefreshTokenEntity, _super);
    function RefreshTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create RefreshTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */
    RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {
        var rtEntity = new RefreshTokenEntity();
        rtEntity.clientId = clientId;
        rtEntity.credentialType = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.REFRESH_TOKEN;
        rtEntity.environment = environment;
        rtEntity.homeAccountId = homeAccountId;
        rtEntity.secret = refreshToken;
        rtEntity.oboAssertion = oboAssertion;
        if (familyId)
            rtEntity.familyId = familyId;
        return rtEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    RefreshTokenEntity.isRefreshTokenEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity["credentialType"] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.CredentialType.REFRESH_TOKEN);
    };
    return RefreshTokenEntity;
}(_CredentialEntity_js__WEBPACK_IMPORTED_MODULE_2__.CredentialEntity));


//# sourceMappingURL=RefreshTokenEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/ServerTelemetryEntity.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/ServerTelemetryEntity.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServerTelemetryEntity": () => (/* binding */ ServerTelemetryEntity)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ServerTelemetryEntity = /** @class */ (function () {
    function ServerTelemetryEntity() {
        this.failedRequests = [];
        this.errors = [];
        this.cacheHits = 0;
    }
    /**
     * validates if a given cache entry is "Telemetry", parses <key,value>
     * @param key
     * @param entity
     */
    ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {
        var validateKey = key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;
        var validateEntity = true;
        if (entity) {
            validateEntity =
                entity.hasOwnProperty("failedRequests") &&
                    entity.hasOwnProperty("errors") &&
                    entity.hasOwnProperty("cacheHits");
        }
        return validateKey && validateEntity;
    };
    return ServerTelemetryEntity;
}());


//# sourceMappingURL=ServerTelemetryEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/entities/ThrottlingEntity.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/ThrottlingEntity.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ThrottlingEntity": () => (/* binding */ ThrottlingEntity)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ThrottlingEntity = /** @class */ (function () {
    function ThrottlingEntity() {
    }
    /**
     * validates if a given cache entry is "Throttling", parses <key,value>
     * @param key
     * @param entity
     */
    ThrottlingEntity.isThrottlingEntity = function (key, entity) {
        var validateKey = false;
        if (key) {
            validateKey = key.indexOf(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX) === 0;
        }
        var validateEntity = true;
        if (entity) {
            validateEntity = entity.hasOwnProperty("throttleTime");
        }
        return validateKey && validateEntity;
    };
    return ThrottlingEntity;
}());


//# sourceMappingURL=ThrottlingEntity.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TokenCacheContext": () => (/* binding */ TokenCacheContext)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class instance helps track the memory changes facilitating
 * decisions to read from and write to the persistent cache
 */ var TokenCacheContext = /** @class */ (function () {
    function TokenCacheContext(tokenCache, hasChanged) {
        this.cache = tokenCache;
        this.hasChanged = hasChanged;
    }
    Object.defineProperty(TokenCacheContext.prototype, "cacheHasChanged", {
        /**
         * boolean which indicates the changes in cache
         */
        get: function () {
            return this.hasChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenCacheContext.prototype, "tokenCache", {
        /**
         * function to retrieve the token cache
         */
        get: function () {
            return this.cache;
        },
        enumerable: false,
        configurable: true
    });
    return TokenCacheContext;
}());


//# sourceMappingURL=TokenCacheContext.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthorizationCodeClient": () => (/* binding */ AuthorizationCodeClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _BaseClient_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BaseClient.js */ "./node_modules/@azure/msal-common/dist/client/BaseClient.js");
/* harmony import */ var _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../request/RequestParameterBuilder.js */ "./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../response/ResponseHandler.js */ "./node_modules/@azure/msal-common/dist/response/ResponseHandler.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _url_UrlString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../url/UrlString.js */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _crypto_PopTokenGenerator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.js */ "./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.js");
/* harmony import */ var _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TimeUtils.js */ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js");
/* harmony import */ var _account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../account/ClientInfo.js */ "./node_modules/@azure/msal-common/dist/account/ClientInfo.js");
/* harmony import */ var _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../account/CcsCredential.js */ "./node_modules/@azure/msal-common/dist/account/CcsCredential.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _request_RequestValidator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../request/RequestValidator.js */ "./node_modules/@azure/msal-common/dist/request/RequestValidator.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */
















/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Oauth2.0 Authorization Code client
 */
var AuthorizationCodeClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(AuthorizationCodeClient, _super);
    function AuthorizationCodeClient(configuration) {
        var _this = _super.call(this, configuration) || this;
        // Flag to indicate if client is for hybrid spa auth code redemption
        _this.includeRedirectUri = true;
        return _this;
    }
    /**
     * Creates the URL of the authorization request letting the user input credentials and consent to the
     * application. The URL target the /authorize endpoint of the authority configured in the
     * application object.
     *
     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
     * acquireToken(AuthorizationCodeRequest)
     * @param request
     */
    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var queryString;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                queryString = this.createAuthCodeUrlQueryString(request);
                return [2 /*return*/, _url_UrlString_js__WEBPACK_IMPORTED_MODULE_1__.UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];
            });
        });
    };
    /**
     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
     * authorization_code_grant
     * @param request
     */
    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var reqTimestamp, response, responseHandler;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.info("in acquireToken call");
                        if (!request || _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmpty(request.code)) {
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createTokenRequestCannotBeMadeError();
                        }
                        reqTimestamp = _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_4__.TimeUtils.nowSeconds();
                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        // Validate response. This function throws a server error if an error is returned by the server.
                        responseHandler.validateTokenResponse(response.body);
                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Handles the hash fragment response from public client code request. Returns a code response used by
     * the client to exchange for a token in acquireToken.
     * @param hashFragment
     */
    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {
        // Handle responses.
        var responseHandler = new _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);
        // Deserialize hash fragment response parameters.
        var hashUrlString = new _url_UrlString_js__WEBPACK_IMPORTED_MODULE_1__.UrlString(hashFragment);
        // Deserialize hash fragment response parameters.
        var serverParams = _url_UrlString_js__WEBPACK_IMPORTED_MODULE_1__.UrlString.getDeserializedHash(hashUrlString.getHash());
        // Get code response
        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);
        // throw when there is no auth code in the response
        if (!serverParams.code) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createNoAuthCodeInServerResponseError();
        }
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, serverParams), { 
            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod
            code: serverParams.code });
    };
    /**
     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */
    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {
        // Throw error if logoutRequest is null/undefined
        if (!logoutRequest) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_6__.ClientConfigurationError.createEmptyLogoutRequestError();
        }
        var queryString = this.createLogoutUrlQueryString(logoutRequest);
        // Construct logout URI.
        return _url_UrlString_js__WEBPACK_IMPORTED_MODULE_1__.UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);
    };
    /**
     * Executes POST request to token endpoint
     * @param authority
     * @param request
     */
    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes,
                            claims: request.claims,
                            authenticationScheme: request.authenticationScheme,
                            resourceRequestMethod: request.resourceRequestMethod,
                            resourceRequestUri: request.resourceRequestUri,
                            shrClaims: request.shrClaims,
                            sshKid: request.sshKid
                        };
                        return [4 /*yield*/, this.createTokenRequestBody(request)];
                    case 1:
                        requestBody = _a.sent();
                        queryParameters = this.createTokenQueryParameters(request);
                        ccsCredential = undefined;
                        if (request.clientInfo) {
                            try {
                                clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_7__.buildClientInfo)(request.clientInfo, this.cryptoUtils);
                                ccsCredential = {
                                    credential: "" + clientInfo.uid + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,
                                    type: _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_9__.CcsCredentialType.HOME_ACCOUNT_ID
                                };
                            }
                            catch (e) {
                                this.logger.verbose("Could not parse client info for CCS Header: " + e);
                            }
                        }
                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);
                        endpoint = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + "?" + queryParameters;
                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                }
            });
        });
    };
    /**
     * Creates query string for the /token request
     * @param request
     */
    AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {
        var parameterBuilder = new _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();
        if (request.tokenQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Generates a map for all the params to be sent to the service
     * @param request
     */
    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;
            var _a;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parameterBuilder = new _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        /*
                         * For hybrid spa flow, there will be a code but no verifier
                         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI
                         */
                        if (!this.includeRedirectUri) {
                            // Just validate
                            _request_RequestValidator_js__WEBPACK_IMPORTED_MODULE_11__.RequestValidator.validateRedirectUri(request.redirectUri);
                        }
                        else {
                            // Validate and include redirect uri
                            parameterBuilder.addRedirectUri(request.redirectUri);
                        }
                        // Add scope array, parameter builder will add default scopes and dedupe
                        parameterBuilder.addScopes(request.scopes);
                        // add code: user set, not validated
                        parameterBuilder.addAuthorizationCode(request.code);
                        // Add library metadata
                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                        parameterBuilder.addThrottling();
                        if (this.serverTelemetryManager) {
                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                        }
                        // add code_verifier if passed
                        if (request.codeVerifier) {
                            parameterBuilder.addCodeVerifier(request.codeVerifier);
                        }
                        if (this.config.clientCredentials.clientSecret) {
                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        }
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        parameterBuilder.addGrantType(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.GrantType.AUTHORIZATION_CODE_GRANT);
                        parameterBuilder.addClientInfo();
                        if (!(request.authenticationScheme === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new _crypto_PopTokenGenerator_js__WEBPACK_IMPORTED_MODULE_12__.PopTokenGenerator(this.cryptoUtils);
                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                    case 1:
                        cnfString = _b.sent();
                        parameterBuilder.addPopToken(cnfString);
                        return [3 /*break*/, 3];
                    case 2:
                        if (request.authenticationScheme === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.SSH) {
                            if (request.sshJwk) {
                                parameterBuilder.addSshJwk(request.sshJwk);
                            }
                            else {
                                throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_6__.ClientConfigurationError.createMissingSshJwkError();
                            }
                        }
                        _b.label = 3;
                    case 3:
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        }
                        ccsCred = undefined;
                        if (request.clientInfo) {
                            try {
                                clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_7__.buildClientInfo)(request.clientInfo, this.cryptoUtils);
                                ccsCred = {
                                    credential: "" + clientInfo.uid + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,
                                    type: _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_9__.CcsCredentialType.HOME_ACCOUNT_ID
                                };
                            }
                            catch (e) {
                                this.logger.verbose("Could not parse client info for CCS Header: " + e);
                            }
                        }
                        else {
                            ccsCred = request.ccsCredential;
                        }
                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request
                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {
                            switch (ccsCred.type) {
                                case _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_9__.CcsCredentialType.HOME_ACCOUNT_ID:
                                    try {
                                        clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_7__.buildClientInfoFromHomeAccountId)(ccsCred.credential);
                                        parameterBuilder.addCcsOid(clientInfo);
                                    }
                                    catch (e) {
                                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                    }
                                    break;
                                case _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_9__.CcsCredentialType.UPN:
                                    parameterBuilder.addCcsUpn(ccsCred.credential);
                                    break;
                            }
                        }
                        if (request.tokenBodyParameters) {
                            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);
                        }
                        // Add hybrid spa parameters if not already provided
                        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.AADServerParamKeys.RETURN_SPA_CODE])) {
                            parameterBuilder.addExtraQueryParameters((_a = {},
                                _a[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.AADServerParamKeys.RETURN_SPA_CODE] = "1",
                                _a));
                        }
                        return [2 /*return*/, parameterBuilder.createQueryString()];
                }
            });
        });
    };
    /**
     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
     * @param request
     */
    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {
        var parameterBuilder = new _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        var requestScopes = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__spreadArrays)(request.scopes || [], request.extraScopesToConsent || []);
        parameterBuilder.addScopes(requestScopes);
        // validate the redirectUri (to be a non null value)
        parameterBuilder.addRedirectUri(request.redirectUri);
        // generate the correlationId if not set by the user and add
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        parameterBuilder.addCorrelationId(correlationId);
        // add response_mode. If not passed in it defaults to query.
        parameterBuilder.addResponseMode(request.responseMode);
        // add response_type = code
        parameterBuilder.addResponseTypeCode();
        // add library info parameters
        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
        // add client_info=1
        parameterBuilder.addClientInfo();
        if (request.codeChallenge && request.codeChallengeMethod) {
            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
        }
        if (request.prompt) {
            parameterBuilder.addPrompt(request.prompt);
        }
        if (request.domainHint) {
            parameterBuilder.addDomainHint(request.domainHint);
        }
        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object
        if (request.prompt !== _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.PromptValue.SELECT_ACCOUNT) {
            // AAD will throw if prompt=select_account is passed with an account hint
            if (request.sid && request.prompt === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.PromptValue.NONE) {
                // SessionID is only used in silent calls
                this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request");
                parameterBuilder.addSid(request.sid);
            }
            else if (request.account) {
                var accountSid = this.extractAccountSid(request.account);
                // If account and loginHint are provided, we will check account first for sid before adding loginHint
                if (accountSid && request.prompt === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__.PromptValue.NONE) {
                    // SessionId is only used in silent calls
                    this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account");
                    parameterBuilder.addSid(accountSid);
                    try {
                        var clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_7__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);
                        parameterBuilder.addCcsOid(clientInfo);
                    }
                    catch (e) {
                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                    }
                }
                else if (request.loginHint) {
                    this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request");
                    parameterBuilder.addLoginHint(request.loginHint);
                    parameterBuilder.addCcsUpn(request.loginHint);
                }
                else if (request.account.username) {
                    // Fallback to account username if provided
                    this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account");
                    parameterBuilder.addLoginHint(request.account.username);
                    try {
                        var clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_7__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);
                        parameterBuilder.addCcsOid(clientInfo);
                    }
                    catch (e) {
                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                    }
                }
            }
            else if (request.loginHint) {
                this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request");
                parameterBuilder.addLoginHint(request.loginHint);
                parameterBuilder.addCcsUpn(request.loginHint);
            }
        }
        else {
            this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");
        }
        if (request.nonce) {
            parameterBuilder.addNonce(request.nonce);
        }
        if (request.state) {
            parameterBuilder.addState(request.state);
        }
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        }
        if (request.extraQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * This API validates the `EndSessionRequest` and creates a URL
     * @param request
     */
    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {
        var parameterBuilder = new _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();
        if (request.postLogoutRedirectUri) {
            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);
        }
        if (request.correlationId) {
            parameterBuilder.addCorrelationId(request.correlationId);
        }
        if (request.idTokenHint) {
            parameterBuilder.addIdTokenHint(request.idTokenHint);
        }
        if (request.state) {
            parameterBuilder.addState(request.state);
        }
        if (request.logoutHint) {
            parameterBuilder.addLogoutHint(request.logoutHint);
        }
        if (request.extraQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.
     * @param account
     */
    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {
        if (account.idTokenClaims) {
            var tokenClaims = account.idTokenClaims;
            return tokenClaims.sid || null;
        }
        return null;
    };
    return AuthorizationCodeClient;
}(_BaseClient_js__WEBPACK_IMPORTED_MODULE_13__.BaseClient));


//# sourceMappingURL=AuthorizationCodeClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/client/BaseClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/BaseClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseClient": () => (/* binding */ BaseClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _config_ClientConfiguration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/ClientConfiguration.js */ "./node_modules/@azure/msal-common/dist/config/ClientConfiguration.js");
/* harmony import */ var _network_NetworkManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../network/NetworkManager.js */ "./node_modules/@azure/msal-common/dist/network/NetworkManager.js");
/* harmony import */ var _logger_Logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.js */ "./node_modules/@azure/msal-common/dist/logger/Logger.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.js */ "./node_modules/@azure/msal-common/dist/packageMetadata.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../account/CcsCredential.js */ "./node_modules/@azure/msal-common/dist/account/CcsCredential.js");
/* harmony import */ var _account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../account/ClientInfo.js */ "./node_modules/@azure/msal-common/dist/account/ClientInfo.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */











/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 */
var BaseClient = /** @class */ (function () {
    function BaseClient(configuration) {
        // Set the configuration
        this.config = (0,_config_ClientConfiguration_js__WEBPACK_IMPORTED_MODULE_0__.buildClientConfiguration)(configuration);
        // Initialize the logger
        this.logger = new _logger_Logger_js__WEBPACK_IMPORTED_MODULE_1__.Logger(this.config.loggerOptions, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_2__.name, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_2__.version);
        // Initialize crypto
        this.cryptoUtils = this.config.cryptoInterface;
        // Initialize storage interface
        this.cacheManager = this.config.storageInterface;
        // Set the network interface
        this.networkClient = this.config.networkInterface;
        // Set the NetworkManager
        this.networkManager = new _network_NetworkManager_js__WEBPACK_IMPORTED_MODULE_3__.NetworkManager(this.networkClient, this.cacheManager);
        // Set TelemetryManager
        this.serverTelemetryManager = this.config.serverTelemetryManager;
        // set Authority
        this.authority = this.config.authOptions.authority;
    }
    /**
     * Creates default headers for requests to token endpoint
     */
    BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {
        var headers = {};
        headers[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.CONTENT_TYPE] = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.Constants.URL_FORM_CONTENT_TYPE;
        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {
            switch (ccsCred.type) {
                case _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_5__.CcsCredentialType.HOME_ACCOUNT_ID:
                    try {
                        var clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_6__.buildClientInfoFromHomeAccountId)(ccsCred.credential);
                        headers[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.CCS_HEADER] = "Oid:" + clientInfo.uid + "@" + clientInfo.utid;
                    }
                    catch (e) {
                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                    }
                    break;
                case _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_5__.CcsCredentialType.UPN:
                    headers[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.CCS_HEADER] = "UPN: " + ccsCred.credential;
                    break;
            }
        }
        return headers;
    };
    /**
     * Http post to token endpoint
     * @param tokenEndpoint
     * @param queryString
     * @param headers
     * @param thumbprint
     */
    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function () {
            var response;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_7__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers, proxyUrl: this.config.systemOptions.proxyUrl })];
                    case 1:
                        response = _a.sent();
                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {
                            // Telemetry data successfully logged by server, clear Telemetry cache
                            this.config.serverTelemetryManager.clearTelemetryCache();
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Updates the authority object of the client. Endpoint discovery must be completed.
     * @param updatedAuthority
     */
    BaseClient.prototype.updateAuthority = function (updatedAuthority) {
        if (!updatedAuthority.discoveryComplete()) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_8__.ClientAuthError.createEndpointDiscoveryIncompleteError("Updated authority has not completed endpoint discovery.");
        }
        this.authority = updatedAuthority;
    };
    return BaseClient;
}());


//# sourceMappingURL=BaseClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RefreshTokenClient": () => (/* binding */ RefreshTokenClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _BaseClient_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./BaseClient.js */ "./node_modules/@azure/msal-common/dist/client/BaseClient.js");
/* harmony import */ var _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../request/RequestParameterBuilder.js */ "./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../response/ResponseHandler.js */ "./node_modules/@azure/msal-common/dist/response/ResponseHandler.js");
/* harmony import */ var _crypto_PopTokenGenerator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.js */ "./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _error_ServerError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ServerError.js */ "./node_modules/@azure/msal-common/dist/error/ServerError.js");
/* harmony import */ var _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/TimeUtils.js */ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js");
/* harmony import */ var _url_UrlString_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../url/UrlString.js */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../account/CcsCredential.js */ "./node_modules/@azure/msal-common/dist/account/CcsCredential.js");
/* harmony import */ var _account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../account/ClientInfo.js */ "./node_modules/@azure/msal-common/dist/account/ClientInfo.js");
/* harmony import */ var _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.js */ "./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */

















/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * OAuth2.0 refresh token client
 */
var RefreshTokenClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(RefreshTokenClient, _super);
    function RefreshTokenClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    RefreshTokenClient.prototype.acquireToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var reqTimestamp, response, responseHandler;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reqTimestamp = _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_1__.TimeUtils.nowSeconds();
                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_2__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        responseHandler.validateTokenResponse(response.body);
                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];
                }
            });
        });
    };
    /**
     * Gets cached refresh token and attaches to request, then calls acquireToken API
     * @param request
     */
    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                // Cannot renew token if no request object is given.
                if (!request) {
                    throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__.ClientConfigurationError.createEmptyTokenRequestError();
                }
                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                if (!request.account) {
                    throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createNoAccountInSilentRequestError();
                }
                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);
                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                if (isFOCI) {
                    try {
                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];
                    }
                    catch (e) {
                        noFamilyRTInCache = e instanceof _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_5__.InteractionRequiredAuthError && e.errorCode === _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_5__.InteractionRequiredAuthErrorMessage.noTokensFoundError.code;
                        clientMismatchErrorWithFamilyRT = e instanceof _error_ServerError_js__WEBPACK_IMPORTED_MODULE_6__.ServerError && e.errorCode === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__.Errors.INVALID_GRANT_ERROR && e.subError === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__.Errors.CLIENT_MISMATCH_ERROR;
                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {
                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                            // throw in all other cases
                        }
                        else {
                            throw e;
                        }
                    }
                }
                // fall back to application refresh token acquisition
                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
            });
        });
    };
    /**
     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
     * @param request
     */
    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var refreshToken, refreshTokenRequest;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);
                // no refresh Token
                if (!refreshToken) {
                    throw _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_5__.InteractionRequiredAuthError.createNoTokensFoundError();
                }
                refreshTokenRequest = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.BEARER, ccsCredential: {
                        credential: request.account.homeAccountId,
                        type: _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_8__.CcsCredentialType.HOME_ACCOUNT_ID
                    } });
                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];
            });
        });
    };
    /**
     * Constructs the network message and makes a NW call to the underlying secure token service
     * @param request
     * @param authority
     */
    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var requestBody, queryParameters, headers, thumbprint, endpoint;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];
                    case 1:
                        requestBody = _a.sent();
                        queryParameters = this.createTokenQueryParameters(request);
                        headers = this.createTokenRequestHeaders(request.ccsCredential);
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes,
                            claims: request.claims,
                            authenticationScheme: request.authenticationScheme,
                            resourceRequestMethod: request.resourceRequestMethod,
                            resourceRequestUri: request.resourceRequestUri,
                            shrClaims: request.shrClaims,
                            sshKid: request.sshKid
                        };
                        endpoint = _url_UrlString_js__WEBPACK_IMPORTED_MODULE_9__.UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);
                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                }
            });
        });
    };
    /**
     * Creates query string for the /token request
     * @param request
     */
    RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {
        var parameterBuilder = new _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();
        if (request.tokenQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Helper function to create the token request body
     * @param request
     */
    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, cnfString, clientInfo;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameterBuilder = new _request_RequestParameterBuilder_js__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        parameterBuilder.addScopes(request.scopes);
                        parameterBuilder.addGrantType(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__.GrantType.REFRESH_TOKEN_GRANT);
                        parameterBuilder.addClientInfo();
                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                        parameterBuilder.addThrottling();
                        if (this.serverTelemetryManager) {
                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                        }
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        parameterBuilder.addRefreshToken(request.refreshToken);
                        if (this.config.clientCredentials.clientSecret) {
                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        }
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        if (!(request.authenticationScheme === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new _crypto_PopTokenGenerator_js__WEBPACK_IMPORTED_MODULE_11__.PopTokenGenerator(this.cryptoUtils);
                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                    case 1:
                        cnfString = _a.sent();
                        parameterBuilder.addPopToken(cnfString);
                        return [3 /*break*/, 3];
                    case 2:
                        if (request.authenticationScheme === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.SSH) {
                            if (request.sshJwk) {
                                parameterBuilder.addSshJwk(request.sshJwk);
                            }
                            else {
                                throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__.ClientConfigurationError.createMissingSshJwkError();
                            }
                        }
                        _a.label = 3;
                    case 3:
                        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_12__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        }
                        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {
                            switch (request.ccsCredential.type) {
                                case _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_8__.CcsCredentialType.HOME_ACCOUNT_ID:
                                    try {
                                        clientInfo = (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_13__.buildClientInfoFromHomeAccountId)(request.ccsCredential.credential);
                                        parameterBuilder.addCcsOid(clientInfo);
                                    }
                                    catch (e) {
                                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                    }
                                    break;
                                case _account_CcsCredential_js__WEBPACK_IMPORTED_MODULE_8__.CcsCredentialType.UPN:
                                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);
                                    break;
                            }
                        }
                        return [2 /*return*/, parameterBuilder.createQueryString()];
                }
            });
        });
    };
    return RefreshTokenClient;
}(_BaseClient_js__WEBPACK_IMPORTED_MODULE_14__.BaseClient));


//# sourceMappingURL=RefreshTokenClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/client/SilentFlowClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/SilentFlowClient.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SilentFlowClient": () => (/* binding */ SilentFlowClient)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _BaseClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./BaseClient.js */ "./node_modules/@azure/msal-common/dist/client/BaseClient.js");
/* harmony import */ var _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../account/AuthToken.js */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/* harmony import */ var _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/TimeUtils.js */ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js");
/* harmony import */ var _RefreshTokenClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RefreshTokenClient.js */ "./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../response/ResponseHandler.js */ "./node_modules/@azure/msal-common/dist/response/ResponseHandler.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */











/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentFlowClient = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(SilentFlowClient, _super);
    function SilentFlowClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
     * the given token and returns the renewed token
     * @param request
     */
    SilentFlowClient.prototype.acquireToken = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var e_1, refreshTokenClient;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.acquireCachedToken(request)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError && e_1.errorCode === _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthErrorMessage.tokenRefreshRequired.code) {
                            refreshTokenClient = new _RefreshTokenClient_js__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config);
                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];
                        }
                        else {
                            throw e_1;
                        }
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves token from cache or throws an error if it must be refreshed.
     * @param request
     */
    SilentFlowClient.prototype.acquireCachedToken = function (request) {
        var _a, _b, _c, _d;
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var environment, cacheRecord;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        // Cannot renew token if no request object is given.
                        if (!request) {
                            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_3__.ClientConfigurationError.createEmptyTokenRequestError();
                        }
                        if (request.forceRefresh) {
                            // Must refresh due to present force_refresh flag.
                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.CacheOutcome.FORCE_REFRESH);
                            this.logger.info("SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.");
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createRefreshRequiredError();
                        }
                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                        if (!request.account) {
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createNoAccountInSilentRequestError();
                        }
                        environment = request.authority || this.authority.getPreferredCache();
                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, request, environment);
                        if (!cacheRecord.accessToken) {
                            // Must refresh due to non-existent access_token.
                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.CacheOutcome.NO_CACHED_ACCESS_TOKEN);
                            this.logger.info("SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.");
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createRefreshRequiredError();
                        }
                        else if (_utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_5__.TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||
                            _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_5__.TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                            // Must refresh due to expired access_token.
                            (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);
                            this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within " + this.config.systemOptions.tokenRenewalOffsetSeconds + " seconds.");
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createRefreshRequiredError();
                        }
                        else if (cacheRecord.accessToken.refreshOn && _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_5__.TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {
                            // Must refresh due to the refresh_in value.
                            (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_4__.CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);
                            this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.");
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError.createRefreshRequiredError();
                        }
                        if (this.config.serverTelemetryManager) {
                            this.config.serverTelemetryManager.incrementCacheHits();
                        }
                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];
                    case 1: return [2 /*return*/, _e.sent()];
                }
            });
        });
    };
    /**
     * Helper function to build response object from the CacheRecord
     * @param cacheRecord
     */
    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var idTokenObj;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (cacheRecord.idToken) {
                            idTokenObj = new _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_6__.AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);
                        }
                        return [4 /*yield*/, _response_ResponseHandler_js__WEBPACK_IMPORTED_MODULE_7__.ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SilentFlowClient;
}(_BaseClient_js__WEBPACK_IMPORTED_MODULE_8__.BaseClient));


//# sourceMappingURL=SilentFlowClient.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/config/ClientConfiguration.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/config/ClientConfiguration.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_SYSTEM_OPTIONS": () => (/* binding */ DEFAULT_SYSTEM_OPTIONS),
/* harmony export */   "buildClientConfiguration": () => (/* binding */ buildClientConfiguration)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _crypto_ICrypto_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/ICrypto.js */ "./node_modules/@azure/msal-common/dist/crypto/ICrypto.js");
/* harmony import */ var _error_AuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/* harmony import */ var _logger_Logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../logger/Logger.js */ "./node_modules/@azure/msal-common/dist/logger/Logger.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packageMetadata.js */ "./node_modules/@azure/msal-common/dist/packageMetadata.js");
/* harmony import */ var _authority_AuthorityOptions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../authority/AuthorityOptions.js */ "./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.js");
/* harmony import */ var _cache_CacheManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/CacheManager.js */ "./node_modules/@azure/msal-common/dist/cache/CacheManager.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */










/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Token renewal offset default in seconds
var DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
var DEFAULT_SYSTEM_OPTIONS = {
    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,
    preventCorsPreflight: false,
    proxyUrl: "",
};
var DEFAULT_LOGGER_IMPLEMENTATION = {
    loggerCallback: function () {
        // allow users to not set loggerCallback
    },
    piiLoggingEnabled: false,
    logLevel: _logger_Logger_js__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info,
    correlationId: ""
};
var DEFAULT_NETWORK_IMPLEMENTATION = {
    sendGetRequestAsync: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Network interface - sendGetRequestAsync() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_2__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    sendPostRequestAsync: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Network interface - sendPostRequestAsync() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_2__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};
var DEFAULT_LIBRARY_INFO = {
    sku: _utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.Constants.SKU,
    version: _packageMetadata_js__WEBPACK_IMPORTED_MODULE_4__.version,
    cpu: "",
    os: ""
};
var DEFAULT_CLIENT_CREDENTIALS = {
    clientSecret: "",
    clientAssertion: undefined
};
var DEFAULT_AZURE_CLOUD_OPTIONS = {
    azureCloudInstance: _authority_AuthorityOptions_js__WEBPACK_IMPORTED_MODULE_5__.AzureCloudInstance.None,
    tenant: "" + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.Constants.DEFAULT_COMMON_TENANT
};
/**
 * Function that sets the default options when not explicitly configured from app developer
 *
 * @param Configuration
 *
 * @returns Configuration
 */
function buildClientConfiguration(_a) {
    var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;
    var loggerOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption);
    return {
        authOptions: buildAuthOptions(userAuthOptions),
        systemOptions: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),
        loggerOptions: loggerOptions,
        storageInterface: storageImplementation || new _cache_CacheManager_js__WEBPACK_IMPORTED_MODULE_6__.DefaultStorageClass(userAuthOptions.clientId, _crypto_ICrypto_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION),
        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
        cryptoInterface: cryptoImplementation || _crypto_ICrypto_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION,
        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
        libraryInfo: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, DEFAULT_LIBRARY_INFO), libraryInfo),
        serverTelemetryManager: serverTelemetryManager || null,
        persistencePlugin: persistencePlugin || null,
        serializableCache: serializableCache || null
    };
}
/**
 * Construct authoptions from the client and platform passed values
 * @param authOptions
 */
function buildAuthOptions(authOptions) {
    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({ clientCapabilities: [], azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS }, authOptions);
}


//# sourceMappingURL=ClientConfiguration.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/crypto/ICrypto.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/ICrypto.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_CRYPTO_IMPLEMENTATION": () => (/* binding */ DEFAULT_CRYPTO_IMPLEMENTATION)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var DEFAULT_CRYPTO_IMPLEMENTATION = {
    createNewGuid: function () {
        var notImplErr = "Crypto interface - createNewGuid() has not been implemented";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
    },
    base64Decode: function () {
        var notImplErr = "Crypto interface - base64Decode() has not been implemented";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
    },
    base64Encode: function () {
        var notImplErr = "Crypto interface - base64Encode() has not been implemented";
        throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
    },
    generatePkceCodes: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Crypto interface - generatePkceCodes() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    getPublicKeyThumbprint: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Crypto interface - getPublicKeyThumbprint() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    removeTokenBindingKey: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Crypto interface - removeTokenBindingKey() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    clearKeystore: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Crypto interface - clearKeystore() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    signJwt: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Crypto interface - signJwt() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    hashString: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var notImplErr;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                notImplErr = "Crypto interface - hashString() has not been implemented";
                throw _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};


//# sourceMappingURL=ICrypto.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PopTokenGenerator": () => (/* binding */ PopTokenGenerator)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../account/AuthToken.js */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/* harmony import */ var _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TimeUtils.js */ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js");
/* harmony import */ var _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.js */ "./node_modules/@azure/msal-common/dist/url/UrlString.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var KeyLocation;
(function (KeyLocation) {
    KeyLocation["SW"] = "sw";
    KeyLocation["UHW"] = "uhw";
})(KeyLocation || (KeyLocation = {}));
var PopTokenGenerator = /** @class */ (function () {
    function PopTokenGenerator(cryptoUtils) {
        this.cryptoUtils = cryptoUtils;
    }
    PopTokenGenerator.prototype.generateCnf = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var reqCnf;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.generateKid(request)];
                    case 1:
                        reqCnf = _a.sent();
                        return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];
                }
            });
        });
    };
    PopTokenGenerator.prototype.generateKid = function (request) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var kidThumbprint;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];
                    case 1:
                        kidThumbprint = _a.sent();
                        return [2 /*return*/, {
                                kid: kidThumbprint,
                                xms_ksl: KeyLocation.SW
                            }];
                }
            });
        });
    };
    PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {
        var _a;
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var tokenClaims;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                tokenClaims = _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_1__.AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);
                if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {
                    throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__.ClientAuthError.createTokenClaimsRequiredError();
                }
                return [2 /*return*/, this.signPayload(accessToken, tokenClaims.cnf.kid, request)];
            });
        });
    };
    PopTokenGenerator.prototype.signPayload = function (payload, kid, request, claims) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;
                        resourceUrlString = (resourceRequestUri) ? new _url_UrlString_js__WEBPACK_IMPORTED_MODULE_3__.UrlString(resourceRequestUri) : undefined;
                        resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();
                        return [4 /*yield*/, this.cryptoUtils.signJwt((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({ at: payload, ts: _utils_TimeUtils_js__WEBPACK_IMPORTED_MODULE_4__.TimeUtils.nowSeconds(), m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(), u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort, nonce: shrNonce || this.cryptoUtils.createNewGuid(), p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath, q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined, client_claims: shrClaims || undefined }, claims), kid)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return PopTokenGenerator;
}());


//# sourceMappingURL=PopTokenGenerator.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/error/AuthError.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthError.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthError": () => (/* binding */ AuthError),
/* harmony export */   "AuthErrorMessage": () => (/* binding */ AuthErrorMessage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * AuthErrorMessage class containing string constants used by error codes and messages.
 */
var AuthErrorMessage = {
    unexpectedError: {
        code: "unexpected_error",
        desc: "Unexpected error in authentication."
    }
};
/**
 * General error class thrown by the MSAL.js library.
 */
var AuthError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(AuthError, _super);
    function AuthError(errorCode, errorMessage, suberror) {
        var _this = this;
        var errorString = errorMessage ? errorCode + ": " + errorMessage : errorCode;
        _this = _super.call(this, errorString) || this;
        Object.setPrototypeOf(_this, AuthError.prototype);
        _this.errorCode = errorCode || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;
        _this.errorMessage = errorMessage || "";
        _this.subError = suberror || "";
        _this.name = "AuthError";
        return _this;
    }
    AuthError.prototype.setCorrelationId = function (correlationId) {
        this.correlationId = correlationId;
    };
    /**
     * Creates an error that is thrown when something unexpected happens in the library.
     * @param errDesc
     */
    AuthError.createUnexpectedError = function (errDesc) {
        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
    };
    return AuthError;
}(Error));


//# sourceMappingURL=AuthError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthError.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientAuthError": () => (/* binding */ ClientAuthError),
/* harmony export */   "ClientAuthErrorMessage": () => (/* binding */ ClientAuthErrorMessage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _AuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ClientAuthErrorMessage class containing string constants used by error codes and messages.
 */
var ClientAuthErrorMessage = {
    clientInfoDecodingError: {
        code: "client_info_decoding_error",
        desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
    },
    clientInfoEmptyError: {
        code: "client_info_empty_error",
        desc: "The client info was empty. Please review the trace to determine the root cause."
    },
    tokenParsingError: {
        code: "token_parsing_error",
        desc: "Token cannot be parsed. Please review stack trace to determine root cause."
    },
    nullOrEmptyToken: {
        code: "null_or_empty_token",
        desc: "The token is null or empty. Please review the trace to determine the root cause."
    },
    endpointResolutionError: {
        code: "endpoints_resolution_error",
        desc: "Error: could not resolve endpoints. Please check network and try again."
    },
    networkError: {
        code: "network_error",
        desc: "Network request failed. Please check network trace to determine root cause."
    },
    unableToGetOpenidConfigError: {
        code: "openid_config_error",
        desc: "Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints."
    },
    hashNotDeserialized: {
        code: "hash_not_deserialized",
        desc: "The hash parameters could not be deserialized. Please review the trace to determine the root cause."
    },
    blankGuidGenerated: {
        code: "blank_guid_generated",
        desc: "The guid generated was blank. Please review the trace to determine the root cause."
    },
    invalidStateError: {
        code: "invalid_state",
        desc: "State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."
    },
    stateMismatchError: {
        code: "state_mismatch",
        desc: "State mismatch error. Please check your network. Continued requests may cause cache overflow."
    },
    stateNotFoundError: {
        code: "state_not_found",
        desc: "State not found"
    },
    nonceMismatchError: {
        code: "nonce_mismatch",
        desc: "Nonce mismatch error. This may be caused by a race condition in concurrent requests."
    },
    nonceNotFoundError: {
        code: "nonce_not_found",
        desc: "nonce not found"
    },
    noTokensFoundError: {
        code: "no_tokens_found",
        desc: "No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken()."
    },
    multipleMatchingTokens: {
        code: "multiple_matching_tokens",
        desc: "The cache contains multiple tokens satisfying the requirements. " +
            "Call AcquireToken again providing more requirements such as authority or account."
    },
    multipleMatchingAccounts: {
        code: "multiple_matching_accounts",
        desc: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"
    },
    multipleMatchingAppMetadata: {
        code: "multiple_matching_appMetadata",
        desc: "The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata"
    },
    tokenRequestCannotBeMade: {
        code: "request_cannot_be_made",
        desc: "Token request cannot be made without authorization code or refresh token."
    },
    appendEmptyScopeError: {
        code: "cannot_append_empty_scope",
        desc: "Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."
    },
    removeEmptyScopeError: {
        code: "cannot_remove_empty_scope",
        desc: "Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."
    },
    appendScopeSetError: {
        code: "cannot_append_scopeset",
        desc: "Cannot append ScopeSet due to error."
    },
    emptyInputScopeSetError: {
        code: "empty_input_scopeset",
        desc: "Empty input ScopeSet cannot be processed."
    },
    DeviceCodePollingCancelled: {
        code: "device_code_polling_cancelled",
        desc: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."
    },
    DeviceCodeExpired: {
        code: "device_code_expired",
        desc: "Device code is expired."
    },
    DeviceCodeUnknownError: {
        code: "device_code_unknown_error",
        desc: "Device code stopped polling for unknown reasons."
    },
    NoAccountInSilentRequest: {
        code: "no_account_in_silent_request",
        desc: "Please pass an account object, silent flow is not supported without account information"
    },
    invalidCacheRecord: {
        code: "invalid_cache_record",
        desc: "Cache record object was null or undefined."
    },
    invalidCacheEnvironment: {
        code: "invalid_cache_environment",
        desc: "Invalid environment when attempting to create cache entry"
    },
    noAccountFound: {
        code: "no_account_found",
        desc: "No account found in cache for given key."
    },
    CachePluginError: {
        code: "no cache plugin set on CacheManager",
        desc: "ICachePlugin needs to be set before using readFromStorage or writeFromStorage"
    },
    noCryptoObj: {
        code: "no_crypto_object",
        desc: "No crypto object detected. This is required for the following operation: "
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    unexpectedAccountType: {
        code: "unexpected_account_type",
        desc: "Unexpected account type."
    },
    unexpectedCredentialType: {
        code: "unexpected_credential_type",
        desc: "Unexpected credential type."
    },
    invalidAssertion: {
        code: "invalid_assertion",
        desc: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"
    },
    invalidClientCredential: {
        code: "invalid_client_credential",
        desc: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"
    },
    tokenRefreshRequired: {
        code: "token_refresh_required",
        desc: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."
    },
    userTimeoutReached: {
        code: "user_timeout_reached",
        desc: "User defined timeout for device code polling reached",
    },
    tokenClaimsRequired: {
        code: "token_claims_cnf_required_for_signedjwt",
        desc: "Cannot generate a POP jwt if the token_claims are not populated"
    },
    noAuthorizationCodeFromServer: {
        code: "authorization_code_missing_from_server_response",
        desc: "Server response does not contain an authorization code to proceed"
    },
    noAzureRegionDetected: {
        code: "no_azure_region_detected",
        desc: "No azure region was detected and no fallback was made available"
    },
    accessTokenEntityNullError: {
        code: "access_token_entity_null",
        desc: "Access token entity is null, please check logs and cache to ensure a valid access token is present."
    },
    bindingKeyNotRemovedError: {
        code: "binding_key_not_removed",
        desc: "Could not remove the credential's binding key from storage."
    },
    logoutNotSupported: {
        code: "end_session_endpoint_not_supported",
        desc: "Provided authority does not support logout."
    }
};
/**
 * Error thrown when there is an error in the client code running on the browser.
 */
var ClientAuthError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(ClientAuthError, _super);
    function ClientAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientAuthError";
        Object.setPrototypeOf(_this, ClientAuthError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when client info object doesn't decode correctly.
     * @param caughtError
     */
    ClientAuthError.createClientInfoDecodingError = function (caughtError) {
        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
    };
    /**
     * Creates an error thrown if the client info is empty.
     * @param rawClientInfo
     */
    ClientAuthError.createClientInfoEmptyError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, "" + ClientAuthErrorMessage.clientInfoEmptyError.desc);
    };
    /**
     * Creates an error thrown when the id token extraction errors out.
     * @param err
     */
    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {
        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + " Failed with error: " + caughtExtractionError);
    };
    /**
     * Creates an error thrown when the id token string is null or empty.
     * @param invalidRawTokenString
     */
    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {
        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + " Raw Token Value: " + invalidRawTokenString);
    };
    /**
     * Creates an error thrown when the endpoint discovery doesn't complete correctly.
     */
    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + " Detail: " + errDetail);
    };
    /**
     * Creates an error thrown when the fetch client throws
     */
    ClientAuthError.createNetworkError = function (endpoint, errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + " | Fetch client threw: " + errDetail + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data
     */
    ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + " Attempted to retrieve endpoints from: " + errDetail);
    };
    /**
     * Creates an error thrown when the hash cannot be deserialized.
     * @param hashParamObj
     */
    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {
        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + " Given Object: " + hashParamObj);
    };
    /**
     * Creates an error thrown when the state cannot be parsed.
     * @param invalidState
     */
    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {
        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " Invalid State: " + invalidState + ", Root Err: " + errorString);
    };
    /**
     * Creates an error thrown when two states do not match.
     */
    ClientAuthError.createStateMismatchError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);
    };
    /**
     * Creates an error thrown when the state is not present
     * @param missingState
     */
    ClientAuthError.createStateNotFoundError = function (missingState) {
        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + ":  " + missingState);
    };
    /**
     * Creates an error thrown when the nonce does not match.
     */
    ClientAuthError.createNonceMismatchError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);
    };
    /**
     * Creates an error thrown when the mnonce is not present
     * @param missingNonce
     */
    ClientAuthError.createNonceNotFoundError = function (missingNonce) {
        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + ":  " + missingNonce);
    };
    /**
     * Throws error when multiple tokens are in cache.
     */
    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
    };
    /**
     * Throws error when multiple accounts are in cache for the given params
     */
    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);
    };
    /**
     * Throws error when multiple appMetada are in cache for the given clientId.
     */
    ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);
    };
    /**
     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.
     */
    ClientAuthError.createTokenRequestCannotBeMadeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */
    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {
        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */
    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {
        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append null or empty ScopeSet.
     * @param appendError
     */
    ClientAuthError.createAppendScopeSetError = function (appendError) {
        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + " Detail Error: " + appendError);
    };
    /**
     * Throws error if ScopeSet is null or undefined.
     * @param givenScopeSet
     */
    ClientAuthError.createEmptyInputScopeSetError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, "" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);
    };
    /**
     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow
     */
    ClientAuthError.createDeviceCodeCancelledError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, "" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);
    };
    /**
     * Throws error if device code is expired
     */
    ClientAuthError.createDeviceCodeExpiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, "" + ClientAuthErrorMessage.DeviceCodeExpired.desc);
    };
    /**
     * Throws error if device code is expired
     */
    ClientAuthError.createDeviceCodeUnknownError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, "" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);
    };
    /**
     * Throws error when silent requests are made without an account object
     */
    ClientAuthError.createNoAccountInSilentRequestError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, "" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);
    };
    /**
     * Throws error when cache record is null or undefined.
     */
    ClientAuthError.createNullOrUndefinedCacheRecord = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);
    };
    /**
     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object
     */
    ClientAuthError.createInvalidCacheEnvironmentError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);
    };
    /**
     * Throws error when account is not found in cache.
     */
    ClientAuthError.createNoAccountFoundError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);
    };
    /**
     * Throws error if ICachePlugin not set on CacheManager.
     */
    ClientAuthError.createCachePluginError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, "" + ClientAuthErrorMessage.CachePluginError.desc);
    };
    /**
     * Throws error if crypto object not found.
     * @param operationName
     */
    ClientAuthError.createNoCryptoObjectError = function (operationName) {
        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, "" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);
    };
    /**
     * Throws error if cache type is invalid.
     */
    ClientAuthError.createInvalidCacheTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, "" + ClientAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Throws error if unexpected account type.
     */
    ClientAuthError.createUnexpectedAccountTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, "" + ClientAuthErrorMessage.unexpectedAccountType.desc);
    };
    /**
     * Throws error if unexpected credential type.
     */
    ClientAuthError.createUnexpectedCredentialTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, "" + ClientAuthErrorMessage.unexpectedCredentialType.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */
    ClientAuthError.createInvalidAssertionError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, "" + ClientAuthErrorMessage.invalidAssertion.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */
    ClientAuthError.createInvalidCredentialError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, "" + ClientAuthErrorMessage.invalidClientCredential.desc);
    };
    /**
     * Throws error if token cannot be retrieved from cache due to refresh being required.
     */
    ClientAuthError.createRefreshRequiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);
    };
    /**
     * Throws error if the user defined timeout is reached.
     */
    ClientAuthError.createUserTimeoutReachedError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);
    };
    /*
     * Throws error if token claims are not populated for a signed jwt generation
     */
    ClientAuthError.createTokenClaimsRequiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);
    };
    /**
     * Throws error when the authorization code is missing from the server response
     */
    ClientAuthError.createNoAuthCodeInServerResponseError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);
    };
    ClientAuthError.createBindingKeyNotRemovedError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);
    };
    /**
     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint
     */
    ClientAuthError.createLogoutNotSupportedError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);
    };
    return ClientAuthError;
}(_AuthError_js__WEBPACK_IMPORTED_MODULE_1__.AuthError));


//# sourceMappingURL=ClientAuthError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientConfigurationError": () => (/* binding */ ClientConfigurationError),
/* harmony export */   "ClientConfigurationErrorMessage": () => (/* binding */ ClientConfigurationErrorMessage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
 */
var ClientConfigurationErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    claimsRequestParsingError: {
        code: "claims_request_parsing_error",
        desc: "Could not parse the given claims request object."
    },
    authorityUriInsecure: {
        code: "authority_uri_insecure",
        desc: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"
    },
    urlParseError: {
        code: "url_parse_error",
        desc: "URL could not be parsed into appropriate segments."
    },
    urlEmptyError: {
        code: "empty_url_error",
        desc: "URL was empty or null."
    },
    emptyScopesError: {
        code: "empty_input_scopes_error",
        desc: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."
    },
    nonArrayScopesError: {
        code: "nonarray_input_scopes_error",
        desc: "Scopes cannot be passed as non-array."
    },
    clientIdSingleScopeError: {
        code: "clientid_input_scopes_error",
        desc: "Client ID can only be provided as a single scope."
    },
    invalidPrompt: {
        code: "invalid_prompt_value",
        desc: "Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest",
    },
    invalidClaimsRequest: {
        code: "invalid_claims",
        desc: "Given claims parameter must be a stringified JSON object."
    },
    tokenRequestEmptyError: {
        code: "token_request_empty",
        desc: "Token request was empty and not found in cache."
    },
    logoutRequestEmptyError: {
        code: "logout_request_empty",
        desc: "The logout request was null or undefined."
    },
    invalidCodeChallengeMethod: {
        code: "invalid_code_challenge_method",
        desc: "code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\"."
    },
    invalidCodeChallengeParams: {
        code: "pkce_params_missing",
        desc: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"
    },
    invalidCloudDiscoveryMetadata: {
        code: "invalid_cloud_discovery_metadata",
        desc: "Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields"
    },
    invalidAuthorityMetadata: {
        code: "invalid_authority_metadata",
        desc: "Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields."
    },
    untrustedAuthority: {
        code: "untrusted_authority",
        desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."
    },
    invalidAzureCloudInstance: {
        code: "invalid_azure_cloud_instance",
        desc: "Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values"
    },
    missingSshJwk: {
        code: "missing_ssh_jwk",
        desc: "Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme."
    },
    missingSshKid: {
        code: "missing_ssh_kid",
        desc: "Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme."
    },
    missingNonceAuthenticationHeader: {
        code: "missing_nonce_authentication_header",
        desc: "Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce."
    },
    invalidAuthenticationHeader: {
        code: "invalid_authentication_header",
        desc: "Invalid authentication header provided"
    }
};
/**
 * Error thrown when there is an error in configuration of the MSAL.js library.
 */
var ClientConfigurationError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(ClientConfigurationError, _super);
    function ClientConfigurationError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientConfigurationError";
        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */
    ClientConfigurationError.createRedirectUriEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */
    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the claims request could not be successfully parsed
     */
    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
    };
    /**
     * Creates an error thrown if authority uri is given an insecure protocol.
     * @param urlString
     */
    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + " Given URI: " + urlString);
    };
    /**
     * Creates an error thrown if URL string does not parse into separate segments.
     * @param urlString
     */
    ClientConfigurationError.createUrlParseError = function (urlParseError) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + " Given Error: " + urlParseError);
    };
    /**
     * Creates an error thrown if URL string is empty or null.
     * @param urlString
     */
    ClientConfigurationError.createUrlEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);
    };
    /**
     * Error thrown when scopes are empty.
     * @param scopesValue
     */
    ClientConfigurationError.createEmptyScopesArrayError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, "" + ClientConfigurationErrorMessage.emptyScopesError.desc);
    };
    /**
     * Error thrown when client id scope is not provided as single scope.
     * @param inputScopes
     */
    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when prompt is not an allowed type.
     * @param promptValue
     */
    ClientConfigurationError.createInvalidPromptError = function (promptValue) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
    };
    /**
     * Creates error thrown when claims parameter is not a stringified JSON object
     */
    ClientConfigurationError.createInvalidClaimsRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */
    ClientConfigurationError.createEmptyLogoutRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */
    ClientConfigurationError.createEmptyTokenRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);
    };
    /**
     * Throws error when an invalid code_challenge_method is passed by the user
     */
    ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);
    };
    /**
     * Throws error when both params: code_challenge and code_challenge_method are not passed together
     */
    ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */
    ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */
    ClientConfigurationError.createInvalidAuthorityMetadataError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);
    };
    /**
     * Throws error when provided authority is not a member of the trusted host list
     */
    ClientConfigurationError.createUntrustedAuthorityError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);
    };
    /**
     * Throws error when the AzureCloudInstance is set to an invalid value
     */
    ClientConfigurationError.createInvalidAzureCloudInstanceError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);
    };
    /**
     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request
     */
    ClientConfigurationError.createMissingSshJwkError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);
    };
    /**
     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request
     */
    ClientConfigurationError.createMissingSshKidError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);
    };
    /**
     * Throws error when provided headers don't contain a header that a server nonce can be extracted from
     */
    ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);
    };
    /**
     * Throws error when a provided header is invalid in any way
     */
    ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + ". Invalid header: " + invalidHeaderName + ". Details: " + details);
    };
    return ClientConfigurationError;
}(_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_1__.ClientAuthError));


//# sourceMappingURL=ClientConfigurationError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractionRequiredAuthError": () => (/* binding */ InteractionRequiredAuthError),
/* harmony export */   "InteractionRequiredAuthErrorMessage": () => (/* binding */ InteractionRequiredAuthErrorMessage),
/* harmony export */   "InteractionRequiredAuthSubErrorMessage": () => (/* binding */ InteractionRequiredAuthSubErrorMessage),
/* harmony export */   "InteractionRequiredServerErrorMessage": () => (/* binding */ InteractionRequiredServerErrorMessage)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _AuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required
 */
var InteractionRequiredServerErrorMessage = [
    "interaction_required",
    "consent_required",
    "login_required"
];
var InteractionRequiredAuthSubErrorMessage = [
    "message_only",
    "additional_action",
    "basic_action",
    "user_password_expired",
    "consent_required"
];
/**
 * Interaction required errors defined by the SDK
 */
var InteractionRequiredAuthErrorMessage = {
    noTokensFoundError: {
        code: "no_tokens_found",
        desc: "No refresh token found in the cache. Please sign-in."
    }
};
/**
 * Error thrown when user interaction is required.
 */
var InteractionRequiredAuthError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(InteractionRequiredAuthError, _super);
    function InteractionRequiredAuthError(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "InteractionRequiredAuthError";
        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
        return _this;
    }
    /**
     * Helper function used to determine if an error thrown by the server requires interaction to resolve
     * @param errorCode
     * @param errorString
     * @param subError
     */
    InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {
        var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;
        var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
        var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(function (irErrorCode) {
            return errorString.indexOf(irErrorCode) > -1;
        });
        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
    };
    /**
     * Creates an error thrown when the authorization code required for a token request is null or empty.
     */
    InteractionRequiredAuthError.createNoTokensFoundError = function () {
        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);
    };
    return InteractionRequiredAuthError;
}(_AuthError_js__WEBPACK_IMPORTED_MODULE_1__.AuthError));


//# sourceMappingURL=InteractionRequiredAuthError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/error/ServerError.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ServerError.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServerError": () => (/* binding */ ServerError)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _AuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Error thrown when there is an error with the server code, for example, unavailability.
 */
var ServerError = /** @class */ (function (_super) {
    (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__extends)(ServerError, _super);
    function ServerError(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "ServerError";
        Object.setPrototypeOf(_this, ServerError.prototype);
        return _this;
    }
    return ServerError;
}(_AuthError_js__WEBPACK_IMPORTED_MODULE_1__.AuthError));


//# sourceMappingURL=ServerError.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/logger/Logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/logger/Logger.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LogLevel": () => (/* binding */ LogLevel),
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Log message level.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warning"] = 1] = "Warning";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    LogLevel[LogLevel["Trace"] = 4] = "Trace";
})(LogLevel || (LogLevel = {}));
/**
 * Class which facilitates logging of messages to a specific place.
 */
var Logger = /** @class */ (function () {
    function Logger(loggerOptions, packageName, packageVersion) {
        // Current log level, defaults to info.
        this.level = LogLevel.Info;
        var defaultLoggerCallback = function () {
            return;
        };
        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;
        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;
        this.level = typeof (loggerOptions.logLevel) === "number" ? loggerOptions.logLevel : LogLevel.Info;
        this.correlationId = loggerOptions.correlationId || "";
        this.packageName = packageName || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
        this.packageVersion = packageVersion || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
    }
    /**
     * Create new Logger with existing configurations.
     */
    Logger.prototype.clone = function (packageName, packageVersion, correlationId) {
        return new Logger({ loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId }, packageName, packageVersion);
    };
    /**
     * Log message with required options.
     */
    Logger.prototype.logMessage = function (logMessage, options) {
        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {
            return;
        }
        var timestamp = new Date().toUTCString();
        // Add correlationId to logs if set, correlationId provided on log messages take precedence
        var logHeader;
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(options.correlationId)) {
            logHeader = "[" + timestamp + "] : [" + options.correlationId + "]";
        }
        else if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(this.correlationId)) {
            logHeader = "[" + timestamp + "] : [" + this.correlationId + "]";
        }
        else {
            logHeader = "[" + timestamp + "]";
        }
        var log = logHeader + " : " + this.packageName + "@" + this.packageVersion + " : " + LogLevel[options.logLevel] + " - " + logMessage;
        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": ""}${options.context ? `:${options.context}` : ""}`)(logMessage);
        this.executeCallback(options.logLevel, log, options.containsPii || false);
    };
    /**
     * Execute callback with message.
     */
    Logger.prototype.executeCallback = function (level, message, containsPii) {
        if (this.localCallback) {
            this.localCallback(level, message, containsPii);
        }
    };
    /**
     * Logs error messages.
     */
    Logger.prototype.error = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Error,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs error messages with PII.
     */
    Logger.prototype.errorPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Error,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages.
     */
    Logger.prototype.warning = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Warning,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages with PII.
     */
    Logger.prototype.warningPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Warning,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages.
     */
    Logger.prototype.info = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Info,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages with PII.
     */
    Logger.prototype.infoPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Info,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages.
     */
    Logger.prototype.verbose = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Verbose,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages with PII.
     */
    Logger.prototype.verbosePii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Verbose,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs trace messages.
     */
    Logger.prototype.trace = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Trace,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs trace messages with PII.
     */
    Logger.prototype.tracePii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Trace,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Returns whether PII Logging is enabled or not.
     */
    Logger.prototype.isPiiLoggingEnabled = function () {
        return this.piiLoggingEnabled || false;
    };
    return Logger;
}());


//# sourceMappingURL=Logger.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/network/INetworkModule.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/INetworkModule.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StubbedNetworkModule": () => (/* binding */ StubbedNetworkModule)
/* harmony export */ });
/* harmony import */ var _error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var StubbedNetworkModule = {
    sendGetRequestAsync: function () {
        var notImplErr = "Network interface - sendGetRequestAsync() has not been implemented for the Network interface.";
        return Promise.reject(_error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr));
    },
    sendPostRequestAsync: function () {
        var notImplErr = "Network interface - sendPostRequestAsync() has not been implemented for the Network interface.";
        return Promise.reject(_error_AuthError_js__WEBPACK_IMPORTED_MODULE_0__.AuthError.createUnexpectedError(notImplErr));
    }
};


//# sourceMappingURL=INetworkModule.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/network/NetworkManager.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/NetworkManager.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkManager": () => (/* binding */ NetworkManager)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _ThrottlingUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ThrottlingUtils.js */ "./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _error_AuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/AuthError.js */ "./node_modules/@azure/msal-common/dist/error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */






/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var NetworkManager = /** @class */ (function () {
    function NetworkManager(networkClient, cacheManager) {
        this.networkClient = networkClient;
        this.cacheManager = cacheManager;
    }
    /**
     * Wraps sendPostRequestAsync with necessary preflight and postflight logic
     * @param thumbprint
     * @param tokenEndpoint
     * @param options
     */
    NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var response, e_1;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _ThrottlingUtils_js__WEBPACK_IMPORTED_MODULE_1__.ThrottlingUtils.preProcess(this.cacheManager, thumbprint);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1 instanceof _error_AuthError_js__WEBPACK_IMPORTED_MODULE_2__.AuthError) {
                            throw e_1;
                        }
                        else {
                            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createNetworkError(tokenEndpoint, e_1);
                        }
                    case 4:
                        _ThrottlingUtils_js__WEBPACK_IMPORTED_MODULE_1__.ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return NetworkManager;
}());


//# sourceMappingURL=NetworkManager.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ThrottlingUtils": () => (/* binding */ ThrottlingUtils)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _error_ServerError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ServerError.js */ "./node_modules/@azure/msal-common/dist/error/ServerError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ThrottlingUtils = /** @class */ (function () {
    function ThrottlingUtils() {
    }
    /**
     * Prepares a RequestThumbprint to be stored as a key.
     * @param thumbprint
     */
    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {
        return _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX + "." + JSON.stringify(thumbprint);
    };
    /**
     * Performs necessary throttling checks before a network request.
     * @param cacheManager
     * @param thumbprint
     */
    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {
        var _a;
        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);
        var value = cacheManager.getThrottlingCache(key);
        if (value) {
            if (value.throttleTime < Date.now()) {
                cacheManager.removeItem(key, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheSchemaType.THROTTLING);
                return;
            }
            throw new _error_ServerError_js__WEBPACK_IMPORTED_MODULE_1__.ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(" ")) || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING, value.errorMessage, value.subError);
        }
    };
    /**
     * Performs necessary throttling checks after a network request.
     * @param cacheManager
     * @param thumbprint
     * @param response
     */
    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {
        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {
            var thumbprintValue = {
                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER])),
                error: response.body.error,
                errorCodes: response.body.error_codes,
                errorMessage: response.body.error_description,
                subError: response.body.suberror
            };
            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);
        }
    };
    /**
     * Checks a NetworkResponse object's status codes against 429 or 5xx
     * @param response
     */
    ThrottlingUtils.checkResponseStatus = function (response) {
        return response.status === 429 || response.status >= 500 && response.status < 600;
    };
    /**
     * Checks a NetworkResponse object's RetryAfter header
     * @param response
     */
    ThrottlingUtils.checkResponseForRetryAfter = function (response) {
        if (response.headers) {
            return response.headers.hasOwnProperty(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);
        }
        return false;
    };
    /**
     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
     * @param throttleTime
     */
    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {
        var time = throttleTime <= 0 ? 0 : throttleTime;
        var currentSeconds = Date.now() / 1000;
        return Math.floor(Math.min(currentSeconds + (time || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
    };
    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {
        var thumbprint = {
            clientId: clientId,
            authority: request.authority,
            scopes: request.scopes,
            homeAccountIdentifier: homeAccountIdentifier,
            claims: request.claims,
            authenticationScheme: request.authenticationScheme,
            resourceRequestMethod: request.resourceRequestMethod,
            resourceRequestUri: request.resourceRequestUri,
            shrClaims: request.shrClaims,
            sshKid: request.sshKid
        };
        var key = this.generateThrottlingStorageKey(thumbprint);
        return cacheManager.removeItem(key, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheSchemaType.THROTTLING);
    };
    return ThrottlingUtils;
}());


//# sourceMappingURL=ThrottlingUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/packageMetadata.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/packageMetadata.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => (/* binding */ name),
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/* eslint-disable header/header */
var name = "@azure/msal-common";
var version = "6.1.0";


//# sourceMappingURL=packageMetadata.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/request/AuthenticationHeaderParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/AuthenticationHeaderParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthenticationHeaderParser": () => (/* binding */ AuthenticationHeaderParser)
/* harmony export */ });
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */




/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This is a helper class that parses supported HTTP response authentication headers to extract and return
 * header challenge values that can be used outside the basic authorization flows.
 */
var AuthenticationHeaderParser = /** @class */ (function () {
    function AuthenticationHeaderParser(headers) {
        this.headers = headers;
    }
    /**
     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.
     * @returns
     */
    AuthenticationHeaderParser.prototype.getShrNonce = function () {
        // Attempt to parse nonce from Authentiacation-Info
        var authenticationInfo = this.headers[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.AuthenticationInfo];
        if (authenticationInfo) {
            var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);
            if (authenticationInfoChallenges.nextnonce) {
                return authenticationInfoChallenges.nextnonce;
            }
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInvalidAuthenticationHeaderError(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.AuthenticationInfo, "nextnonce challenge is missing.");
        }
        // Attempt to parse nonce from WWW-Authenticate
        var wwwAuthenticate = this.headers[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.WWWAuthenticate];
        if (wwwAuthenticate) {
            var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);
            if (wwwAuthenticateChallenges.nonce) {
                return wwwAuthenticateChallenges.nonce;
            }
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInvalidAuthenticationHeaderError(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.WWWAuthenticate, "nonce challenge is missing.");
        }
        // If neither header is present, throw missing headers error
        throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createMissingNonceAuthenticationHeadersError();
    };
    /**
     * Parses an HTTP header's challenge set into a key/value map.
     * @param header
     * @returns
     */
    AuthenticationHeaderParser.prototype.parseChallenges = function (header) {
        var schemeSeparator = header.indexOf(" ");
        var challenges = header.substr(schemeSeparator + 1).split(",");
        var challengeMap = {};
        challenges.forEach(function (challenge) {
            var _a = challenge.split("="), key = _a[0], value = _a[1];
            // Remove escaped quotation marks (', ") from challenge string to keep only the challenge value
            challengeMap[key] = unescape(value.replace(/['"]+/g, ""));
        });
        return challengeMap;
    };
    return AuthenticationHeaderParser;
}());


//# sourceMappingURL=AuthenticationHeaderParser.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RequestParameterBuilder": () => (/* binding */ RequestParameterBuilder)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _ScopeSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScopeSet.js */ "./node_modules/@azure/msal-common/dist/request/ScopeSet.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestValidator.js */ "./node_modules/@azure/msal-common/dist/request/RequestValidator.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */








/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RequestParameterBuilder = /** @class */ (function () {
    function RequestParameterBuilder() {
        this.parameters = new Map();
    }
    /**
     * add response_type = code
     */
    RequestParameterBuilder.prototype.addResponseTypeCode = function () {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.CODE_RESPONSE_TYPE));
    };
    /**
     * add response_mode. defaults to query.
     * @param responseMode
     */
    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ResponseMode.QUERY));
    };
    /**
     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
     * @param scopeSet
     * @param addOidcScopes
     */
    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {
        if (addOidcScopes === void 0) { addOidcScopes = true; }
        var requestScopes = addOidcScopes ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArrays)(scopes || [], _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.OIDC_DEFAULT_SCOPES) : scopes || [];
        var scopeSet = new _ScopeSet_js__WEBPACK_IMPORTED_MODULE_2__.ScopeSet(requestScopes);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
    };
    /**
     * add clientId
     * @param clientId
     */
    RequestParameterBuilder.prototype.addClientId = function (clientId) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
    };
    /**
     * add redirect_uri
     * @param redirectUri
     */
    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {
        _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add post logout redirectUri
     * @param redirectUri
     */
    RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {
        _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add id_token_hint to logout request
     * @param idTokenHint
     */
    RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));
    };
    /**
     * add domain_hint
     * @param domainHint
     */
    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
    };
    /**
     * add login_hint
     * @param loginHint
     */
    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
    };
    /**
     * Adds the CCS (Cache Credential Service) query parameter for login_hint
     * @param loginHint
     */
    RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.CCS_HEADER, encodeURIComponent("UPN:" + loginHint));
    };
    /**
     * Adds the CCS (Cache Credential Service) query parameter for account object
     * @param loginHint
     */
    RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.CCS_HEADER, encodeURIComponent("Oid:" + clientInfo.uid + "@" + clientInfo.utid));
    };
    /**
     * add sid
     * @param sid
     */
    RequestParameterBuilder.prototype.addSid = function (sid) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SSOTypes.SID, encodeURIComponent(sid));
    };
    /**
     * add claims
     * @param claims
     */
    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {
        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
        _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateClaims(mergedClaims);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
    };
    /**
     * add correlationId
     * @param correlationId
     */
    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
    };
    /**
     * add library info query params
     * @param libraryInfo
     */
    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {
        // Telemetry Info
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
    };
    /**
     * add prompt
     * @param prompt
     */
    RequestParameterBuilder.prototype.addPrompt = function (prompt) {
        _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validatePrompt(prompt);
        this.parameters.set("" + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
    };
    /**
     * add state
     * @param state
     */
    RequestParameterBuilder.prototype.addState = function (state) {
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmpty(state)) {
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.STATE, encodeURIComponent(state));
        }
    };
    /**
     * add nonce
     * @param nonce
     */
    RequestParameterBuilder.prototype.addNonce = function (nonce) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.NONCE, encodeURIComponent(nonce));
    };
    /**
     * add code_challenge and code_challenge_method
     * - throw if either of them are not passed
     * @param codeChallenge
     * @param codeChallengeMethod
     */
    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
        _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
        if (codeChallenge && codeChallengeMethod) {
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
        }
        else {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_5__.ClientConfigurationError.createInvalidCodeChallengeParamsError();
        }
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */
    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CODE, encodeURIComponent(code));
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */
    RequestParameterBuilder.prototype.addDeviceCode = function (code) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
    };
    /**
     * add the `refreshToken` passed by the user
     * @param refreshToken
     */
    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
    };
    /**
     * add the `code_verifier` passed by the user to exchange for a token
     * @param codeVerifier
     */
    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
    };
    /**
     * add client_secret
     * @param clientSecret
     */
    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
    };
    /**
     * add clientAssertion for confidential client flows
     * @param clientAssertion
     */
    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
    };
    /**
     * add clientAssertionType for confidential client flows
     * @param clientAssertionType
     */
    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
    };
    /**
     * add OBO assertion for confidential client flows
     * @param clientAssertion
     */
    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
    };
    /**
     * add grant type
     * @param grantType
     */
    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
    };
    /**
     * add grant type
     * @param grantType
     */
    RequestParameterBuilder.prototype.addGrantType = function (grantType) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
    };
    /**
     * add client info
     *
     */
    RequestParameterBuilder.prototype.addClientInfo = function () {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CLIENT_INFO, "1");
    };
    /**
     * add extraQueryParams
     * @param eQparams
     */
    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {
        var _this = this;
        _RequestValidator_js__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.sanitizeEQParams(eQparams, this.parameters);
        Object.keys(eQparams).forEach(function (key) {
            _this.parameters.set(key, eQparams[key]);
        });
    };
    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {
        var mergedClaims;
        // Parse provided claims into JSON object or initialize empty object
        if (!claims) {
            mergedClaims = {};
        }
        else {
            try {
                mergedClaims = JSON.parse(claims);
            }
            catch (e) {
                throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_5__.ClientConfigurationError.createInvalidClaimsRequestError();
            }
        }
        if (clientCapabilities && clientCapabilities.length > 0) {
            if (!mergedClaims.hasOwnProperty(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ClaimsRequestKeys.ACCESS_TOKEN)) {
                // Add access_token key to claims object
                mergedClaims[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ClaimsRequestKeys.ACCESS_TOKEN] = {};
            }
            // Add xms_cc claim with provided clientCapabilities to access_token key
            mergedClaims[_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ClaimsRequestKeys.ACCESS_TOKEN][_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ClaimsRequestKeys.XMS_CC] = {
                values: clientCapabilities
            };
        }
        return JSON.stringify(mergedClaims);
    };
    /**
     * adds `username` for Password Grant flow
     * @param username
     */
    RequestParameterBuilder.prototype.addUsername = function (username) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.PasswordGrantConstants.username, username);
    };
    /**
     * adds `password` for Password Grant flow
     * @param password
     */
    RequestParameterBuilder.prototype.addPassword = function (password) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.PasswordGrantConstants.password, password);
    };
    /**
     * add pop_jwk to query params
     * @param cnfString
     */
    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmpty(cnfString)) {
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.TOKEN_TYPE, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.POP);
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
        }
    };
    /**
     * add SSH JWK and key ID to query params
     */
    RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmpty(sshJwkString)) {
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.TOKEN_TYPE, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.SSH);
            this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));
        }
    };
    /**
     * add server telemetry fields
     * @param serverTelemetryManager
     */
    RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());
    };
    /**
     * Adds parameter that indicates to the server that throttling is supported
     */
    RequestParameterBuilder.prototype.addThrottling = function () {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.X_MS_LIB_CAPABILITY, _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);
    };
    /**
     * Adds logout_hint parameter for "silent" logout which prevent server account picker
     */
    RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {
        this.parameters.set(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));
    };
    /**
     * Utility to create a URL from the params map
     */
    RequestParameterBuilder.prototype.createQueryString = function () {
        var queryParameterArray = new Array();
        this.parameters.forEach(function (value, key) {
            queryParameterArray.push(key + "=" + value);
        });
        return queryParameterArray.join("&");
    };
    return RequestParameterBuilder;
}());


//# sourceMappingURL=RequestParameterBuilder.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/request/RequestValidator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestValidator.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RequestValidator": () => (/* binding */ RequestValidator)
/* harmony export */ });
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Validates server consumable params from the "request" objects
 */
var RequestValidator = /** @class */ (function () {
    function RequestValidator() {
    }
    /**
     * Utility to check if the `redirectUri` in the request is a non-null value
     * @param redirectUri
     */
    RequestValidator.validateRedirectUri = function (redirectUri) {
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(redirectUri)) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createRedirectUriEmptyError();
        }
    };
    /**
     * Utility to validate prompt sent by the user in the request
     * @param prompt
     */
    RequestValidator.validatePrompt = function (prompt) {
        var promptValues = [];
        for (var value in _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.PromptValue) {
            promptValues.push(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.PromptValue[value]);
        }
        if (promptValues.indexOf(prompt) < 0) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInvalidPromptError(prompt);
        }
    };
    RequestValidator.validateClaims = function (claims) {
        try {
            JSON.parse(claims);
        }
        catch (e) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInvalidClaimsRequestError();
        }
    };
    /**
     * Utility to validate code_challenge and code_challenge_method
     * @param codeChallenge
     * @param codeChallengeMethod
     */
    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(codeChallenge) || _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(codeChallengeMethod)) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInvalidCodeChallengeParamsError();
        }
        else {
            this.validateCodeChallengeMethod(codeChallengeMethod);
        }
    };
    /**
     * Utility to validate code_challenge_method
     * @param codeChallengeMethod
     */
    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {
        if ([
            _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.PLAIN,
            _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.S256
        ].indexOf(codeChallengeMethod) < 0) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInvalidCodeChallengeMethodError();
        }
    };
    /**
     * Removes unnecessary or duplicate query parameters from extraQueryParameters
     * @param request
     */
    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {
        if (!eQParams) {
            return {};
        }
        // Remove any query parameters already included in SSO params
        queryParams.forEach(function (value, key) {
            if (eQParams[key]) {
                delete eQParams[key];
            }
        });
        return eQParams;
    };
    return RequestValidator;
}());


//# sourceMappingURL=RequestValidator.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/request/ScopeSet.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/ScopeSet.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScopeSet": () => (/* binding */ ScopeSet)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */







/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
 * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
 * to ensure uniqueness of strings.
 */
var ScopeSet = /** @class */ (function () {
    function ScopeSet(inputScopes) {
        var _this = this;
        // Filter empty string and null/undefined array items
        var scopeArr = inputScopes ? _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.trimArrayEntries((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArrays)(inputScopes)) : [];
        var filteredInput = scopeArr ? _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.removeEmptyStringsFromArray(scopeArr) : [];
        // Validate and filter scopes (validate function throws if validation fails)
        this.validateInputScopes(filteredInput);
        this.scopes = new Set(); // Iterator in constructor not supported by IE11
        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });
    }
    /**
     * Factory method to create ScopeSet from space-delimited string
     * @param inputScopeString
     * @param appClientId
     * @param scopesRequired
     */
    ScopeSet.fromString = function (inputScopeString) {
        var scopeString = inputScopeString || "";
        var inputScopes = scopeString.split(" ");
        return new ScopeSet(inputScopes);
    };
    /**
     * Used to validate the scopes input parameter requested  by the developer.
     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
     */
    ScopeSet.prototype.validateInputScopes = function (inputScopes) {
        // Check if scopes are required but not given or is an empty array
        if (!inputScopes || inputScopes.length < 1) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_2__.ClientConfigurationError.createEmptyScopesArrayError();
        }
    };
    /**
     * Check if a given scope is present in this set of scopes.
     * @param scope
     */
    ScopeSet.prototype.containsScope = function (scope) {
        var lowerCaseScopes = this.printScopesLowerCase().split(" ");
        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);
        // compare lowercase scopes
        return !_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
    };
    /**
     * Check if a set of scopes is present in this set of scopes.
     * @param scopeSet
     */
    ScopeSet.prototype.containsScopeSet = function (scopeSet) {
        var _this = this;
        if (!scopeSet || scopeSet.scopes.size <= 0) {
            return false;
        }
        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));
    };
    /**
     * Check if set of scopes contains only the defaults
     */
    ScopeSet.prototype.containsOnlyOIDCScopes = function () {
        var _this = this;
        var defaultScopeCount = 0;
        _utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.OIDC_SCOPES.forEach(function (defaultScope) {
            if (_this.containsScope(defaultScope)) {
                defaultScopeCount += 1;
            }
        });
        return this.scopes.size === defaultScopeCount;
    };
    /**
     * Appends single scope if passed
     * @param newScope
     */
    ScopeSet.prototype.appendScope = function (newScope) {
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(newScope)) {
            this.scopes.add(newScope.trim());
        }
    };
    /**
     * Appends multiple scopes if passed
     * @param newScopes
     */
    ScopeSet.prototype.appendScopes = function (newScopes) {
        var _this = this;
        try {
            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });
        }
        catch (e) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createAppendScopeSetError(e);
        }
    };
    /**
     * Removes element from set of scopes.
     * @param scope
     */
    ScopeSet.prototype.removeScope = function (scope) {
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(scope)) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createRemoveEmptyScopeFromSetError(scope);
        }
        this.scopes.delete(scope.trim());
    };
    /**
     * Removes default scopes from set of scopes
     * Primarily used to prevent cache misses if the default scopes are not returned from the server
     */
    ScopeSet.prototype.removeOIDCScopes = function () {
        var _this = this;
        _utils_Constants_js__WEBPACK_IMPORTED_MODULE_3__.OIDC_SCOPES.forEach(function (defaultScope) {
            _this.scopes.delete(defaultScope);
        });
    };
    /**
     * Combines an array of scopes with the current set of scopes.
     * @param otherScopes
     */
    ScopeSet.prototype.unionScopeSets = function (otherScopes) {
        if (!otherScopes) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEmptyInputScopeSetError();
        }
        var unionScopes = new Set(); // Iterator in constructor not supported in IE11
        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
        return unionScopes;
    };
    /**
     * Check if scopes intersect between this set and another.
     * @param otherScopes
     */
    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {
        if (!otherScopes) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ClientAuthError.createEmptyInputScopeSetError();
        }
        // Do not allow OIDC scopes to be the only intersecting scopes
        if (!otherScopes.containsOnlyOIDCScopes()) {
            otherScopes.removeOIDCScopes();
        }
        var unionScopes = this.unionScopeSets(otherScopes);
        var sizeOtherScopes = otherScopes.getScopeCount();
        var sizeThisScopes = this.getScopeCount();
        var sizeUnionScopes = unionScopes.size;
        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);
    };
    /**
     * Returns size of set of scopes.
     */
    ScopeSet.prototype.getScopeCount = function () {
        return this.scopes.size;
    };
    /**
     * Returns the scopes as an array of string values
     */
    ScopeSet.prototype.asArray = function () {
        var array = [];
        this.scopes.forEach(function (val) { return array.push(val); });
        return array;
    };
    /**
     * Prints scopes into a space-delimited string
     */
    ScopeSet.prototype.printScopes = function () {
        if (this.scopes) {
            var scopeArr = this.asArray();
            return scopeArr.join(" ");
        }
        return "";
    };
    /**
     * Prints scopes into a space-delimited lower-case string (used for caching)
     */
    ScopeSet.prototype.printScopesLowerCase = function () {
        return this.printScopes().toLowerCase();
    };
    return ScopeSet;
}());


//# sourceMappingURL=ScopeSet.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/response/ResponseHandler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/response/ResponseHandler.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResponseHandler": () => (/* binding */ ResponseHandler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/* harmony import */ var _account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../account/ClientInfo.js */ "./node_modules/@azure/msal-common/dist/account/ClientInfo.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _error_ServerError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ServerError.js */ "./node_modules/@azure/msal-common/dist/error/ServerError.js");
/* harmony import */ var _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../account/AuthToken.js */ "./node_modules/@azure/msal-common/dist/account/AuthToken.js");
/* harmony import */ var _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../request/ScopeSet.js */ "./node_modules/@azure/msal-common/dist/request/ScopeSet.js");
/* harmony import */ var _cache_entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../cache/entities/AccountEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js");
/* harmony import */ var _authority_AuthorityType_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../authority/AuthorityType.js */ "./node_modules/@azure/msal-common/dist/authority/AuthorityType.js");
/* harmony import */ var _cache_entities_IdTokenEntity_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cache/entities/IdTokenEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/IdTokenEntity.js");
/* harmony import */ var _cache_entities_AccessTokenEntity_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../cache/entities/AccessTokenEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js");
/* harmony import */ var _cache_entities_RefreshTokenEntity_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../cache/entities/RefreshTokenEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/RefreshTokenEntity.js");
/* harmony import */ var _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.js */ "./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.js");
/* harmony import */ var _cache_entities_CacheRecord_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../cache/entities/CacheRecord.js */ "./node_modules/@azure/msal-common/dist/cache/entities/CacheRecord.js");
/* harmony import */ var _utils_ProtocolUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/ProtocolUtils.js */ "./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _crypto_PopTokenGenerator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.js */ "./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.js");
/* harmony import */ var _cache_entities_AppMetadataEntity_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../cache/entities/AppMetadataEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/AppMetadataEntity.js");
/* harmony import */ var _cache_persistence_TokenCacheContext_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../cache/persistence/TokenCacheContext.js */ "./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





















/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class that handles response parsing.
 */
var ResponseHandler = /** @class */ (function () {
    function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {
        this.clientId = clientId;
        this.cacheStorage = cacheStorage;
        this.cryptoObj = cryptoObj;
        this.logger = logger;
        this.serializableCache = serializableCache;
        this.persistencePlugin = persistencePlugin;
    }
    /**
     * Function which validates server authorization code response.
     * @param serverResponseHash
     * @param cachedState
     * @param cryptoObj
     */
    ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {
        if (!serverResponseHash.state || !cachedState) {
            throw !serverResponseHash.state ? _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createStateNotFoundError("Server State") : _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createStateNotFoundError("Cached State");
        }
        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createStateMismatchError();
        }
        // Check for error
        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
            if (_error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_1__.InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {
                throw new _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_1__.InteractionRequiredAuthError(serverResponseHash.error || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
            }
            throw new _error_ServerError_js__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponseHash.error || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
        }
        if (serverResponseHash.client_info) {
            (0,_account_ClientInfo_js__WEBPACK_IMPORTED_MODULE_4__.buildClientInfo)(serverResponseHash.client_info, cryptoObj);
        }
    };
    /**
     * Function which validates server authorization token response.
     * @param serverResponse
     */
    ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {
        // Check for error
        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
            if (_error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_1__.InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {
                throw new _error_InteractionRequiredAuthError_js__WEBPACK_IMPORTED_MODULE_1__.InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);
            }
            var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
            throw new _error_ServerError_js__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error, errString, serverResponse.suberror);
        }
    };
    /**
     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
     * @param serverTokenResponse
     * @param authority
     */
    ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function () {
            var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (serverTokenResponse.id_token) {
                            idTokenObj = new _account_AuthToken_js__WEBPACK_IMPORTED_MODULE_6__.AuthToken(serverTokenResponse.id_token || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, this.cryptoObj);
                            // token nonce check (TODO: Add a warning if no nonce is given?)
                            if (authCodePayload && !_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(authCodePayload.nonce)) {
                                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {
                                    throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createNonceMismatchError();
                                }
                            }
                        }
                        // generate homeAccountId
                        this.homeAccountIdentifier = _cache_entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                        if (!!authCodePayload && !!authCodePayload.state) {
                            requestStateObj = _utils_ProtocolUtils_js__WEBPACK_IMPORTED_MODULE_9__.ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                        }
                        // Add keyId from request to serverTokenResponse if defined
                        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;
                        cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 5, 8]);
                        if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];
                        this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                        cacheContext = new _cache_persistence_TokenCacheContext_js__WEBPACK_IMPORTED_MODULE_10__.TokenCacheContext(this.serializableCache, true);
                        return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        /*
                         * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                         * If not present, we should return null, as it's the case that another application called removeAccount in between
                         * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.
                         */
                        if (handlingRefreshTokenResponse && cacheRecord.account) {
                            key = cacheRecord.account.generateAccountKey();
                            account = this.cacheStorage.getAccount(key);
                            if (!account) {
                                this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];
                            }
                        }
                        return [4 /*yield*/, this.cacheStorage.saveCacheRecord(cacheRecord)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 5:
                        if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 7];
                        this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                        return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code)];
                }
            });
        });
    };
    /**
     * Generates CacheRecord
     * @param serverTokenResponse
     * @param idTokenObj
     * @param authority
     */
    ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload) {
        var env = authority.getPreferredCache();
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(env)) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createInvalidCacheEnvironmentError();
        }
        // IdToken: non AAD scenarios can have empty realm
        var cachedIdToken;
        var cachedAccount;
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {
            cachedIdToken = _cache_entities_IdTokenEntity_js__WEBPACK_IMPORTED_MODULE_11__.IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, oboAssertion);
            cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);
        }
        // AccessToken
        var cachedAccessToken = null;
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(serverTokenResponse.access_token)) {
            // If scopes not returned in server response, use request scopes
            var responseScopes = serverTokenResponse.scope ? _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(serverTokenResponse.scope) : new _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_12__.ScopeSet(request.scopes || []);
            /*
             * Use timestamp calculated before request
             * Server may return timestamps as strings, parse to numbers if so.
             */
            var expiresIn = (typeof serverTokenResponse.expires_in === "string" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;
            var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === "string" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;
            var refreshIn = (typeof serverTokenResponse.refresh_in === "string" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;
            var tokenExpirationSeconds = reqTimestamp + expiresIn;
            var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;
            var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;
            // non AAD scenarios can have empty realm
            cachedAccessToken = _cache_entities_AccessTokenEntity_js__WEBPACK_IMPORTED_MODULE_13__.AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);
        }
        // refreshToken
        var cachedRefreshToken = null;
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(serverTokenResponse.refresh_token)) {
            cachedRefreshToken = _cache_entities_RefreshTokenEntity_js__WEBPACK_IMPORTED_MODULE_14__.RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);
        }
        // appMetadata
        var cachedAppMetadata = null;
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(serverTokenResponse.foci)) {
            cachedAppMetadata = _cache_entities_AppMetadataEntity_js__WEBPACK_IMPORTED_MODULE_15__.AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);
        }
        return new _cache_entities_CacheRecord_js__WEBPACK_IMPORTED_MODULE_16__.CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
    };
    /**
     * Generate Account
     * @param serverTokenResponse
     * @param idToken
     * @param authority
     */
    ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {
        var authorityType = authority.authorityType;
        var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : "";
        var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : "";
        // ADFS does not require client_info in the response
        if (authorityType === _authority_AuthorityType_js__WEBPACK_IMPORTED_MODULE_17__.AuthorityType.Adfs) {
            this.logger.verbose("Authority type is ADFS, creating ADFS account");
            return _cache_entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);
        }
        // This fallback applies to B2C as well as they fall under an AAD account type.
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_7__.StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createClientInfoEmptyError();
        }
        return serverTokenResponse.client_info ?
            _cache_entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) :
            _cache_entities_AccountEntity_js__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);
    };
    /**
     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
     *
     * Optionally takes a state string that is set as-is in the response.
     *
     * @param cacheRecord
     * @param idTokenObj
     * @param fromTokenCache
     * @param stateString
     */
    ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, code) {
        var _a, _b, _c;
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function () {
            var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;
            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        accessToken = "";
                        responseScopes = [];
                        expiresOn = null;
                        familyId = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;
                        if (!cacheRecord.accessToken) return [3 /*break*/, 4];
                        if (!(cacheRecord.accessToken.tokenType === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new _crypto_PopTokenGenerator_js__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(cryptoObj);
                        return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];
                    case 1:
                        accessToken = _d.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        accessToken = cacheRecord.accessToken.secret;
                        _d.label = 3;
                    case 3:
                        responseScopes = _request_ScopeSet_js__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                        expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                        extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                        _d.label = 4;
                    case 4:
                        if (cacheRecord.appMetadata) {
                            familyId = cacheRecord.appMetadata.familyId === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.THE_FAMILY_ID ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.THE_FAMILY_ID : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;
                        }
                        uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;
                        tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;
                        return [2 /*return*/, {
                                authority: authority.canonicalAuthority,
                                uniqueId: uid,
                                tenantId: tid,
                                scopes: responseScopes,
                                account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                idToken: idTokenObj ? idTokenObj.rawToken : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING,
                                idTokenClaims: idTokenObj ? idTokenObj.claims : {},
                                accessToken: accessToken,
                                fromCache: fromTokenCache,
                                expiresOn: expiresOn,
                                correlationId: request.correlationId,
                                extExpiresOn: extExpiresOn,
                                familyId: familyId,
                                tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING,
                                state: requestState ? requestState.userRequestState : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING,
                                cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING,
                                msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING,
                                code: code
                            }];
                }
            });
        });
    };
    return ResponseHandler;
}());


//# sourceMappingURL=ResponseHandler.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServerTelemetryManager": () => (/* binding */ ServerTelemetryManager)
/* harmony export */ });
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _cache_entities_ServerTelemetryEntity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../cache/entities/ServerTelemetryEntity.js */ "./node_modules/@azure/msal-common/dist/cache/entities/ServerTelemetryEntity.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ServerTelemetryManager = /** @class */ (function () {
    function ServerTelemetryManager(telemetryRequest, cacheManager) {
        this.cacheOutcome = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.CacheOutcome.NO_CACHE_HIT;
        this.cacheManager = cacheManager;
        this.apiId = telemetryRequest.apiId;
        this.correlationId = telemetryRequest.correlationId;
        this.wrapperSKU = telemetryRequest.wrapperSKU || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
        this.wrapperVer = telemetryRequest.wrapperVer || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
        this.telemetryCacheKey = _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
    }
    /**
     * API to add MSER Telemetry to request
     */
    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {
        var request = "" + this.apiId + _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;
        var platformFields = [this.wrapperSKU, this.wrapperVer].join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var regionDiscoveryFields = this.getRegionDiscoveryFields();
        var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to add MSER Telemetry for the last failed request
     */
    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {
        var lastRequests = this.getLastRequests();
        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errors = lastRequests.errors.slice(0, maxErrors).join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errorCount = lastRequests.errors.length;
        // Indicate whether this header contains all data or partial data
        var overflow = maxErrors < errorCount ? _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;
        var platformFields = [errorCount, overflow].join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to cache token failures for MSER data capture
     * @param error
     */
    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {
        var lastRequests = this.getLastRequests();
        if (lastRequests.errors.length >= _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {
            // Remove a cached error to make room, first in first out
            lastRequests.failedRequests.shift(); // apiId
            lastRequests.failedRequests.shift(); // correlationId
            lastRequests.errors.shift();
        }
        lastRequests.failedRequests.push(this.apiId, this.correlationId);
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(error.subError)) {
            lastRequests.errors.push(error.subError);
        }
        else if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.isEmpty(error.errorCode)) {
            lastRequests.errors.push(error.errorCode);
        }
        else if (!!error && error.toString()) {
            lastRequests.errors.push(error.toString());
        }
        else {
            lastRequests.errors.push(_utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);
        }
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
        return;
    };
    /**
     * Update server telemetry cache entry by incrementing cache hit counter
     */
    ServerTelemetryManager.prototype.incrementCacheHits = function () {
        var lastRequests = this.getLastRequests();
        lastRequests.cacheHits += 1;
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
        return lastRequests.cacheHits;
    };
    /**
     * Get the server telemetry entity from cache or initialize a new one
     */
    ServerTelemetryManager.prototype.getLastRequests = function () {
        var initialValue = new _cache_entities_ServerTelemetryEntity_js__WEBPACK_IMPORTED_MODULE_2__.ServerTelemetryEntity();
        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);
        return lastRequests || initialValue;
    };
    /**
     * Remove server telemetry cache entry
     */
    ServerTelemetryManager.prototype.clearTelemetryCache = function () {
        var lastRequests = this.getLastRequests();
        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        var errorCount = lastRequests.errors.length;
        if (numErrorsFlushed === errorCount) {
            // All errors were sent on last request, clear Telemetry cache
            this.cacheManager.removeItem(this.telemetryCacheKey);
        }
        else {
            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
            var serverTelemEntity = new _cache_entities_ServerTelemetryEntity_js__WEBPACK_IMPORTED_MODULE_2__.ServerTelemetryEntity();
            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error
            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);
        }
    };
    /**
     * Returns the maximum number of errors that can be flushed to the server in the next network request
     * @param serverTelemetryEntity
     */
    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {
        var i;
        var maxErrors = 0;
        var dataSize = 0;
        var errorCount = serverTelemetryEntity.errors.length;
        for (i = 0; i < errorCount; i++) {
            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
            var apiId = serverTelemetryEntity.failedRequests[2 * i] || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
            var errorCode = serverTelemetryEntity.errors[i] || _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;
            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
            if (dataSize < _utils_Constants_js__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {
                // Adding this entry to the header would still keep header size below the limit
                maxErrors += 1;
            }
            else {
                break;
            }
        }
        return maxErrors;
    };
    /**
     * Get the region discovery fields
     *
     * @returns string
     */
    ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {
        var regionDiscoveryFields = [];
        regionDiscoveryFields.push(this.regionUsed || "");
        regionDiscoveryFields.push(this.regionSource || "");
        regionDiscoveryFields.push(this.regionOutcome || "");
        return regionDiscoveryFields.join(",");
    };
    /**
     * Update the region discovery metadata
     *
     * @param regionDiscoveryMetadata
     * @returns void
     */
    ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {
        this.regionUsed = regionDiscoveryMetadata.region_used;
        this.regionSource = regionDiscoveryMetadata.region_source;
        this.regionOutcome = regionDiscoveryMetadata.region_outcome;
    };
    /**
     * Set cache outcome
     */
    ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {
        this.cacheOutcome = cacheOutcome;
    };
    return ServerTelemetryManager;
}());


//# sourceMappingURL=ServerTelemetryManager.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/url/UrlString.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/url/UrlString.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UrlString": () => (/* binding */ UrlString)
/* harmony export */ });
/* harmony import */ var _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationError.js */ "./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */






/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Url object class which can perform various transformations on url strings.
 */
var UrlString = /** @class */ (function () {
    function UrlString(url) {
        this._urlString = url;
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(this._urlString)) {
            // Throws error if url is empty
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createUrlEmptyError();
        }
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(this.getHash())) {
            this._urlString = UrlString.canonicalizeUri(url);
        }
    }
    Object.defineProperty(UrlString.prototype, "urlString", {
        get: function () {
            return this._urlString;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Ensure urls are lower case and end with a / character.
     * @param url
     */
    UrlString.canonicalizeUri = function (url) {
        if (url) {
            var lowerCaseUrl = url.toLowerCase();
            if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.endsWith(lowerCaseUrl, "?")) {
                lowerCaseUrl = lowerCaseUrl.slice(0, -1);
            }
            else if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.endsWith(lowerCaseUrl, "?/")) {
                lowerCaseUrl = lowerCaseUrl.slice(0, -2);
            }
            if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.endsWith(lowerCaseUrl, "/")) {
                lowerCaseUrl += "/";
            }
            return lowerCaseUrl;
        }
        return url;
    };
    /**
     * Throws if urlString passed is not a valid authority URI string.
     */
    UrlString.prototype.validateAsUri = function () {
        // Attempts to parse url for uri components
        var components;
        try {
            components = this.getUrlComponents();
        }
        catch (e) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createUrlParseError(e);
        }
        // Throw error if URI or path segments are not parseable.
        if (!components.HostNameAndPort || !components.PathSegments) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        }
        // Throw error if uri is insecure.
        if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);
        }
    };
    /**
     * Given a url and a query string return the url with provided query string appended
     * @param url
     * @param queryString
     */
    UrlString.appendQueryString = function (url, queryString) {
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(queryString)) {
            return url;
        }
        return url.indexOf("?") < 0 ? url + "?" + queryString : url + "&" + queryString;
    };
    /**
     * Returns a url with the hash removed
     * @param url
     */
    UrlString.removeHashFromUrl = function (url) {
        return UrlString.canonicalizeUri(url.split("#")[0]);
    };
    /**
     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
     * @param href The url
     * @param tenantId The tenant id to replace
     */
    UrlString.prototype.replaceTenantPath = function (tenantId) {
        var urlObject = this.getUrlComponents();
        var pathArray = urlObject.PathSegments;
        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.AADAuthorityConstants.COMMON || pathArray[0] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.AADAuthorityConstants.ORGANIZATIONS))) {
            pathArray[0] = tenantId;
        }
        return UrlString.constructAuthorityUriFromObject(urlObject);
    };
    /**
     * Returns the anchor part(#) of the URL
     */
    UrlString.prototype.getHash = function () {
        return UrlString.parseHash(this.urlString);
    };
    /**
     * Parses out the components from a url string.
     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
     */
    UrlString.prototype.getUrlComponents = function () {
        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
        var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
        // If url string does not match regEx, we throw an error
        var match = this.urlString.match(regEx);
        if (!match) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        }
        // Url component object
        var urlComponents = {
            Protocol: match[1],
            HostNameAndPort: match[4],
            AbsolutePath: match[5],
            QueryString: match[7]
        };
        var pathSegments = urlComponents.AbsolutePath.split("/");
        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
        urlComponents.PathSegments = pathSegments;
        if (!_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith("/")) {
            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
        }
        return urlComponents;
    };
    UrlString.getDomainFromUrl = function (url) {
        var regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
        var match = url.match(regEx);
        if (!match) {
            throw _error_ClientConfigurationError_js__WEBPACK_IMPORTED_MODULE_1__.ClientConfigurationError.createUrlParseError("Given url string: " + url);
        }
        return match[2];
    };
    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {
        if (relativeUrl[0] === _utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Constants.FORWARD_SLASH) {
            var url = new UrlString(baseUrl);
            var baseComponents = url.getUrlComponents();
            return baseComponents.Protocol + "//" + baseComponents.HostNameAndPort + relativeUrl;
        }
        return relativeUrl;
    };
    /**
     * Parses hash string from given string. Returns empty string if no hash symbol is found.
     * @param hashString
     */
    UrlString.parseHash = function (hashString) {
        var hashIndex1 = hashString.indexOf("#");
        var hashIndex2 = hashString.indexOf("#/");
        if (hashIndex2 > -1) {
            return hashString.substring(hashIndex2 + 2);
        }
        else if (hashIndex1 > -1) {
            return hashString.substring(hashIndex1 + 1);
        }
        return "";
    };
    UrlString.constructAuthorityUriFromObject = function (urlObject) {
        return new UrlString(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
    };
    /**
     * Returns URL hash as server auth code response object.
     */
    UrlString.getDeserializedHash = function (hash) {
        // Check if given hash is empty
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(hash)) {
            return {};
        }
        // Strip the # symbol if present
        var parsedHash = UrlString.parseHash(hash);
        // If # symbol was not present, above will return empty string, so give original hash value
        var deserializedHash = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.queryStringToObject(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(parsedHash) ? hash : parsedHash);
        // Check if deserialization didn't work
        if (!deserializedHash) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));
        }
        return deserializedHash;
    };
    /**
     * Check if the hash of the URL string contains known properties
     */
    UrlString.hashContainsKnownProperties = function (hash) {
        if (_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(hash) || hash.indexOf("=") < 0) {
            // Hash doesn't contain key/value pairs
            return false;
        }
        var parameters = UrlString.getDeserializedHash(hash);
        return !!(parameters.code ||
            parameters.error_description ||
            parameters.error ||
            parameters.state);
    };
    return UrlString;
}());


//# sourceMappingURL=UrlString.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/utils/Constants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/Constants.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AADAuthorityConstants": () => (/* binding */ AADAuthorityConstants),
/* harmony export */   "AADServerParamKeys": () => (/* binding */ AADServerParamKeys),
/* harmony export */   "APP_METADATA": () => (/* binding */ APP_METADATA),
/* harmony export */   "AUTHORITY_METADATA_CONSTANTS": () => (/* binding */ AUTHORITY_METADATA_CONSTANTS),
/* harmony export */   "AuthenticationScheme": () => (/* binding */ AuthenticationScheme),
/* harmony export */   "AuthorityMetadataSource": () => (/* binding */ AuthorityMetadataSource),
/* harmony export */   "CLIENT_INFO": () => (/* binding */ CLIENT_INFO),
/* harmony export */   "CacheAccountType": () => (/* binding */ CacheAccountType),
/* harmony export */   "CacheOutcome": () => (/* binding */ CacheOutcome),
/* harmony export */   "CacheSchemaType": () => (/* binding */ CacheSchemaType),
/* harmony export */   "CacheType": () => (/* binding */ CacheType),
/* harmony export */   "ClaimsRequestKeys": () => (/* binding */ ClaimsRequestKeys),
/* harmony export */   "CodeChallengeMethodValues": () => (/* binding */ CodeChallengeMethodValues),
/* harmony export */   "Constants": () => (/* binding */ Constants),
/* harmony export */   "CredentialType": () => (/* binding */ CredentialType),
/* harmony export */   "Errors": () => (/* binding */ Errors),
/* harmony export */   "GrantType": () => (/* binding */ GrantType),
/* harmony export */   "HeaderNames": () => (/* binding */ HeaderNames),
/* harmony export */   "OIDC_DEFAULT_SCOPES": () => (/* binding */ OIDC_DEFAULT_SCOPES),
/* harmony export */   "OIDC_SCOPES": () => (/* binding */ OIDC_SCOPES),
/* harmony export */   "PasswordGrantConstants": () => (/* binding */ PasswordGrantConstants),
/* harmony export */   "PersistentCacheKeys": () => (/* binding */ PersistentCacheKeys),
/* harmony export */   "PromptValue": () => (/* binding */ PromptValue),
/* harmony export */   "RegionDiscoveryOutcomes": () => (/* binding */ RegionDiscoveryOutcomes),
/* harmony export */   "RegionDiscoverySources": () => (/* binding */ RegionDiscoverySources),
/* harmony export */   "ResponseCodes": () => (/* binding */ ResponseCodes),
/* harmony export */   "ResponseMode": () => (/* binding */ ResponseMode),
/* harmony export */   "SERVER_TELEM_CONSTANTS": () => (/* binding */ SERVER_TELEM_CONSTANTS),
/* harmony export */   "SSOTypes": () => (/* binding */ SSOTypes),
/* harmony export */   "Separators": () => (/* binding */ Separators),
/* harmony export */   "THE_FAMILY_ID": () => (/* binding */ THE_FAMILY_ID),
/* harmony export */   "ThrottlingConstants": () => (/* binding */ ThrottlingConstants)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/_tslib.js */ "./node_modules/@azure/msal-common/dist/_virtual/_tslib.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var Constants = {
    LIBRARY_NAME: "MSAL.JS",
    SKU: "msal.js.common",
    // Prefix for all library cache entries
    CACHE_PREFIX: "msal",
    // default authority
    DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
    DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
    DEFAULT_COMMON_TENANT: "common",
    // ADFS String
    ADFS: "adfs",
    // Default AAD Instance Discovery Endpoint
    AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
    // Resource delimiter - used for certain cache entries
    RESOURCE_DELIM: "|",
    // Placeholder for non-existent account ids/objects
    NO_ACCOUNT: "NO_ACCOUNT",
    // Claims
    CLAIMS: "claims",
    // Consumer UTID
    CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
    // Default scopes
    OPENID_SCOPE: "openid",
    PROFILE_SCOPE: "profile",
    OFFLINE_ACCESS_SCOPE: "offline_access",
    EMAIL_SCOPE: "email",
    // Default response type for authorization code flow
    CODE_RESPONSE_TYPE: "code",
    CODE_GRANT_TYPE: "authorization_code",
    RT_GRANT_TYPE: "refresh_token",
    FRAGMENT_RESPONSE_MODE: "fragment",
    S256_CODE_CHALLENGE_METHOD: "S256",
    URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
    AUTHORIZATION_PENDING: "authorization_pending",
    NOT_DEFINED: "not_defined",
    EMPTY_STRING: "",
    FORWARD_SLASH: "/",
    IMDS_ENDPOINT: "http://169.254.169.254/metadata/instance/compute/location",
    IMDS_VERSION: "2020-06-01",
    IMDS_TIMEOUT: 2000,
    AZURE_REGION_AUTO_DISCOVER_FLAG: "TryAutoDetect",
    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: "login.microsoft.com",
    KNOWN_PUBLIC_CLOUDS: ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"]
};
var OIDC_DEFAULT_SCOPES = [
    Constants.OPENID_SCOPE,
    Constants.PROFILE_SCOPE,
    Constants.OFFLINE_ACCESS_SCOPE
];
var OIDC_SCOPES = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__spreadArrays)(OIDC_DEFAULT_SCOPES, [
    Constants.EMAIL_SCOPE
]);
/**
 * Request header names
 */
var HeaderNames;
(function (HeaderNames) {
    HeaderNames["CONTENT_TYPE"] = "Content-Type";
    HeaderNames["RETRY_AFTER"] = "Retry-After";
    HeaderNames["CCS_HEADER"] = "X-AnchorMailbox";
    HeaderNames["WWWAuthenticate"] = "WWW-Authenticate";
    HeaderNames["AuthenticationInfo"] = "Authentication-Info";
})(HeaderNames || (HeaderNames = {}));
/**
 * Persistent cache keys MSAL which stay while user is logged in.
 */
var PersistentCacheKeys;
(function (PersistentCacheKeys) {
    PersistentCacheKeys["ID_TOKEN"] = "idtoken";
    PersistentCacheKeys["CLIENT_INFO"] = "client.info";
    PersistentCacheKeys["ADAL_ID_TOKEN"] = "adal.idtoken";
    PersistentCacheKeys["ERROR"] = "error";
    PersistentCacheKeys["ERROR_DESC"] = "error.description";
    PersistentCacheKeys["ACTIVE_ACCOUNT"] = "active-account";
})(PersistentCacheKeys || (PersistentCacheKeys = {}));
/**
 * String constants related to AAD Authority
 */
var AADAuthorityConstants;
(function (AADAuthorityConstants) {
    AADAuthorityConstants["COMMON"] = "common";
    AADAuthorityConstants["ORGANIZATIONS"] = "organizations";
    AADAuthorityConstants["CONSUMERS"] = "consumers";
})(AADAuthorityConstants || (AADAuthorityConstants = {}));
/**
 * Keys in the hashParams sent by AAD Server
 */
var AADServerParamKeys;
(function (AADServerParamKeys) {
    AADServerParamKeys["CLIENT_ID"] = "client_id";
    AADServerParamKeys["REDIRECT_URI"] = "redirect_uri";
    AADServerParamKeys["RESPONSE_TYPE"] = "response_type";
    AADServerParamKeys["RESPONSE_MODE"] = "response_mode";
    AADServerParamKeys["GRANT_TYPE"] = "grant_type";
    AADServerParamKeys["CLAIMS"] = "claims";
    AADServerParamKeys["SCOPE"] = "scope";
    AADServerParamKeys["ERROR"] = "error";
    AADServerParamKeys["ERROR_DESCRIPTION"] = "error_description";
    AADServerParamKeys["ACCESS_TOKEN"] = "access_token";
    AADServerParamKeys["ID_TOKEN"] = "id_token";
    AADServerParamKeys["REFRESH_TOKEN"] = "refresh_token";
    AADServerParamKeys["EXPIRES_IN"] = "expires_in";
    AADServerParamKeys["STATE"] = "state";
    AADServerParamKeys["NONCE"] = "nonce";
    AADServerParamKeys["PROMPT"] = "prompt";
    AADServerParamKeys["SESSION_STATE"] = "session_state";
    AADServerParamKeys["CLIENT_INFO"] = "client_info";
    AADServerParamKeys["CODE"] = "code";
    AADServerParamKeys["CODE_CHALLENGE"] = "code_challenge";
    AADServerParamKeys["CODE_CHALLENGE_METHOD"] = "code_challenge_method";
    AADServerParamKeys["CODE_VERIFIER"] = "code_verifier";
    AADServerParamKeys["CLIENT_REQUEST_ID"] = "client-request-id";
    AADServerParamKeys["X_CLIENT_SKU"] = "x-client-SKU";
    AADServerParamKeys["X_CLIENT_VER"] = "x-client-VER";
    AADServerParamKeys["X_CLIENT_OS"] = "x-client-OS";
    AADServerParamKeys["X_CLIENT_CPU"] = "x-client-CPU";
    AADServerParamKeys["X_CLIENT_CURR_TELEM"] = "x-client-current-telemetry";
    AADServerParamKeys["X_CLIENT_LAST_TELEM"] = "x-client-last-telemetry";
    AADServerParamKeys["X_MS_LIB_CAPABILITY"] = "x-ms-lib-capability";
    AADServerParamKeys["POST_LOGOUT_URI"] = "post_logout_redirect_uri";
    AADServerParamKeys["ID_TOKEN_HINT"] = "id_token_hint";
    AADServerParamKeys["DEVICE_CODE"] = "device_code";
    AADServerParamKeys["CLIENT_SECRET"] = "client_secret";
    AADServerParamKeys["CLIENT_ASSERTION"] = "client_assertion";
    AADServerParamKeys["CLIENT_ASSERTION_TYPE"] = "client_assertion_type";
    AADServerParamKeys["TOKEN_TYPE"] = "token_type";
    AADServerParamKeys["REQ_CNF"] = "req_cnf";
    AADServerParamKeys["OBO_ASSERTION"] = "assertion";
    AADServerParamKeys["REQUESTED_TOKEN_USE"] = "requested_token_use";
    AADServerParamKeys["ON_BEHALF_OF"] = "on_behalf_of";
    AADServerParamKeys["FOCI"] = "foci";
    AADServerParamKeys["CCS_HEADER"] = "X-AnchorMailbox";
    AADServerParamKeys["RETURN_SPA_CODE"] = "return_spa_code";
    AADServerParamKeys["LOGOUT_HINT"] = "logout_hint";
})(AADServerParamKeys || (AADServerParamKeys = {}));
/**
 * Claims request keys
 */
var ClaimsRequestKeys;
(function (ClaimsRequestKeys) {
    ClaimsRequestKeys["ACCESS_TOKEN"] = "access_token";
    ClaimsRequestKeys["XMS_CC"] = "xms_cc";
})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));
/**
 * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
 * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
 * internal partners too, hence the choice of generic "string" type instead of the "enum"
 */
var PromptValue = {
    LOGIN: "login",
    SELECT_ACCOUNT: "select_account",
    CONSENT: "consent",
    NONE: "none",
    CREATE: "create"
};
/**
 * SSO Types - generated to populate hints
 */
var SSOTypes;
(function (SSOTypes) {
    SSOTypes["ACCOUNT"] = "account";
    SSOTypes["SID"] = "sid";
    SSOTypes["LOGIN_HINT"] = "login_hint";
    SSOTypes["ID_TOKEN"] = "id_token";
    SSOTypes["DOMAIN_HINT"] = "domain_hint";
    SSOTypes["ORGANIZATIONS"] = "organizations";
    SSOTypes["CONSUMERS"] = "consumers";
    SSOTypes["ACCOUNT_ID"] = "accountIdentifier";
    SSOTypes["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
})(SSOTypes || (SSOTypes = {}));
/**
 * allowed values for codeVerifier
 */
var CodeChallengeMethodValues = {
    PLAIN: "plain",
    S256: "S256"
};
/**
 * allowed values for response_mode
 */
var ResponseMode;
(function (ResponseMode) {
    ResponseMode["QUERY"] = "query";
    ResponseMode["FRAGMENT"] = "fragment";
    ResponseMode["FORM_POST"] = "form_post";
})(ResponseMode || (ResponseMode = {}));
/**
 * allowed grant_type
 */
var GrantType;
(function (GrantType) {
    GrantType["IMPLICIT_GRANT"] = "implicit";
    GrantType["AUTHORIZATION_CODE_GRANT"] = "authorization_code";
    GrantType["CLIENT_CREDENTIALS_GRANT"] = "client_credentials";
    GrantType["RESOURCE_OWNER_PASSWORD_GRANT"] = "password";
    GrantType["REFRESH_TOKEN_GRANT"] = "refresh_token";
    GrantType["DEVICE_CODE_GRANT"] = "device_code";
    GrantType["JWT_BEARER"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
})(GrantType || (GrantType = {}));
/**
 * Account types in Cache
 */
var CacheAccountType;
(function (CacheAccountType) {
    CacheAccountType["MSSTS_ACCOUNT_TYPE"] = "MSSTS";
    CacheAccountType["ADFS_ACCOUNT_TYPE"] = "ADFS";
    CacheAccountType["MSAV1_ACCOUNT_TYPE"] = "MSA";
    CacheAccountType["GENERIC_ACCOUNT_TYPE"] = "Generic"; // NTLM, Kerberos, FBA, Basic etc
})(CacheAccountType || (CacheAccountType = {}));
/**
 * Separators used in cache
 */
var Separators;
(function (Separators) {
    Separators["CACHE_KEY_SEPARATOR"] = "-";
    Separators["CLIENT_INFO_SEPARATOR"] = ".";
})(Separators || (Separators = {}));
/**
 * Credential Type stored in the cache
 */
var CredentialType;
(function (CredentialType) {
    CredentialType["ID_TOKEN"] = "IdToken";
    CredentialType["ACCESS_TOKEN"] = "AccessToken";
    CredentialType["ACCESS_TOKEN_WITH_AUTH_SCHEME"] = "AccessToken_With_AuthScheme";
    CredentialType["REFRESH_TOKEN"] = "RefreshToken";
})(CredentialType || (CredentialType = {}));
/**
 * Credential Type stored in the cache
 */
var CacheSchemaType;
(function (CacheSchemaType) {
    CacheSchemaType["ACCOUNT"] = "Account";
    CacheSchemaType["CREDENTIAL"] = "Credential";
    CacheSchemaType["ID_TOKEN"] = "IdToken";
    CacheSchemaType["ACCESS_TOKEN"] = "AccessToken";
    CacheSchemaType["REFRESH_TOKEN"] = "RefreshToken";
    CacheSchemaType["APP_METADATA"] = "AppMetadata";
    CacheSchemaType["TEMPORARY"] = "TempCache";
    CacheSchemaType["TELEMETRY"] = "Telemetry";
    CacheSchemaType["UNDEFINED"] = "Undefined";
    CacheSchemaType["THROTTLING"] = "Throttling";
})(CacheSchemaType || (CacheSchemaType = {}));
/**
 * Combine all cache types
 */
var CacheType;
(function (CacheType) {
    CacheType[CacheType["ADFS"] = 1001] = "ADFS";
    CacheType[CacheType["MSA"] = 1002] = "MSA";
    CacheType[CacheType["MSSTS"] = 1003] = "MSSTS";
    CacheType[CacheType["GENERIC"] = 1004] = "GENERIC";
    CacheType[CacheType["ACCESS_TOKEN"] = 2001] = "ACCESS_TOKEN";
    CacheType[CacheType["REFRESH_TOKEN"] = 2002] = "REFRESH_TOKEN";
    CacheType[CacheType["ID_TOKEN"] = 2003] = "ID_TOKEN";
    CacheType[CacheType["APP_METADATA"] = 3001] = "APP_METADATA";
    CacheType[CacheType["UNDEFINED"] = 9999] = "UNDEFINED";
})(CacheType || (CacheType = {}));
/**
 * More Cache related constants
 */
var APP_METADATA = "appmetadata";
var CLIENT_INFO = "client_info";
var THE_FAMILY_ID = "1";
var AUTHORITY_METADATA_CONSTANTS = {
    CACHE_KEY: "authority-metadata",
    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours
};
var AuthorityMetadataSource;
(function (AuthorityMetadataSource) {
    AuthorityMetadataSource["CONFIG"] = "config";
    AuthorityMetadataSource["CACHE"] = "cache";
    AuthorityMetadataSource["NETWORK"] = "network";
})(AuthorityMetadataSource || (AuthorityMetadataSource = {}));
var SERVER_TELEM_CONSTANTS = {
    SCHEMA_VERSION: 5,
    MAX_CUR_HEADER_BYTES: 80,
    MAX_LAST_HEADER_BYTES: 330,
    MAX_CACHED_ERRORS: 50,
    CACHE_KEY: "server-telemetry",
    CATEGORY_SEPARATOR: "|",
    VALUE_SEPARATOR: ",",
    OVERFLOW_TRUE: "1",
    OVERFLOW_FALSE: "0",
    UNKNOWN_ERROR: "unknown_error"
};
/**
 * Type of the authentication request
 */
var AuthenticationScheme;
(function (AuthenticationScheme) {
    AuthenticationScheme["BEARER"] = "Bearer";
    AuthenticationScheme["POP"] = "pop";
    AuthenticationScheme["SSH"] = "ssh-cert";
})(AuthenticationScheme || (AuthenticationScheme = {}));
/**
 * Constants related to throttling
 */
var ThrottlingConstants = {
    // Default time to throttle RequestThumbprint in seconds
    DEFAULT_THROTTLE_TIME_SECONDS: 60,
    // Default maximum time to throttle in seconds, overrides what the server sends back
    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
    // Prefix for storing throttling entries
    THROTTLING_PREFIX: "throttling",
    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling
    X_MS_LIB_CAPABILITY_VALUE: "retry-after, h429"
};
var Errors = {
    INVALID_GRANT_ERROR: "invalid_grant",
    CLIENT_MISMATCH_ERROR: "client_mismatch",
};
/**
 * Password grant parameters
 */
var PasswordGrantConstants;
(function (PasswordGrantConstants) {
    PasswordGrantConstants["username"] = "username";
    PasswordGrantConstants["password"] = "password";
})(PasswordGrantConstants || (PasswordGrantConstants = {}));
/**
 * Response codes
 */
var ResponseCodes;
(function (ResponseCodes) {
    ResponseCodes[ResponseCodes["httpSuccess"] = 200] = "httpSuccess";
    ResponseCodes[ResponseCodes["httpBadRequest"] = 400] = "httpBadRequest";
})(ResponseCodes || (ResponseCodes = {}));
/**
 * Region Discovery Sources
 */
var RegionDiscoverySources;
(function (RegionDiscoverySources) {
    RegionDiscoverySources["FAILED_AUTO_DETECTION"] = "1";
    RegionDiscoverySources["INTERNAL_CACHE"] = "2";
    RegionDiscoverySources["ENVIRONMENT_VARIABLE"] = "3";
    RegionDiscoverySources["IMDS"] = "4";
})(RegionDiscoverySources || (RegionDiscoverySources = {}));
/**
 * Region Discovery Outcomes
 */
var RegionDiscoveryOutcomes;
(function (RegionDiscoveryOutcomes) {
    RegionDiscoveryOutcomes["CONFIGURED_MATCHES_DETECTED"] = "1";
    RegionDiscoveryOutcomes["CONFIGURED_NO_AUTO_DETECTION"] = "2";
    RegionDiscoveryOutcomes["CONFIGURED_NOT_DETECTED"] = "3";
    RegionDiscoveryOutcomes["AUTO_DETECTION_REQUESTED_SUCCESSFUL"] = "4";
    RegionDiscoveryOutcomes["AUTO_DETECTION_REQUESTED_FAILED"] = "5";
})(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {}));
var CacheOutcome;
(function (CacheOutcome) {
    CacheOutcome["NO_CACHE_HIT"] = "0";
    CacheOutcome["FORCE_REFRESH"] = "1";
    CacheOutcome["NO_CACHED_ACCESS_TOKEN"] = "2";
    CacheOutcome["CACHED_ACCESS_TOKEN_EXPIRED"] = "3";
    CacheOutcome["REFRESH_CACHED_ACCESS_TOKEN"] = "4";
})(CacheOutcome || (CacheOutcome = {}));


//# sourceMappingURL=Constants.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProtocolUtils": () => (/* binding */ ProtocolUtils)
/* harmony export */ });
/* harmony import */ var _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StringUtils.js */ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js");
/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Constants.js */ "./node_modules/@azure/msal-common/dist/utils/Constants.js");
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */





/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which provides helpers for OAuth 2.0 protocol specific values
 */
var ProtocolUtils = /** @class */ (function () {
    function ProtocolUtils() {
    }
    /**
     * Appends user state with random guid, or returns random guid.
     * @param userState
     * @param randomGuid
     */
    ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {
        var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);
        return !_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(userState) ? "" + libraryState + _Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.RESOURCE_DELIM + userState : libraryState;
    };
    /**
     * Generates the state value used by the common library.
     * @param randomGuid
     * @param cryptoObj
     */
    ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {
        if (!cryptoObj) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__.ClientAuthError.createNoCryptoObjectError("generateLibraryState");
        }
        // Create a state object containing a unique id and the timestamp of the request creation
        var stateObj = {
            id: cryptoObj.createNewGuid()
        };
        if (meta) {
            stateObj.meta = meta;
        }
        var stateString = JSON.stringify(stateObj);
        return cryptoObj.base64Encode(stateString);
    };
    /**
     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
     * @param state
     * @param cryptoObj
     */
    ProtocolUtils.parseRequestState = function (cryptoObj, state) {
        if (!cryptoObj) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__.ClientAuthError.createNoCryptoObjectError("parseRequestState");
        }
        if (_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(state)) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__.ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
        }
        try {
            // Split the state between library state and user passed state and decode them separately
            var splitState = state.split(_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.RESOURCE_DELIM);
            var libraryState = splitState[0];
            var userState = splitState.length > 1 ? splitState.slice(1).join(_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Constants.RESOURCE_DELIM) : "";
            var libraryStateString = cryptoObj.base64Decode(libraryState);
            var libraryStateObj = JSON.parse(libraryStateString);
            return {
                userRequestState: !_StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils.isEmpty(userState) ? userState : "",
                libraryState: libraryStateObj
            };
        }
        catch (e) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_2__.ClientAuthError.createInvalidStateError(state, e);
        }
    };
    return ProtocolUtils;
}());


//# sourceMappingURL=ProtocolUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/utils/StringUtils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/StringUtils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StringUtils": () => (/* binding */ StringUtils)
/* harmony export */ });
/* harmony import */ var _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.js */ "./node_modules/@azure/msal-common/dist/error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */



/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * @hidden
 */
var StringUtils = /** @class */ (function () {
    function StringUtils() {
    }
    /**
     * decode a JWT
     *
     * @param authToken
     */
    StringUtils.decodeAuthToken = function (authToken) {
        if (StringUtils.isEmpty(authToken)) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createTokenNullOrEmptyError(authToken);
        }
        var tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
        var matches = tokenPartsRegex.exec(authToken);
        if (!matches || matches.length < 4) {
            throw _error_ClientAuthError_js__WEBPACK_IMPORTED_MODULE_0__.ClientAuthError.createTokenParsingError("Given token is malformed: " + JSON.stringify(authToken));
        }
        var crackedToken = {
            header: matches[1],
            JWSPayload: matches[2],
            JWSSig: matches[3]
        };
        return crackedToken;
    };
    /**
     * Check if a string is empty.
     *
     * @param str
     */
    StringUtils.isEmpty = function (str) {
        return (typeof str === "undefined" || !str || 0 === str.length);
    };
    /**
     * Check if stringified object is empty
     * @param strObj
     */
    StringUtils.isEmptyObj = function (strObj) {
        if (strObj && !StringUtils.isEmpty(strObj)) {
            try {
                var obj = JSON.parse(strObj);
                return Object.keys(obj).length === 0;
            }
            catch (e) { }
        }
        return true;
    };
    StringUtils.startsWith = function (str, search) {
        return str.indexOf(search) === 0;
    };
    StringUtils.endsWith = function (str, search) {
        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));
    };
    /**
     * Parses string into an object.
     *
     * @param query
     */
    StringUtils.queryStringToObject = function (query) {
        var obj = {};
        var params = query.split("&");
        var decode = function (s) { return decodeURIComponent(s.replace(/\+/g, " ")); };
        params.forEach(function (pair) {
            if (pair.trim()) {
                var _a = pair.split(/=(.+)/g, 2), key = _a[0], value = _a[1]; // Split on the first occurence of the '=' character
                if (key && value) {
                    obj[decode(key)] = decode(value);
                }
            }
        });
        return obj;
    };
    /**
     * Trims entries in an array.
     *
     * @param arr
     */
    StringUtils.trimArrayEntries = function (arr) {
        return arr.map(function (entry) { return entry.trim(); });
    };
    /**
     * Removes empty strings from array
     * @param arr
     */
    StringUtils.removeEmptyStringsFromArray = function (arr) {
        return arr.filter(function (entry) {
            return !StringUtils.isEmpty(entry);
        });
    };
    /**
     * Attempts to parse a string into JSON
     * @param str
     */
    StringUtils.jsonParseHelper = function (str) {
        try {
            return JSON.parse(str);
        }
        catch (e) {
            return null;
        }
    };
    /**
     * Tests if a given string matches a given pattern, with support for wildcards and queries.
     * @param pattern Wildcard pattern to string match. Supports "*" for wildcards and "?" for queries
     * @param input String to match against
     */
    StringUtils.matchPattern = function (pattern, input) {
        /**
         * Wildcard support: https://stackoverflow.com/a/3117248/4888559
         * Queries: replaces "?" in string with escaped "\?" for regex test
         */
        var regex = new RegExp(pattern.replace(/\\/g, "\\\\").replace(/\*/g, "[^ ]*").replace(/\?/g, "\\\?")); // eslint-disable-line security/detect-non-literal-regexp
        return regex.test(input);
    };
    return StringUtils;
}());


//# sourceMappingURL=StringUtils.js.map


/***/ }),

/***/ "./node_modules/@azure/msal-common/dist/utils/TimeUtils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/TimeUtils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TimeUtils": () => (/* binding */ TimeUtils)
/* harmony export */ });
/*! @azure/msal-common v6.1.0 2022-02-08 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class which exposes functions for managing date and time operations.
 */
var TimeUtils = /** @class */ (function () {
    function TimeUtils() {
    }
    /**
     * return the current time in Unix time (seconds).
     */
    TimeUtils.nowSeconds = function () {
        // Date.getTime() returns in milliseconds.
        return Math.round(new Date().getTime() / 1000.0);
    };
    /**
     * check if a token is expired based on given UTC time in seconds.
     * @param expiresOn
     */
    TimeUtils.isTokenExpired = function (expiresOn, offset) {
        // check for access token expiry
        var expirationSec = Number(expiresOn) || 0;
        var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;
        // If current time + offset is greater than token expiration time, then token is expired.
        return (offsetCurrentTimeSec > expirationSec);
    };
    /**
     * If the current time is earlier than the time that a token was cached at, we must discard the token
     * i.e. The system clock was turned back after acquiring the cached token
     * @param cachedAt
     * @param offset
     */
    TimeUtils.wasClockTurnedBack = function (cachedAt) {
        var cachedAtSec = Number(cachedAt);
        return cachedAtSec > TimeUtils.nowSeconds();
    };
    /**
     * Waits for t number of milliseconds
     * @param t number
     * @param value T
     */
    TimeUtils.delay = function (t, value) {
        return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });
    };
    return TimeUtils;
}());


//# sourceMappingURL=TimeUtils.js.map


/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApplicationInsights": () => (/* binding */ ApplicationInsights)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/TelemetryItemCreator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/DomHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js");
/* harmony import */ var _Telemetry_PageViewManager__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Telemetry/PageViewManager */ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js");
/* harmony import */ var _Telemetry_PageVisitTimeManager__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Telemetry/PageVisitTimeManager */ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js");
/* harmony import */ var _Telemetry_PageViewPerformanceManager__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Telemetry/PageViewPerformanceManager */ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Web Analytics, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
 * ApplicationInsights.ts
 * @copyright Microsoft 2018
 */







"use strict";
var durationProperty = "duration";
var strEvent = "event";
function _dispatchEvent(target, evnt) {
    if (target && target.dispatchEvent && evnt) {
        target.dispatchEvent(evnt);
    }
}
function _getReason(error) {
    if (error && error.reason) {
        var reason = error.reason;
        if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(reason) && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(reason.toString)) {
            return reason.toString();
        }
        return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(reason);
    }
    // Pass the original object down which will eventually get evaluated for any message or description
    return error || "";
}
var ApplicationInsights = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.__extendsFn)(ApplicationInsights, _super);
    function ApplicationInsights() {
        var _this = _super.call(this) || this;
        _this.identifier = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__.AnalyticsPluginIdentifier; // do not change name or priority
        _this.priority = 180; // take from reserved priority range 100- 200
        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place
        var _eventTracking;
        var _pageTracking;
        var _properties;
        // Counts number of trackAjax invocations.
        // By default we only monitor X ajax call per view to avoid too much load.
        // Default value is set in config.
        // This counter keeps increasing even after the limit is reached.
        var _trackAjaxAttempts = 0;
        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.
        var _prevUri; // Assigned in the constructor
        var _currUri;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_4__["default"])(ApplicationInsights, _this, function (_self, _base) {
            var location = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getLocation)(true);
            _prevUri = location && location.href || "";
            _self.getCookieMgr = function () {
                return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.safeGetCookieMgr)(_self.core);
            };
            _self.processTelemetry = function (env, itemCtx) {
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.doPerf)(_self.core, function () { return _self.identifier + ":processTelemetry"; }, function () {
                    var doNotSendItem = false;
                    var telemetryInitializersCount = _self._telemetryInitializers.length;
                    itemCtx = _self._getTelCtx(itemCtx);
                    for (var i = 0; i < telemetryInitializersCount; ++i) {
                        var telemetryInitializer = _self._telemetryInitializers[i];
                        if (telemetryInitializer) {
                            try {
                                if (telemetryInitializer.apply(null, [env]) === false) {
                                    doNotSendItem = true;
                                    break;
                                }
                            }
                            catch (e) {
                                // log error but dont stop executing rest of the telemetry initializers
                                // doNotSendItem = true;
                                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) }, true);
                            }
                        }
                    }
                    if (!doNotSendItem) {
                        _self.processNext(env, itemCtx);
                    }
                }, function () { return ({ item: env }); }, !(env.sync));
            };
            _self.trackEvent = function (event, customProperties) {
                try {
                    var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(event, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Event.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Event.envelopeType, _self.diagLog(), customProperties);
                    _self.core.track(telemetryItem);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TrackTraceFailed, "trackTrace failed, trace will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.
             * @param   name    A string that identifies this event uniquely within the document.
             */
            _self.startTrackEvent = function (name) {
                try {
                    _eventTracking.start(name);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.StartTrackEventFailed, "startTrackEvent failed, event will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * Log an extended event that you started timing with `startTrackEvent`.
             * @param   name    The string you used to identify this event in `startTrackEvent`.
             * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
             * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
             */
            _self.stopTrackEvent = function (name, properties, measurements) {
                try {
                    _eventTracking.stop(name, undefined, properties); // Todo: Fix to pass measurements once type is updated
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.StopTrackEventFailed, "stopTrackEvent failed, event will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * @description Log a diagnostic message
             * @param {ITraceTelemetry} trace
             * @param ICustomProperties.
             * @memberof ApplicationInsights
             */
            _self.trackTrace = function (trace, customProperties) {
                try {
                    var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(trace, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Trace.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Trace.envelopeType, _self.diagLog(), customProperties);
                    _self.core.track(telemetryItem);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TrackTraceFailed, "trackTrace failed, trace will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * @description Log a numeric value that is not associated with a specific event. Typically
             * used to send regular reports of performance indicators. To send single measurement, just
             * use the name and average fields of {@link IMetricTelemetry}. If you take measurements
             * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements
             * and sending the resulting average at intervals
             * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.
             * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the
             * portal. Defaults to empty.
             * @memberof ApplicationInsights
             */
            _self.trackMetric = function (metric, customProperties) {
                try {
                    var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(metric, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.Metric.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.Metric.envelopeType, _self.diagLog(), customProperties);
                    _self.core.track(telemetryItem);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TrackMetricFailed, "trackMetric failed, metric will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * Logs that a page or other item was viewed.
             * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.
             * @param customProperties Additional data used to filter events and metrics. Defaults to empty.
             * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration
             */
            _self.trackPageView = function (pageView, customProperties) {
                try {
                    var inPv = pageView || {};
                    _self._pageViewManager.trackPageView(inPv, (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.__assignFn)({}, inPv.properties), inPv.measurements), customProperties));
                    if (_self.config.autoTrackPageVisitTime) {
                        _self._pageVisitTimeManager.trackPreviousPageVisit(inPv.name, inPv.uri);
                    }
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TrackPVFailed, "trackPageView failed, page view will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * Create a page view telemetry item and send it to the SDK pipeline through the core.track API
             * @param pageView Page view item to be sent
             * @param properties Custom properties (Part C) that a user can add to the telemetry item
             * @param systemProperties System level properties (Part A) that a user can add to the telemetry item
             */
            _self.sendPageViewInternal = function (pageView, properties, systemProperties) {
                var doc = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
                if (doc) {
                    pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;
                }
                var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(pageView, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.PageView.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.PageView.envelopeType, _self.diagLog(), properties, systemProperties);
                _self.core.track(telemetryItem);
                // reset ajaxes counter
                _trackAjaxAttempts = 0;
            };
            /**
             * @ignore INTERNAL ONLY
             * @param pageViewPerformance
             * @param properties
             */
            _self.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {
                var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(pageViewPerformance, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.PageViewPerformance.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.PageViewPerformance.envelopeType, _self.diagLog(), properties, systemProperties);
                _self.core.track(telemetryItem);
            };
            /**
             * Send browser performance metrics.
             * @param pageViewPerformance
             * @param customProperties
             */
            _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {
                try {
                    _self._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);
                    _self.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TrackPVFailed, "trackPageViewPerformance failed, page view will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,
             * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view
             * and send the event.
             * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.
             */
            _self.startTrackPage = function (name) {
                try {
                    if (typeof name !== "string") {
                        var doc = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
                        name = doc && doc.title || "";
                    }
                    _pageTracking.start(name);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.StartTrackFailed, "startTrackPage failed, page view may not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.
             * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.
             * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.
             * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
             * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
             * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
             */
            _self.stopTrackPage = function (name, url, properties, measurement) {
                try {
                    if (typeof name !== "string") {
                        var doc = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
                        name = doc && doc.title || "";
                    }
                    if (typeof url !== "string") {
                        var loc = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getLocation)();
                        url = loc && loc.href || "";
                    }
                    _pageTracking.stop(name, url, properties, measurement);
                    if (_self.config.autoTrackPageVisitTime) {
                        _self._pageVisitTimeManager.trackPreviousPageVisit(name, url);
                    }
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.StopTrackFailed, "stopTrackPage failed, page view will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * @ignore INTERNAL ONLY
             * @param exception
             * @param properties
             * @param systemProperties
             */
            _self.sendExceptionInternal = function (exception, customProperties, systemProperties) {
                var theError = exception.exception || exception.error || new Error(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__.strNotSpecified);
                var exceptionPartB = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception(_self.diagLog(), theError, exception.properties || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();
                var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(exceptionPartB, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.envelopeType, _self.diagLog(), customProperties, systemProperties);
                _self.core.track(telemetryItem);
            };
            /**
             * Log an exception you have caught.
             *
             * @param {IExceptionTelemetry} exception   Object which contains exception to be sent
             * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.
             *
             * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.
             * @memberof ApplicationInsights
             */
            _self.trackException = function (exception, customProperties) {
                try {
                    _self.sendExceptionInternal(exception, customProperties);
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TrackExceptionFailed, "trackException failed, exception will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e) });
                }
            };
            /**
             * @description Custom error handler for Application Insights Analytics
             * @param {IAutoExceptionTelemetry} exception
             * @memberof ApplicationInsights
             */
            _self._onerror = function (exception) {
                var error = exception && exception.error;
                var evt = exception && exception.evt;
                try {
                    if (!evt) {
                        var _window = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getWindow)();
                        if (_window) {
                            evt = _window[strEvent];
                        }
                    }
                    var url = (exception && exception.url) || ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)() || {}).URL;
                    // If no error source is provided assume the default window.onerror handler
                    var errorSrc = exception.errorSrc || "window.onerror@" + url + ":" + (exception.lineNumber || 0) + ":" + (exception.columnNumber || 0);
                    var properties = {
                        errorSrc: errorSrc,
                        url: url,
                        lineNumber: exception.lineNumber || 0,
                        columnNumber: exception.columnNumber || 0,
                        message: exception.message
                    };
                    if ((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.isCrossOriginError)(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception.error)) {
                        _sendCORSException(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.CreateAutoException("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.", url, exception.lineNumber || 0, exception.columnNumber || 0, error, evt, null, errorSrc), properties);
                    }
                    else {
                        if (!exception.errorSrc) {
                            exception.errorSrc = errorSrc;
                        }
                        _self.trackException({ exception: exception, severityLevel: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_17__.SeverityLevel.Error }, properties);
                    }
                }
                catch (e) {
                    var errorString = error ? (error.name + ", " + error.message) : "null";
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.ExceptionWhileLoggingError, "_onError threw exception while logging error, error will not be collected: "
                        + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.dumpObj)(e), errorString: errorString });
                }
            };
            _self.addTelemetryInitializer = function (telemetryInitializer) {
                _self._telemetryInitializers.push(telemetryInitializer);
            };
            _self.initialize = function (config, core, extensions, pluginChain) {
                if (_self.isInitialized()) {
                    return;
                }
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(core)) {
                    throw Error("Error initializing");
                }
                _base.initialize(config, core, extensions, pluginChain);
                _self.setInitialized(false); // resetting the initialized state, just in case the following fails
                var ctx = _self._getTelCtx();
                var identifier = _self.identifier;
                _self.config = ctx.getExtCfg(identifier);
                // load default values if specified
                var defaults = ApplicationInsights.getDefaultConfig(config);
                if (defaults !== undefined) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(defaults, function (field, value) {
                        // for each unspecified field, set the default value
                        _self.config[field] = ctx.getConfig(identifier, field, value);
                        if (_self.config[field] === undefined) {
                            _self.config[field] = value;
                        }
                    });
                }
                // Todo: move this out of static state
                if (_self.config.isStorageUseDisabled) {
                    (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__.utlDisableStorage)();
                }
                var configGetters = {
                    instrumentationKey: function () { return config.instrumentationKey; },
                    accountId: function () { return _self.config.accountId || config.accountId; },
                    sessionRenewalMs: function () { return _self.config.sessionRenewalMs || config.sessionRenewalMs; },
                    sessionExpirationMs: function () { return _self.config.sessionExpirationMs || config.sessionExpirationMs; },
                    sampleRate: function () { return _self.config.samplingPercentage || config.samplingPercentage; },
                    sdkExtension: function () { return _self.config.sdkExtension || config.sdkExtension; },
                    isBrowserLinkTrackingEnabled: function () { return _self.config.isBrowserLinkTrackingEnabled || config.isBrowserLinkTrackingEnabled; },
                    appId: function () { return _self.config.appId || config.appId; }
                };
                _self._pageViewPerformanceManager = new _Telemetry_PageViewPerformanceManager__WEBPACK_IMPORTED_MODULE_19__.PageViewPerformanceManager(_self.core);
                _self._pageViewManager = new _Telemetry_PageViewManager__WEBPACK_IMPORTED_MODULE_20__.PageViewManager(_this, _self.config.overridePageViewDuration, _self.core, _self._pageViewPerformanceManager);
                _self._pageVisitTimeManager = new _Telemetry_PageVisitTimeManager__WEBPACK_IMPORTED_MODULE_21__.PageVisitTimeManager(_self.diagLog(), function (pageName, pageUrl, pageVisitTime) { return trackPageVisitTime(pageName, pageUrl, pageVisitTime); });
                _self._telemetryInitializers = _self._telemetryInitializers || [];
                _addDefaultTelemetryInitializers(configGetters);
                _eventTracking = new Timing(_self.diagLog(), "trackEvent");
                _eventTracking.action =
                    function (name, url, duration, properties) {
                        if (!properties) {
                            properties = {};
                        }
                        properties[durationProperty] = duration.toString();
                        _self.trackEvent({ name: name, properties: properties });
                    };
                // initialize page view timing
                _pageTracking = new Timing(_self.diagLog(), "trackPageView");
                _pageTracking.action = function (name, url, duration, properties, measurements) {
                    // duration must be a custom property in order for the collector to extract it
                    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(properties)) {
                        properties = {};
                    }
                    properties[durationProperty] = duration.toString();
                    var pageViewItem = {
                        name: name,
                        uri: url,
                        properties: properties,
                        measurements: measurements
                    };
                    _self.sendPageViewInternal(pageViewItem, properties);
                };
                var _window = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getWindow)();
                var _history = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getHistory)();
                var _location = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getLocation)(true);
                var instance = _this;
                if (_self.config.disableExceptionTracking === false &&
                    !_self.config.autoExceptionInstrumented && _window) {
                    // We want to enable exception auto collection and it has not been done so yet
                    var onerror_1 = "onerror";
                    var originalOnError_1 = _window[onerror_1];
                    _window.onerror = function (message, url, lineNumber, columnNumber, error) {
                        var evt = _window[strEvent];
                        var handled = originalOnError_1 && originalOnError_1(message, url, lineNumber, columnNumber, error);
                        if (handled !== true) { // handled could be typeof function
                            instance._onerror(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.CreateAutoException(message, url, lineNumber, columnNumber, error, evt));
                        }
                        return handled;
                    };
                    _self.config.autoExceptionInstrumented = true;
                }
                if (_self.config.disableExceptionTracking === false &&
                    _self.config.enableUnhandledPromiseRejectionTracking === true &&
                    !_self.config.autoUnhandledPromiseInstrumented && _window) {
                    // We want to enable exception auto collection and it has not been done so yet
                    var onunhandledrejection_1 = "onunhandledrejection";
                    var originalOnUnhandledRejection_1 = _window[onunhandledrejection_1];
                    _window[onunhandledrejection_1] = function (error) {
                        var evt = _window[strEvent];
                        var handled = originalOnUnhandledRejection_1 && originalOnUnhandledRejection_1.call(_window, error);
                        if (handled !== true) { // handled could be typeof function
                            instance._onerror(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.CreateAutoException(_getReason(error), _location ? _location.href : "", 0, 0, error, evt));
                        }
                        return handled;
                    };
                    _self.config.autoUnhandledPromiseInstrumented = true;
                }
                /**
                 * Create a custom "locationchange" event which is triggered each time the history object is changed
                 */
                if (_self.config.enableAutoRouteTracking === true
                    && _history && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(_history.pushState) && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(_history.replaceState)
                    && _window
                    && typeof Event !== "undefined") {
                    var _self_1 = _this;
                    // Find the properties plugin
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrForEach)(extensions, function (extension) {
                        if (extension.identifier === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__.PropertiesPluginIdentifier) {
                            _properties = extension;
                        }
                    });
                    _history.pushState = (function (f) { return function pushState() {
                        var ret = f.apply(this, arguments);
                        _dispatchEvent(_window, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.createDomEvent)(_self_1.config.namePrefix + "pushState"));
                        _dispatchEvent(_window, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.createDomEvent)(_self_1.config.namePrefix + "locationchange"));
                        return ret;
                    }; })(_history.pushState);
                    _history.replaceState = (function (f) { return function replaceState() {
                        var ret = f.apply(this, arguments);
                        _dispatchEvent(_window, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.createDomEvent)(_self_1.config.namePrefix + "replaceState"));
                        _dispatchEvent(_window, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.createDomEvent)(_self_1.config.namePrefix + "locationchange"));
                        return ret;
                    }; })(_history.replaceState);
                    if (_window.addEventListener) {
                        _window.addEventListener(_self_1.config.namePrefix + "popstate", function () {
                            _dispatchEvent(_window, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.createDomEvent)(_self_1.config.namePrefix + "locationchange"));
                        });
                        _window.addEventListener(_self_1.config.namePrefix + "locationchange", function () {
                            if (_properties && _properties.context && _properties.context.telemetryTrace) {
                                _properties.context.telemetryTrace.traceID = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_23__.generateW3CId)();
                                var traceLocationName = "_unknown_";
                                if (_location && _location.pathname) {
                                    traceLocationName = _location.pathname + (_location.hash || "");
                                }
                                // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it
                                _properties.context.telemetryTrace.name = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_24__.dataSanitizeString)(_self_1.diagLog(), traceLocationName);
                            }
                            if (_currUri) {
                                _prevUri = _currUri;
                                _currUri = _location && _location.href || "";
                            }
                            else {
                                _currUri = _location && _location.href || "";
                            }
                            setTimeout((function (uri) {
                                // todo: override start time so that it is not affected by autoRoutePVDelay
                                _self_1.trackPageView({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0
                            }).bind(_this, _prevUri), _self_1.autoRoutePVDelay);
                        });
                    }
                }
                _self.setInitialized(true);
            };
            /**
             * Log a page visit time
             * @param    pageName    Name of page
             * @param    pageVisitDuration Duration of visit to the page in milleseconds
             */
            function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {
                var properties = { PageName: pageName, PageUrl: pageUrl };
                _self.trackMetric({
                    name: "PageVisitTime",
                    average: pageVisitTime,
                    max: pageVisitTime,
                    min: pageVisitTime,
                    sampleCount: 1
                }, properties);
            }
            function _addDefaultTelemetryInitializers(configGetters) {
                if (!configGetters.isBrowserLinkTrackingEnabled()) {
                    var browserLinkPaths_1 = ["/browserLinkSignalR/", "/__browserLink/"];
                    var dropBrowserLinkRequests = function (envelope) {
                        if (envelope.baseType === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_25__.RemoteDependencyData.dataType) {
                            var remoteData = envelope.baseData;
                            if (remoteData) {
                                for (var i = 0; i < browserLinkPaths_1.length; i++) {
                                    if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    };
                    _addTelemetryInitializer(dropBrowserLinkRequests);
                }
            }
            function _addTelemetryInitializer(telemetryInitializer) {
                _self._telemetryInitializers.push(telemetryInitializer);
            }
            function _sendCORSException(exception, properties) {
                var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.TelemetryItemCreator.create(exception, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Exception.envelopeType, _self.diagLog(), properties);
                _self.core.track(telemetryItem);
            }
        });
        return _this;
    }
    ApplicationInsights.getDefaultConfig = function (config) {
        if (!config) {
            config = {};
        }
        // set default values
        config.sessionRenewalMs = 30 * 60 * 1000;
        config.sessionExpirationMs = 24 * 60 * 60 * 1000;
        config.disableExceptionTracking = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.disableExceptionTracking);
        config.autoTrackPageVisitTime = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.autoTrackPageVisitTime);
        config.overridePageViewDuration = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.overridePageViewDuration);
        config.enableUnhandledPromiseRejectionTracking = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.enableUnhandledPromiseRejectionTracking);
        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {
            config.samplingPercentage = 100;
        }
        config.isStorageUseDisabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.isStorageUseDisabled);
        config.isBrowserLinkTrackingEnabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.isBrowserLinkTrackingEnabled);
        config.enableAutoRouteTracking = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.enableAutoRouteTracking);
        config.namePrefix = config.namePrefix || "";
        config.enableDebug = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.enableDebug);
        config.disableFlushOnBeforeUnload = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.disableFlushOnBeforeUnload);
        config.disableFlushOnUnload = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.stringToBoolOrDefault)(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload);
        return config;
    };
// Removed Stub for ApplicationInsights.prototype.getCookieMgr.
// Removed Stub for ApplicationInsights.prototype.processTelemetry.
// Removed Stub for ApplicationInsights.prototype.trackEvent.
// Removed Stub for ApplicationInsights.prototype.startTrackEvent.
// Removed Stub for ApplicationInsights.prototype.stopTrackEvent.
// Removed Stub for ApplicationInsights.prototype.trackTrace.
// Removed Stub for ApplicationInsights.prototype.trackMetric.
// Removed Stub for ApplicationInsights.prototype.trackPageView.
// Removed Stub for ApplicationInsights.prototype.sendPageViewInternal.
// Removed Stub for ApplicationInsights.prototype.sendPageViewPerformanceInternal.
// Removed Stub for ApplicationInsights.prototype.trackPageViewPerformance.
// Removed Stub for ApplicationInsights.prototype.startTrackPage.
// Removed Stub for ApplicationInsights.prototype.stopTrackPage.
// Removed Stub for ApplicationInsights.prototype.sendExceptionInternal.
// Removed Stub for ApplicationInsights.prototype.trackException.
// Removed Stub for ApplicationInsights.prototype._onerror.
// Removed Stub for ApplicationInsights.prototype.addTelemetryInitializer.
// Removed Stub for ApplicationInsights.prototype.initialize.
    ApplicationInsights.Version = "2.7.4"; // Not currently used anywhere
    return ApplicationInsights;
}(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_26__.BaseTelemetryPlugin));

/**
 * Used to record timed events and page views.
 */
var Timing = /** @class */ (function () {
    function Timing(logger, name) {
        var _self = this;
        var _events = {};
        _self.start = function (name) {
            if (typeof _events[name] !== "undefined") {
                logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.StartCalledMoreThanOnce, "start was called more than once for this event without calling stop.", { name: name, key: name }, true);
            }
            _events[name] = +new Date;
        };
        _self.stop = function (name, url, properties, measurements) {
            var start = _events[name];
            if (isNaN(start)) {
                logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.StopCalledWithoutStart, "stop was called without a corresponding start.", { name: name, key: name }, true);
            }
            else {
                var end = +new Date;
                var duration = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_27__.dateTimeUtilsDuration)(start, end);
                _self.action(name, url, duration, properties, measurements);
            }
            delete _events[name];
            _events[name] = undefined;
        };
    }
    return Timing;
}());
//# sourceMappingURL=ApplicationInsights.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageViewManager": () => (/* binding */ PageViewManager)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Web Analytics, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





/**
 * Class encapsulates sending page views and page view performance telemetry.
 */
var PageViewManager = /** @class */ (function () {
    function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__["default"])(PageViewManager, this, function (_self) {
            var intervalHandle = null;
            var itemQueue = [];
            var pageViewPerformanceSent = false;
            var _logger;
            if (core) {
                _logger = core.logger;
            }
            function _flushChannels() {
                if (core) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(core.getTransmissionControls(), function (queues) {
                        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(queues, function (q) { return q.flush(true); });
                    });
                }
            }
            function _addQueue(cb) {
                itemQueue.push(cb);
                if (!intervalHandle) {
                    intervalHandle = setInterval((function () {
                        var allItems = itemQueue.slice(0);
                        var doFlush = false;
                        itemQueue = [];
                        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(allItems, function (item) {
                            if (!item()) {
                                // Not processed so rescheduled
                                itemQueue.push(item);
                            }
                            else {
                                doFlush = true;
                            }
                        });
                        if (itemQueue.length === 0) {
                            clearInterval(intervalHandle);
                            intervalHandle = null;
                        }
                        if (doFlush) {
                            // We process at least one item so flush the queue
                            _flushChannels();
                        }
                    }), 100);
                }
            }
            _self.trackPageView = function (pageView, customProperties) {
                var name = pageView.name;
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(name) || typeof name !== "string") {
                    var doc = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.getDocument)();
                    name = pageView.name = doc && doc.title || "";
                }
                var uri = pageView.uri;
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(uri) || typeof uri !== "string") {
                    var location_1 = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.getLocation)();
                    uri = pageView.uri = location_1 && location_1.href || "";
                }
                // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user
                // do not provide the duration, set duration to undefined
                // Also this is case 4
                if (!pageViewPerformanceManager.isPerformanceTimingSupported()) {
                    appInsights.sendPageViewInternal(pageView, customProperties);
                    _flushChannels();
                    // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)
                    _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__._InternalMessageId.NavigationTimingNotSupported, "trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");
                    return;
                }
                var pageViewSent = false;
                var customDuration;
                // if the performance timing is supported by the browser, calculate the custom duration
                var start = pageViewPerformanceManager.getPerformanceTiming().navigationStart;
                if (start > 0) {
                    customDuration = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.dateTimeUtilsDuration)(start, +new Date);
                    if (!pageViewPerformanceManager.shouldCollectDuration(customDuration)) {
                        customDuration = undefined;
                    }
                }
                // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if
                // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier
                var duration;
                if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(customProperties) &&
                    !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(customProperties.duration)) {
                    duration = customProperties.duration;
                }
                if (overridePageViewDuration || !isNaN(duration)) {
                    if (isNaN(duration)) {
                        // case 3
                        if (!customProperties) {
                            customProperties = {};
                        }
                        customProperties["duration"] = customDuration;
                    }
                    // case 2
                    appInsights.sendPageViewInternal(pageView, customProperties);
                    _flushChannels();
                    pageViewSent = true;
                }
                // now try to send the page view performance telemetry
                var maxDurationLimit = 60000;
                if (!customProperties) {
                    customProperties = {};
                }
                // Queue the event for processing
                _addQueue(function () {
                    var processed = false;
                    try {
                        if (pageViewPerformanceManager.isPerformanceTimingDataReady()) {
                            processed = true;
                            var pageViewPerformance = {
                                name: name,
                                uri: uri
                            };
                            pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);
                            if (!pageViewPerformance.isValid && !pageViewSent) {
                                // If navigation timing gives invalid numbers, then go back to "override page view duration" mode.
                                // That's the best value we can get that makes sense.
                                customProperties["duration"] = customDuration;
                                appInsights.sendPageViewInternal(pageView, customProperties);
                            }
                            else {
                                if (!pageViewSent) {
                                    customProperties["duration"] = pageViewPerformance.durationMs;
                                    appInsights.sendPageViewInternal(pageView, customProperties);
                                }
                                if (!pageViewPerformanceSent) {
                                    appInsights.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);
                                    pageViewPerformanceSent = true;
                                }
                            }
                        }
                        else if (start > 0 && (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.dateTimeUtilsDuration)(start, +new Date) > maxDurationLimit) {
                            // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry
                            // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready
                            processed = true;
                            if (!pageViewSent) {
                                customProperties["duration"] = maxDurationLimit;
                                appInsights.sendPageViewInternal(pageView, customProperties);
                            }
                        }
                    }
                    catch (e) {
                        _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__._InternalMessageId.TrackPVFailedCalc, "trackPageView failed on page load calculation: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.dumpObj)(e) });
                    }
                    return processed;
                });
            };
        });
    }
// Removed Stub for PageViewManager.prototype.trackPageView.
    return PageViewManager;
}());

//# sourceMappingURL=PageViewManager.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageViewPerformanceManager": () => (/* binding */ PageViewPerformanceManager)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/*
 * Application Insights JavaScript SDK - Web Analytics, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




/**
 * Class encapsulates sending page view performance telemetry.
 */
var PageViewPerformanceManager = /** @class */ (function () {
    function PageViewPerformanceManager(core) {
        this.MAX_DURATION_ALLOWED = 3600000; // 1h
        if (core) {
            this._logger = core.logger;
        }
    }
    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {
        pageViewPerformance.isValid = false;
        /*
         * http://www.w3.org/TR/navigation-timing/#processing-model
         *  |-navigationStart
         *  |             |-connectEnd
         *  |             ||-requestStart
         *  |             ||             |-responseStart
         *  |             ||             |              |-responseEnd
         *  |             ||             |              |
         *  |             ||             |              |         |-loadEventEnd
         *  |---network---||---request---|---response---|---dom---|
         *  |--------------------------total----------------------|
         *
         *  total = The difference between the load event of the current document is completed and the first recorded timestamp of the performance entry : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#duration
         *  network = Redirect time + App Cache + DNS lookup time + TCP connection time
         *  request = Request time : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#request_time
         *  response = Response time
         *  dom = Document load time : https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info
         *      = Document processing time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#document_processing
         *      + Loading time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#loading
         */
        var navigationTiming = this.getPerformanceNavigationTiming();
        var timing = this.getPerformanceTiming();
        var total = 0;
        var network = 0;
        var request = 0;
        var response = 0;
        var dom = 0;
        if (navigationTiming || timing) {
            if (navigationTiming) {
                total = navigationTiming.duration;
                /**
                 * support both cases:
                 * - startTime is always zero: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming
                 * - for older browsers where the startTime is not zero
                 */
                network = navigationTiming.startTime === 0 ? navigationTiming.connectEnd : (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(navigationTiming.startTime, navigationTiming.connectEnd);
                request = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(navigationTiming.requestStart, navigationTiming.responseStart);
                response = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(navigationTiming.responseStart, navigationTiming.responseEnd);
                dom = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(navigationTiming.responseEnd, navigationTiming.loadEventEnd);
            }
            else {
                total = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(timing.navigationStart, timing.loadEventEnd);
                network = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(timing.navigationStart, timing.connectEnd);
                request = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(timing.requestStart, timing.responseStart);
                response = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(timing.responseStart, timing.responseEnd);
                dom = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(timing.responseEnd, timing.loadEventEnd);
            }
            if (total === 0) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.ErrorPVCalc, "error calculating page view performance.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else if (!this.shouldCollectDuration(total, network, request, response, dom)) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.InvalidDurationValue, "Invalid page load duration value. Browser perf data won't be sent.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {
                // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT
                // in this case, don't report client performance from this page
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.ClientPerformanceMathError, "client performance math error.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else {
                pageViewPerformance.durationMs = total;
                // // convert to timespans
                pageViewPerformance.perfTotal = pageViewPerformance.duration = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.msToTimeSpan)(total);
                pageViewPerformance.networkConnect = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.msToTimeSpan)(network);
                pageViewPerformance.sentRequest = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.msToTimeSpan)(request);
                pageViewPerformance.receivedResponse = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.msToTimeSpan)(response);
                pageViewPerformance.domProcessing = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.msToTimeSpan)(dom);
                pageViewPerformance.isValid = true;
            }
        }
    };
    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {
        if (this.isPerformanceTimingSupported()) {
            return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)().timing;
        }
        return null;
    };
    PageViewPerformanceManager.prototype.getPerformanceNavigationTiming = function () {
        if (this.isPerformanceNavigationTimingSupported()) {
            return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)().getEntriesByType("navigation")[0];
        }
        return null;
    };
    /**
     * Returns true is window PerformanceNavigationTiming API is supported, false otherwise.
     */
    PageViewPerformanceManager.prototype.isPerformanceNavigationTimingSupported = function () {
        var perf = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)();
        return perf && perf.getEntriesByType && perf.getEntriesByType("navigation").length > 0;
    };
    /**
     * Returns true is window performance timing API is supported, false otherwise.
     */
    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {
        var perf = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)();
        return perf && perf.timing;
    };
    /**
     * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.
     * Returns true if ready, false otherwise.
     */
    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {
        var perf = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)();
        var timing = perf ? perf.timing : 0;
        return timing
            && timing.domainLookupStart > 0
            && timing.navigationStart > 0
            && timing.responseStart > 0
            && timing.requestStart > 0
            && timing.loadEventEnd > 0
            && timing.responseEnd > 0
            && timing.connectEnd > 0
            && timing.domLoading > 0;
    };
    /**
     * This method tells if given durations should be excluded from collection.
     */
    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {
        var durations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            durations[_i] = arguments[_i];
        }
        var _navigator = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getNavigator)() || {};
        // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en
        var botAgentNames = ["googlebot", "adsbot-google", "apis-google", "mediapartners-google"];
        var userAgent = _navigator.userAgent;
        var isGoogleBot = false;
        if (userAgent) {
            for (var i = 0; i < botAgentNames.length; i++) {
                isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i]) !== -1;
            }
        }
        if (isGoogleBot) {
            // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.
            return false;
        }
        else {
            // for other page views, don't report if it's outside of a reasonable range
            for (var i = 0; i < durations.length; i++) {
                if (durations[i] < 0 || durations[i] >= this.MAX_DURATION_ALLOWED) {
                    return false;
                }
            }
        }
        return true;
    };
    return PageViewPerformanceManager;
}());

//# sourceMappingURL=PageViewPerformanceManager.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageVisitData": () => (/* binding */ PageVisitData),
/* harmony export */   "PageVisitTimeManager": () => (/* binding */ PageVisitTimeManager)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Web Analytics, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




/**
 * Used to track page visit durations
 */
var PageVisitTimeManager = /** @class */ (function () {
    /**
     * Creates a new instance of PageVisitTimeManager
     * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)
     * @returns {}
     */
    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {
        this.prevPageVisitDataKeyName = "prevPageVisitData";
        this.pageVisitTimeTrackingHandler = pageVisitTimeTrackingHandler;
        this._logger = logger;
    }
    /**
     * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time
     * @param currentPageName Name of page to begin timing for visit duration
     * @param currentPageUrl Url of page to begin timing for visit duration
     */
    PageVisitTimeManager.prototype.trackPreviousPageVisit = function (currentPageName, currentPageUrl) {
        try {
            // Restart timer for new page view
            var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, currentPageUrl);
            // If there was a page already being timed, track the visit time for it now.
            if (prevPageVisitTimeData) {
                this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);
            }
        }
        catch (e) {
            this._logger.warnToConsole("Auto track page visit time failed, metric will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.dumpObj)(e));
        }
    };
    /**
     * Stops timing of current page (if exists) and starts timing for duration of visit to pageName
     * @param pageName Name of page to begin timing visit duration
     * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.
     */
    PageVisitTimeManager.prototype.restartPageVisitTimer = function (pageName, pageUrl) {
        try {
            var prevPageVisitData = this.stopPageVisitTimer();
            this.startPageVisitTimer(pageName, pageUrl);
            return prevPageVisitData;
        }
        catch (e) {
            this._logger.warnToConsole("Call to restart failed: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.dumpObj)(e));
            return null;
        }
    };
    /**
     * Starts timing visit duration of pageName
     * @param pageName
     * @returns {}
     */
    PageVisitTimeManager.prototype.startPageVisitTimer = function (pageName, pageUrl) {
        try {
            if ((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.utlCanUseSessionStorage)()) {
                if ((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.utlGetSessionStorage)(this._logger, this.prevPageVisitDataKeyName) != null) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.throwError)("Cannot call startPageVisit consecutively without first calling stopPageVisit");
                }
                var currPageVisitData = new PageVisitData(pageName, pageUrl);
                var currPageVisitDataStr = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getJSON)().stringify(currPageVisitData);
                (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.utlSetSessionStorage)(this._logger, this.prevPageVisitDataKeyName, currPageVisitDataStr);
            }
        }
        catch (e) {
            // TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out
            this._logger.warnToConsole("Call to start failed: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.dumpObj)(e));
        }
    };
    /**
     * Stops timing of current page, if exists.
     * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.
     */
    PageVisitTimeManager.prototype.stopPageVisitTimer = function () {
        try {
            if ((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.utlCanUseSessionStorage)()) {
                // Define end time of page's visit
                var pageVisitEndTime = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.dateNow)();
                // Try to retrieve  page name and start time from session storage
                var pageVisitDataJsonStr = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.utlGetSessionStorage)(this._logger, this.prevPageVisitDataKeyName);
                if (pageVisitDataJsonStr && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.hasJSON)()) {
                    // if previous page data exists, set end time of visit
                    var prevPageVisitData = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getJSON)().parse(pageVisitDataJsonStr);
                    prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;
                    // Remove data from storage since we already used it
                    (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.utlRemoveSessionStorage)(this._logger, this.prevPageVisitDataKeyName);
                    // Return page visit data
                    return prevPageVisitData;
                }
                else {
                    return null;
                }
            }
            return null;
        }
        catch (e) {
            this._logger.warnToConsole("Stop page visit timer failed: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.dumpObj)(e));
            return null;
        }
    };
    return PageVisitTimeManager;
}());

var PageVisitData = /** @class */ (function () {
    function PageVisitData(pageName, pageUrl) {
        this.pageVisitStartTime = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.dateNow)();
        this.pageName = pageName;
        this.pageUrl = pageUrl;
    }
    return PageVisitData;
}());

//# sourceMappingURL=PageVisitTimeManager.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DependencyEnvelopeCreator": () => (/* binding */ DependencyEnvelopeCreator),
/* harmony export */   "EnvelopeCreator": () => (/* binding */ EnvelopeCreator),
/* harmony export */   "EventEnvelopeCreator": () => (/* binding */ EventEnvelopeCreator),
/* harmony export */   "ExceptionEnvelopeCreator": () => (/* binding */ ExceptionEnvelopeCreator),
/* harmony export */   "MetricEnvelopeCreator": () => (/* binding */ MetricEnvelopeCreator),
/* harmony export */   "PageViewEnvelopeCreator": () => (/* binding */ PageViewEnvelopeCreator),
/* harmony export */   "PageViewPerformanceEnvelopeCreator": () => (/* binding */ PageViewPerformanceEnvelopeCreator),
/* harmony export */   "TraceEnvelopeCreator": () => (/* binding */ TraceEnvelopeCreator)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/PartAExtensions.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Envelope.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Data.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload
var strBaseType = "baseType";
var strBaseData = "baseData";
var strProperties = "properties";
var strTrue = "true";
function _setValueIf(target, field, value) {
    return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(target, field, value, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isTruthy);
}
/*
 * Maps Part A data from CS 4.0
 */
function _extractPartAExtensions(logger, item, env) {
    // todo: switch to keys from common in this method
    var envTags = env.tags = env.tags || {};
    var itmExt = item.ext = item.ext || {};
    var itmTags = item.tags = item.tags || [];
    var extUser = itmExt.user;
    if (extUser) {
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.userAuthUserId, extUser.authId);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.userId, extUser.id || extUser.localId);
    }
    var extApp = itmExt.app;
    if (extApp) {
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.sessionId, extApp.sesId);
    }
    var extDevice = itmExt.device;
    if (extDevice) {
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceId, extDevice.id || extDevice.localId);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceType, extDevice.deviceClass);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceIp, extDevice.ip);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceModel, extDevice.model);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceType, extDevice.deviceType);
    }
    var web = item.ext.web;
    if (web) {
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceLanguage, web.browserLang);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceBrowserVersion, web.browserVer);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceBrowser, web.browser);
        var envData = env.data = env.data || {};
        var envBaseData = envData[strBaseData] = envData[strBaseData] || {};
        var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};
        _setValueIf(envProps, "domain", web.domain);
        _setValueIf(envProps, "isManual", web.isManual ? strTrue : null);
        _setValueIf(envProps, "screenRes", web.screenRes);
        _setValueIf(envProps, "userConsent", web.userConsent ? strTrue : null);
    }
    var extOs = itmExt.os;
    if (extOs) {
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.deviceOS, extOs.name);
    }
    // No support for mapping Trace.traceState to 2.0 as it is currently empty
    var extTrace = itmExt.trace;
    if (extTrace) {
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.operationParentId, extTrace.parentID);
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.operationName, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, extTrace.name));
        _setValueIf(envTags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.operationId, extTrace.traceID);
    }
    // Sample 4.0 schema
    //  {
    //     "time" : "2018-09-05T22:51:22.4936Z",
    //     "name" : "MetricWithNamespace",
    //     "iKey" : "ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e",
    //     "ext": {  "cloud": {
    //          "role": "WATSON3",
    //          "roleInstance": "CO4AEAP00000260"
    //      },
    //      "device": {}, "correlation": {} },
    //      "tags": [
    //        { "amazon.region" : "east2" },
    //        { "os.expid" : "wp:02df239" }
    //     ]
    //   }
    var tgs = {};
    // deals with tags.push({object})
    for (var i = itmTags.length - 1; i >= 0; i--) {
        var tg = itmTags[i];
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(tg, function (key, value) {
            tgs[key] = value;
        });
        itmTags.splice(i, 1);
    }
    // deals with tags[key]=value (and handles hasOwnProperty)
    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(itmTags, function (tg, value) {
        tgs[tg] = value;
    });
    var theTags = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_3__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_3__.__assignFn)({}, envTags), tgs);
    if (!theTags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.internalSdkVersion]) {
        // Append a version in case it is not already set
        theTags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CtxTagKeys.internalSdkVersion] = "javascript:".concat(EnvelopeCreator.Version);
    }
    env.tags = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.optimizeObject)(theTags);
}
function _extractPropsAndMeasurements(data, properties, measurements) {
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(data, function (key, value) {
            if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value)) {
                measurements[key] = value;
            }
            else if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {
                properties[key] = value;
            }
            else if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.hasJSON)()) {
                properties[key] = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.getJSON)().stringify(value);
            }
        });
    }
}
function _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(properties)) {
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(properties, function (key, value) {
            properties[key] = value || customUndefinedValue;
        });
    }
}
// TODO: Do we want this to take logger as arg or use this._logger as nonstatic?
function _createEnvelope(logger, envelopeType, telemetryItem, data) {
    var envelope = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__.Envelope(logger, data, envelopeType);
    _setValueIf(envelope, "sampleRate", telemetryItem[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__.SampleRate]);
    if ((telemetryItem[strBaseData] || {}).startTime) {
        envelope.time = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.toISOString)(telemetryItem[strBaseData].startTime);
    }
    envelope.iKey = telemetryItem.iKey;
    var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, "");
    envelope.name = envelope.name.replace("{0}", iKeyNoDashes);
    // extract all extensions from ctx
    _extractPartAExtensions(logger, telemetryItem, envelope);
    // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags
    telemetryItem.tags = telemetryItem.tags || [];
    return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.optimizeObject)(envelope);
}
function EnvelopeCreatorInit(logger, telemetryItem) {
    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(telemetryItem[strBaseData])) {
        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalMessageId.TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
    }
}
var EnvelopeCreator = {
    Version: "2.7.4"
};
function DependencyEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    var customMeasurements = telemetryItem[strBaseData].measurements || {};
    var customProperties = telemetryItem[strBaseData][strProperties] || {};
    _extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
    }
    var bd = telemetryItem[strBaseData];
    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bd)) {
        logger.warnToConsole("Invalid input for dependency data");
        return null;
    }
    var method = bd[strProperties] && bd[strProperties][_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__.HttpMethod] ? bd[strProperties][_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__.HttpMethod] : "GET";
    var remoteDepData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.RemoteDependencyData(logger, bd.id, bd.target, bd.name, bd.duration, bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.RemoteDependencyData.dataType, remoteDepData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.RemoteDependencyData.envelopeType, telemetryItem, data);
}
function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    var customProperties = {};
    var customMeasurements = {};
    if (telemetryItem[strBaseType] !== _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Event.dataType) {
        customProperties["baseTypeSource"] = telemetryItem[strBaseType]; // save the passed in base type as a property
    }
    if (telemetryItem[strBaseType] === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Event.dataType) { // take collection
        customProperties = telemetryItem[strBaseData][strProperties] || {};
        customMeasurements = telemetryItem[strBaseData].measurements || {};
    }
    else { // if its not a known type, convert to custom event
        if (telemetryItem[strBaseData]) {
            _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);
        }
    }
    // Extract root level properties from part C telemetryItem.data
    _extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
    }
    var eventName = telemetryItem[strBaseData].name;
    var eventData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Event(logger, eventName, customProperties, customMeasurements);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Event.dataType, eventData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Event.envelopeType, telemetryItem, data);
}
function ExceptionEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    // Extract root level properties from part C telemetryItem.data
    var customMeasurements = telemetryItem[strBaseData].measurements || {};
    var customProperties = telemetryItem[strBaseData][strProperties] || {};
    _extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
    }
    var bd = telemetryItem[strBaseData];
    var exData = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.Exception.dataType, exData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.Exception.envelopeType, telemetryItem, data);
}
function MetricEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    var baseData = telemetryItem[strBaseData];
    var props = baseData[strProperties] || {};
    var measurements = baseData.measurements || {};
    _extractPropsAndMeasurements(telemetryItem.data, props, measurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
    }
    var baseMetricData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.Metric(logger, baseData.name, baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.Metric.dataType, baseMetricData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.Metric.envelopeType, telemetryItem, data);
}
function PageViewEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    // Since duration is not part of the domain properties in Common Schema, extract it from part C
    var strDuration = "duration";
    var duration;
    var baseData = telemetryItem[strBaseData];
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseData) &&
        !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseData[strProperties]) &&
        !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseData[strProperties][strDuration])) { // from part B properties
        duration = baseData[strProperties][strDuration];
        delete baseData[strProperties][strDuration];
    }
    else if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(telemetryItem.data) &&
        !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(telemetryItem.data[strDuration])) { // from custom properties
        duration = telemetryItem.data[strDuration];
        delete telemetryItem.data[strDuration];
    }
    var bd = telemetryItem[strBaseData];
    // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel
    var currentContextId;
    if (((telemetryItem.ext || {}).trace || {}).traceID) {
        currentContextId = telemetryItem.ext.trace.traceID;
    }
    var id = bd.id || currentContextId;
    var name = bd.name;
    var url = bd.uri;
    var properties = bd[strProperties] || {};
    var measurements = bd.measurements || {};
    // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bd.refUri)) {
        properties["refUri"] = bd.refUri;
    }
    // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bd.pageType)) {
        properties["pageType"] = bd.pageType;
    }
    // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bd.isLoggedIn)) {
        properties["isLoggedIn"] = bd.isLoggedIn.toString();
    }
    // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bd[strProperties])) {
        var pageTags = bd[strProperties];
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(pageTags, function (key, value) {
            properties[key] = value;
        });
    }
    _extractPropsAndMeasurements(telemetryItem.data, properties, measurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
    }
    var pageViewData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.PageView(logger, name, url, duration, properties, measurements, id);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.PageView.dataType, pageViewData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.PageView.envelopeType, telemetryItem, data);
}
function PageViewPerformanceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    var bd = telemetryItem[strBaseData];
    var name = bd.name;
    var url = bd.uri || bd.url;
    var properties = bd[strProperties] || {};
    var measurements = bd.measurements || {};
    _extractPropsAndMeasurements(telemetryItem.data, properties, measurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
    }
    var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__.PageViewPerformance(logger, name, url, undefined, properties, measurements, bd);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__.PageViewPerformance.dataType, baseData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__.PageViewPerformance.envelopeType, telemetryItem, data);
}
function TraceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
    EnvelopeCreatorInit(logger, telemetryItem);
    var message = telemetryItem[strBaseData].message;
    var severityLevel = telemetryItem[strBaseData].severityLevel;
    var props = telemetryItem[strBaseData][strProperties] || {};
    var measurements = telemetryItem[strBaseData].measurements || {};
    _extractPropsAndMeasurements(telemetryItem.data, props, measurements);
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customUndefinedValue)) {
        _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
    }
    var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Trace(logger, message, severityLevel, props, measurements);
    var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Data(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Trace.dataType, baseData);
    return _createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.Trace.envelopeType, telemetryItem, data);
}
//# sourceMappingURL=EnvelopeCreator.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Offline.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Offline.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Offline": () => (/* binding */ Offline),
/* harmony export */   "OfflineListener": () => (/* binding */ OfflineListener)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * @description Monitors browser for offline events
 * @export default - Offline: Static instance of OfflineListener
 * @class OfflineListener
 */
var OfflineListener = /** @class */ (function () {
    function OfflineListener() {
        var _window = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
        var _document = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
        var isListening = false;
        var _onlineStatus = true;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__["default"])(OfflineListener, this, function (_self) {
            try {
                if (_window) {
                    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.attachEvent)(_window, "online", _setOnline)) {
                        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.attachEvent)(_window, "offline", _setOffline);
                        isListening = true;
                    }
                }
                if (_document) {
                    // Also attach to the document.body or document
                    var target = _document.body || _document;
                    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(target.ononline)) {
                        target.ononline = _setOnline;
                        target.onoffline = _setOffline;
                        isListening = true;
                    }
                }
                if (isListening) {
                    // We are listening to events so lets set the current status rather than assuming we are online #1538
                    var _navigator = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getNavigator)(); // Gets the window.navigator or workerNavigator depending on the global
                    if (_navigator && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_navigator.onLine)) { // navigator.onLine is undefined in react-native
                        _onlineStatus = _navigator.onLine;
                    }
                }
            }
            catch (e) {
                // this makes react-native less angry
                isListening = false;
            }
            _self.isListening = isListening;
            _self.isOnline = function () {
                var result = true;
                var _navigator = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getNavigator)();
                if (isListening) {
                    result = _onlineStatus;
                }
                else if (_navigator && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_navigator.onLine)) { // navigator.onLine is undefined in react-native
                    result = _navigator.onLine;
                }
                return result;
            };
            _self.isOffline = function () {
                return !_self.isOnline();
            };
            function _setOnline() {
                _onlineStatus = true;
            }
            function _setOffline() {
                _onlineStatus = false;
            }
        });
    }
// Removed Stub for OfflineListener.prototype.isOnline.
// Removed Stub for OfflineListener.prototype.isOffline.
    OfflineListener.Offline = new OfflineListener;
    return OfflineListener;
}());

var Offline = OfflineListener.Offline;
//# sourceMappingURL=Offline.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArraySendBuffer": () => (/* binding */ ArraySendBuffer),
/* harmony export */   "SessionStorageSendBuffer": () => (/* binding */ SessionStorageSendBuffer)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var BaseSendBuffer = /** @class */ (function () {
    function BaseSendBuffer(logger, config) {
        var _buffer = [];
        var _bufferFullMessageSent = false;
        this._get = function () {
            return _buffer;
        };
        this._set = function (buffer) {
            _buffer = buffer;
            return _buffer;
        };
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__["default"])(BaseSendBuffer, this, function (_self) {
            _self.enqueue = function (payload) {
                if (_self.count() >= config.eventsLimitInMem()) {
                    // sent internal log only once per page view
                    if (!_bufferFullMessageSent) {
                        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.InMemoryStorageBufferFull, "Maximum in-memory buffer size reached: " + _self.count(), true);
                        _bufferFullMessageSent = true;
                    }
                    return;
                }
                _buffer.push(payload);
            };
            _self.count = function () {
                return _buffer.length;
            };
            _self.size = function () {
                var size = _buffer.length;
                for (var lp = 0; lp < _buffer.length; lp++) {
                    size += _buffer[lp].length;
                }
                if (!config.emitLineDelimitedJson()) {
                    size += 2;
                }
                return size;
            };
            _self.clear = function () {
                _buffer = [];
                _bufferFullMessageSent = false;
            };
            _self.getItems = function () {
                return _buffer.slice(0);
            };
            _self.batchPayloads = function (payload) {
                if (payload && payload.length > 0) {
                    var batch = config.emitLineDelimitedJson() ?
                        payload.join("\n") :
                        "[" + payload.join(",") + "]";
                    return batch;
                }
                return null;
            };
        });
    }
// Removed Stub for BaseSendBuffer.prototype.enqueue.
// Removed Stub for BaseSendBuffer.prototype.count.
// Removed Stub for BaseSendBuffer.prototype.size.
// Removed Stub for BaseSendBuffer.prototype.clear.
// Removed Stub for BaseSendBuffer.prototype.getItems.
// Removed Stub for BaseSendBuffer.prototype.batchPayloads.
    return BaseSendBuffer;
}());
/*
 * An array based send buffer.
 */
var ArraySendBuffer = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.__extendsFn)(ArraySendBuffer, _super);
    function ArraySendBuffer(logger, config) {
        var _this = _super.call(this, logger, config) || this;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__["default"])(ArraySendBuffer, _this, function (_self, _base) {
            _self.markAsSent = function (payload) {
                _base.clear();
            };
            _self.clearSent = function (payload) {
                // not supported
            };
        });
        return _this;
    }
// Removed Stub for ArraySendBuffer.prototype.markAsSent.
// Removed Stub for ArraySendBuffer.prototype.clearSent.
    return ArraySendBuffer;
}(BaseSendBuffer));

/*
 * Session storage buffer holds a copy of all unsent items in the browser session storage.
 */
var SessionStorageSendBuffer = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.__extendsFn)(SessionStorageSendBuffer, _super);
    function SessionStorageSendBuffer(logger, config) {
        var _this = _super.call(this, logger, config) || this;
        var _bufferFullMessageSent = false;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__["default"])(SessionStorageSendBuffer, _this, function (_self, _base) {
            var bufferItems = _getBuffer(SessionStorageSendBuffer.BUFFER_KEY);
            var notDeliveredItems = _getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
            var buffer = _self._set(bufferItems.concat(notDeliveredItems));
            // If the buffer has too many items, drop items from the end.
            if (buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {
                buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;
            }
            _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);
            _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, buffer);
            _self.enqueue = function (payload) {
                if (_self.count() >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {
                    // sent internal log only once per page view
                    if (!_bufferFullMessageSent) {
                        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.SessionStorageBufferFull, "Maximum buffer size reached: " + _self.count(), true);
                        _bufferFullMessageSent = true;
                    }
                    return;
                }
                _base.enqueue(payload);
                _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self._get());
            };
            _self.clear = function () {
                _base.clear();
                _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self._get());
                _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);
                _bufferFullMessageSent = false;
            };
            _self.markAsSent = function (payload) {
                _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self._set(_removePayloadsFromBuffer(payload, _self._get())));
                var sentElements = _getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
                if (sentElements instanceof Array && payload instanceof Array) {
                    sentElements = sentElements.concat(payload);
                    if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {
                        // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements
                        // until we receive a response from the backend and the buffer has free space again (see clearSent method)
                        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.SessionStorageBufferFull, "Sent buffer reached its maximum size: " + sentElements.length, true);
                        sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;
                    }
                    _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);
                }
            };
            _self.clearSent = function (payload) {
                var sentElements = _getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
                sentElements = _removePayloadsFromBuffer(payload, sentElements);
                _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);
            };
            function _removePayloadsFromBuffer(payloads, buffer) {
                var remaining = [];
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.arrForEach)(buffer, function (value) {
                    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(value) && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.arrIndexOf)(payloads, value) === -1) {
                        remaining.push(value);
                    }
                });
                return remaining;
            }
            function _getBuffer(key) {
                var prefixedKey = key;
                try {
                    prefixedKey = config.namePrefix && config.namePrefix() ? config.namePrefix() + "_" + prefixedKey : prefixedKey;
                    var bufferJson = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.utlGetSessionStorage)(logger, prefixedKey);
                    if (bufferJson) {
                        var buffer_1 = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.getJSON)().parse(bufferJson);
                        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isString)(buffer_1)) {
                            // When using some version prototype.js the stringify / parse cycle does not decode array's correctly
                            buffer_1 = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.getJSON)().parse(buffer_1);
                        }
                        if (buffer_1 && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isArray)(buffer_1)) {
                            return buffer_1;
                        }
                    }
                }
                catch (e) {
                    logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.FailedToRestoreStorageBuffer, " storage key: " + prefixedKey + ", " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.dumpObj)(e) });
                }
                return [];
            }
            function _setBuffer(key, buffer) {
                var prefixedKey = key;
                try {
                    prefixedKey = config.namePrefix && config.namePrefix() ? config.namePrefix() + "_" + prefixedKey : prefixedKey;
                    var bufferJson = JSON.stringify(buffer);
                    (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.utlSetSessionStorage)(logger, prefixedKey, bufferJson);
                }
                catch (e) {
                    // if there was an error, clear the buffer
                    // telemetry is stored in the _buffer array so we won't loose any items
                    (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.utlSetSessionStorage)(logger, prefixedKey, JSON.stringify([]));
                    logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.FailedToSetStorageBuffer, " storage key: " + prefixedKey + ", " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getExceptionName)(e) + ". Buffer cleared", { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.dumpObj)(e) });
                }
            }
        });
        return _this;
    }
// Removed Stub for SessionStorageSendBuffer.prototype.enqueue.
// Removed Stub for SessionStorageSendBuffer.prototype.clear.
// Removed Stub for SessionStorageSendBuffer.prototype.markAsSent.
// Removed Stub for SessionStorageSendBuffer.prototype.clearSent.
    SessionStorageSendBuffer.BUFFER_KEY = "AI_buffer";
    SessionStorageSendBuffer.SENT_BUFFER_KEY = "AI_sentBuffer";
    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.
    SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;
    return SessionStorageSendBuffer;
}(BaseSendBuffer));

//# sourceMappingURL=SendBuffer.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sender": () => (/* binding */ Sender)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _SendBuffer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SendBuffer */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js");
/* harmony import */ var _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnvelopeCreator */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js");
/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Serializer */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Serializer.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js");
/* harmony import */ var _Offline__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Offline */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Offline.js");
/* harmony import */ var _TelemetryProcessors_Sample__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./TelemetryProcessors/Sample */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
var _a;



 // todo move to channel





var FetchSyncRequestSizeLimitBytes = 65000; // approx 64kb (the current Edge, Firefox and Chrome max limit)
function _getResponseText(xhr) {
    try {
        return xhr.responseText;
    }
    catch (e) {
        // Best effort, as XHR may throw while XDR wont so just ignore
    }
    return null;
}
function _getDefaultAppInsightsChannelConfig() {
    // set default values
    return {
        endpointUrl: function () { return "https://dc.services.visualstudio.com/v2/track"; },
        emitLineDelimitedJson: function () { return false; },
        maxBatchInterval: function () { return 15000; },
        maxBatchSizeInBytes: function () { return 102400; },
        disableTelemetry: function () { return false; },
        enableSessionStorageBuffer: function () { return true; },
        isRetryDisabled: function () { return false; },
        isBeaconApiDisabled: function () { return true; },
        disableXhr: function () { return false; },
        onunloadDisableFetch: function () { return false; },
        onunloadDisableBeacon: function () { return false; },
        instrumentationKey: function () { return undefined; },
        namePrefix: function () { return undefined; },
        samplingPercentage: function () { return 100; },
        customHeaders: function () { return undefined; },
        convertUndefined: function () { return undefined; },
        eventsLimitInMem: function () { return 10000; }
    };
}
var EnvelopeTypeCreator = (_a = {},
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.Event.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.EventEnvelopeCreator,
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.Trace.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.TraceEnvelopeCreator,
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__.PageView.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.PageViewEnvelopeCreator,
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.PageViewPerformance.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.PageViewPerformanceEnvelopeCreator,
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__.Exception.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.ExceptionEnvelopeCreator,
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__.Metric.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.MetricEnvelopeCreator,
    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.RemoteDependencyData.dataType] = _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.DependencyEnvelopeCreator,
    _a);
var Sender = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__.__extendsFn)(Sender, _super);
    function Sender() {
        var _this = _super.call(this) || this;
        _this.priority = 1001;
        _this.identifier = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.BreezeChannelIdentifier;
        /**
         * How many times in a row a retryable error condition has occurred.
         */
        var _consecutiveErrors;
        /**
         * The time to retry at in milliseconds from 1970/01/01 (this makes the timer calculation easy).
         */
        var _retryAt;
        /**
         * The time of the last send operation.
         */
        var _lastSend;
        /**
         * Flag indicating that the sending should be paused
         */
        var _paused = false;
        /**
         * Handle to the timer for delayed sending of batches of data.
         */
        var _timeoutHandle;
        var _serializer;
        var _stamp_specific_redirects;
        var _headers = {};
        // Keep track of the outstanding sync fetch payload total (as sync fetch has limits)
        var _syncFetchPayload = 0;
        /**
         * The sender to use if the payload size is too large
         */
        var _fallbackSender;
        /**
         * The identified sender to use for the synchronous unload stage
         */
        var _syncUnloadSender;
        _this._senderConfig = _getDefaultAppInsightsChannelConfig();
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_10__["default"])(Sender, _this, function (_self, _base) {
            function _notImplemented() {
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.throwError)("Method not implemented.");
            }
            _self.pause = function () {
                _clearScheduledTimer();
                _paused = true;
            };
            _self.resume = function () {
                if (_paused) {
                    _paused = false;
                    _retryAt = null;
                    // flush if we have exceeded the max-size already
                    if (_self._buffer.size() > _self._senderConfig.maxBatchSizeInBytes()) {
                        _self.triggerSend(true, null, 10 /* MaxBatchSize */);
                    }
                    _setupTimer();
                }
            };
            _self.flush = function () {
                if (!_paused) {
                    // Clear the normal schedule timer as we are going to try and flush ASAP
                    _clearScheduledTimer();
                    try {
                        _self.triggerSend(true, null, 1 /* ManualFlush */);
                    }
                    catch (e) {
                        _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.FlushFailed, "flush failed, telemetry will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e) });
                    }
                }
            };
            _self.onunloadFlush = function () {
                if (!_paused) {
                    if ((_self._senderConfig.onunloadDisableBeacon() === false || _self._senderConfig.isBeaconApiDisabled() === false) && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isBeaconsSupported)()) {
                        try {
                            _self.triggerSend(true, _doUnloadSend, 2 /* Unload */);
                        }
                        catch (e) {
                            _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.FailedToSendQueuedTelemetry, "failed to flush with beacon sender on page unload, telemetry will not be collected: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e) });
                        }
                    }
                    else {
                        _self.flush();
                    }
                }
            };
            _self.teardown = _notImplemented;
            _self.addHeader = function (name, value) {
                _headers[name] = value;
            };
            _self.initialize = function (config, core, extensions, pluginChain) {
                _base.initialize(config, core, extensions, pluginChain);
                var ctx = _self._getTelCtx();
                var identifier = _self.identifier;
                _serializer = new _Serializer__WEBPACK_IMPORTED_MODULE_14__.Serializer(core.logger);
                _consecutiveErrors = 0;
                _retryAt = null;
                _lastSend = 0;
                _self._sender = null;
                _stamp_specific_redirects = 0;
                var diagLog = _self.diagLog();
                var defaultConfig = _getDefaultAppInsightsChannelConfig();
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.objForEachKey)(defaultConfig, function (field, value) {
                    _self._senderConfig[field] = function () { return ctx.getConfig(identifier, field, value()); };
                });
                _self._buffer = (_self._senderConfig.enableSessionStorageBuffer() && (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.utlCanUseSessionStorage)())
                    ? new _SendBuffer__WEBPACK_IMPORTED_MODULE_16__.SessionStorageSendBuffer(diagLog, _self._senderConfig) : new _SendBuffer__WEBPACK_IMPORTED_MODULE_16__.ArraySendBuffer(diagLog, _self._senderConfig);
                _self._sample = new _TelemetryProcessors_Sample__WEBPACK_IMPORTED_MODULE_17__.Sample(_self._senderConfig.samplingPercentage(), diagLog);
                if (!_validateInstrumentationKey(config)) {
                    diagLog.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.InvalidInstrumentationKey, "Invalid Instrumentation key " + config.instrumentationKey);
                }
                if (!(0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__.isInternalApplicationInsightsEndpoint)(_self._senderConfig.endpointUrl()) && _self._senderConfig.customHeaders() && _self._senderConfig.customHeaders().length > 0) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.arrForEach)(_self._senderConfig.customHeaders(), function (customHeader) {
                        _this.addHeader(customHeader.header, customHeader.value);
                    });
                }
                var senderConfig = _self._senderConfig;
                var sendPostFunc = null;
                if (!senderConfig.disableXhr() && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.useXDomainRequest)()) {
                    sendPostFunc = _xdrSender; // IE 8 and 9
                }
                else if (!senderConfig.disableXhr() && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isXhrSupported)()) {
                    sendPostFunc = _xhrSender;
                }
                if (!sendPostFunc && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isFetchSupported)()) {
                    sendPostFunc = _fetchSender;
                }
                // always fallback to XHR
                _fallbackSender = sendPostFunc || _xhrSender;
                if (!senderConfig.isBeaconApiDisabled() && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isBeaconsSupported)()) {
                    // Config is set to always used beacon sending
                    sendPostFunc = _beaconSender;
                }
                _self._sender = sendPostFunc || _xhrSender;
                if (!senderConfig.onunloadDisableFetch() && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isFetchSupported)(true)) {
                    // Try and use the fetch with keepalive
                    _syncUnloadSender = _fetchKeepAliveSender;
                }
                else if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isBeaconsSupported)()) {
                    // Try and use sendBeacon
                    _syncUnloadSender = _beaconSender;
                }
                else if (!senderConfig.disableXhr() && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.useXDomainRequest)()) {
                    _syncUnloadSender = _xdrSender; // IE 8 and 9
                }
                else if (!senderConfig.disableXhr() && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isXhrSupported)()) {
                    _syncUnloadSender = _xhrSender;
                }
                else {
                    _syncUnloadSender = _fallbackSender;
                }
            };
            _self.processTelemetry = function (telemetryItem, itemCtx) {
                itemCtx = _self._getTelCtx(itemCtx);
                try {
                    // if master off switch is set, don't send any data
                    if (_self._senderConfig.disableTelemetry()) {
                        // Do not send/save data
                        return;
                    }
                    // validate input
                    if (!telemetryItem) {
                        itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.CannotSendEmptyTelemetry, "Cannot send empty telemetry");
                        return;
                    }
                    // validate event
                    if (telemetryItem.baseData && !telemetryItem.baseType) {
                        itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.InvalidEvent, "Cannot send telemetry without baseData and baseType");
                        return;
                    }
                    if (!telemetryItem.baseType) {
                        // Default
                        telemetryItem.baseType = "EventData";
                    }
                    // ensure a sender was constructed
                    if (!_self._sender) {
                        itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.SenderNotInitialized, "Sender was not initialized");
                        return;
                    }
                    // check if this item should be sampled in, else add sampleRate tag
                    if (!_isSampledIn(telemetryItem)) {
                        // Item is sampled out, do not send it
                        itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TelemetrySampledAndNotSent, "Telemetry item was sampled out and not sent", { SampleRate: _self._sample.sampleRate });
                        return;
                    }
                    else {
                        telemetryItem[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.SampleRate] = _self._sample.sampleRate;
                    }
                    var convertUndefined = _self._senderConfig.convertUndefined() || undefined;
                    // construct an envelope that Application Insights endpoint can understand
                    // if ikey of telemetry is provided and not empty, envelope will use this iKey instead of senderConfig iKey
                    var defaultEnvelopeIkey = telemetryItem.iKey || _self._senderConfig.instrumentationKey();
                    var aiEnvelope_1 = Sender.constructEnvelope(telemetryItem, defaultEnvelopeIkey, itemCtx.diagLog(), convertUndefined);
                    if (!aiEnvelope_1) {
                        itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.CreateEnvelopeError, "Unable to create an AppInsights envelope");
                        return;
                    }
                    var doNotSendItem_1 = false;
                    // this is for running in legacy mode, where customer may already have a custom initializer present
                    if (telemetryItem.tags && telemetryItem.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.ProcessLegacy]) {
                        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.arrForEach)(telemetryItem.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.ProcessLegacy], function (callBack) {
                            try {
                                if (callBack && callBack(aiEnvelope_1) === false) {
                                    doNotSendItem_1 = true;
                                    itemCtx.diagLog().warnToConsole("Telemetry processor check returns false");
                                }
                            }
                            catch (e) {
                                // log error but dont stop executing rest of the telemetry initializers
                                // doNotSendItem = true;
                                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e) }, true);
                            }
                        });
                        delete telemetryItem.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.ProcessLegacy];
                    }
                    if (doNotSendItem_1) {
                        return; // do not send, no need to execute next plugin
                    }
                    // check if the incoming payload is too large, truncate if necessary
                    var payload = _serializer.serialize(aiEnvelope_1);
                    // flush if we would exceed the max-size limit by adding this item
                    var buffer = _self._buffer;
                    var bufferSize = buffer.size();
                    if ((bufferSize + payload.length) > _self._senderConfig.maxBatchSizeInBytes()) {
                        _self.triggerSend(true, null, 10 /* MaxBatchSize */);
                    }
                    // enqueue the payload
                    buffer.enqueue(payload);
                    // ensure an invocation timeout is set
                    _setupTimer();
                }
                catch (e) {
                    itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.FailedAddingTelemetryToBuffer, "Failed adding telemetry to the sender's buffer, some telemetry will be lost: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e) });
                }
                // hand off the telemetry item to the next plugin
                _self.processNext(telemetryItem, itemCtx);
            };
            /**
             * xhr state changes
             */
            _self._xhrReadyStateChange = function (xhr, payload, countOfItemsInPayload) {
                if (xhr.readyState === 4) {
                    _checkResponsStatus(xhr.status, payload, xhr.responseURL, countOfItemsInPayload, _formatErrorMessageXhr(xhr), _getResponseText(xhr) || xhr.response);
                }
            };
            /**
             * Immediately send buffered data
             * @param async {boolean} - Indicates if the events should be sent asynchronously
             * @param forcedSender {SenderFunction} - Indicates the forcedSender, undefined if not passed
             */
            _self.triggerSend = function (async, forcedSender, sendReason) {
                if (async === void 0) { async = true; }
                if (!_paused) {
                    try {
                        var buffer = _self._buffer;
                        // Send data only if disableTelemetry is false
                        if (!_self._senderConfig.disableTelemetry()) {
                            if (buffer.count() > 0) {
                                var payload = buffer.getItems();
                                _notifySendRequest(sendReason || 0 /* Undefined */, async);
                                // invoke send
                                if (forcedSender) {
                                    forcedSender.call(_this, payload, async);
                                }
                                else {
                                    _self._sender(payload, async);
                                }
                            }
                            // update lastSend time to enable throttling
                            _lastSend = +new Date;
                        }
                        else {
                            buffer.clear();
                        }
                        _clearScheduledTimer();
                    }
                    catch (e) {
                        /* Ignore this error for IE under v10 */
                        var ieVer = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.getIEVersion)();
                        if (!ieVer || ieVer > 9) {
                            _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, "Telemetry transmission failed, some telemetry will be lost: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e) });
                        }
                    }
                }
            };
            /**
             * error handler
             */
            _self._onError = function (payload, message, event) {
                _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.OnError, "Failed to send telemetry.", { message: message });
                _self._buffer.clearSent(payload);
            };
            /**
             * partial success handler
             */
            _self._onPartialSuccess = function (payload, results) {
                var failed = [];
                var retry = [];
                // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.
                var errors = results.errors.reverse();
                for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
                    var error = errors_1[_i];
                    var extracted = payload.splice(error.index, 1)[0];
                    if (_isRetriable(error.statusCode)) {
                        retry.push(extracted);
                    }
                    else {
                        // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).
                        failed.push(extracted);
                    }
                }
                if (payload.length > 0) {
                    _self._onSuccess(payload, results.itemsAccepted);
                }
                if (failed.length > 0) {
                    _self._onError(failed, _formatErrorMessageXhr(null, ["partial success", results.itemsAccepted, "of", results.itemsReceived].join(" ")));
                }
                if (retry.length > 0) {
                    _resendPayload(retry);
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, "Partial success. " +
                        "Delivered: " + payload.length + ", Failed: " + failed.length +
                        ". Will retry to send " + retry.length + " our of " + results.itemsReceived + " items");
                }
            };
            /**
             * success handler
             */
            _self._onSuccess = function (payload, countOfItemsInPayload) {
                _self._buffer.clearSent(payload);
            };
            /**
             * xdr state changes
             */
            _self._xdrOnLoad = function (xdr, payload) {
                var responseText = _getResponseText(xdr);
                if (xdr && (responseText + "" === "200" || responseText === "")) {
                    _consecutiveErrors = 0;
                    _self._onSuccess(payload, 0);
                }
                else {
                    var results = _parseResponse(responseText);
                    if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted
                        && !_self._senderConfig.isRetryDisabled()) {
                        _self._onPartialSuccess(payload, results);
                    }
                    else {
                        _self._onError(payload, _formatErrorMessageXdr(xdr));
                    }
                }
            };
            function _isSampledIn(envelope) {
                return _self._sample.isSampledIn(envelope);
            }
            function _checkResponsStatus(status, payload, responseUrl, countOfItemsInPayload, errorMessage, res) {
                var response = null;
                if (!_self._appId) {
                    response = _parseResponse(res);
                    if (response && response.appId) {
                        _self._appId = response.appId;
                    }
                }
                if ((status < 200 || status >= 300) && status !== 0) {
                    // Update End Point url if permanent redirect or moved permanently
                    // Updates the end point url before retry
                    if (status === 301 || status === 307 || status === 308) {
                        if (!_checkAndUpdateEndPointUrl(responseUrl)) {
                            _self._onError(payload, errorMessage);
                            return;
                        }
                    }
                    if (!_self._senderConfig.isRetryDisabled() && _isRetriable(status)) {
                        _resendPayload(payload);
                        _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, ". " +
                            "Response code " + status + ". Will retry to send " + payload.length + " items.");
                    }
                    else {
                        _self._onError(payload, errorMessage);
                    }
                }
                else if (_Offline__WEBPACK_IMPORTED_MODULE_20__.Offline.isOffline()) { // offline
                    // Note: Don't check for status == 0, since adblock gives this code
                    if (!_self._senderConfig.isRetryDisabled()) {
                        var offlineBackOffMultiplier = 10; // arbritrary number
                        _resendPayload(payload, offlineBackOffMultiplier);
                        _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, ". Offline - Response Code: ".concat(status, ". Offline status: ").concat(_Offline__WEBPACK_IMPORTED_MODULE_20__.Offline.isOffline(), ". Will retry to send ").concat(payload.length, " items."));
                    }
                }
                else {
                    // check if the xhr's responseURL or fetch's response.url is same as endpoint url
                    // TODO after 10 redirects force send telemetry with 'redirect=false' as query parameter.
                    _checkAndUpdateEndPointUrl(responseUrl);
                    if (status === 206) {
                        if (!response) {
                            response = _parseResponse(res);
                        }
                        if (response && !_self._senderConfig.isRetryDisabled()) {
                            _self._onPartialSuccess(payload, response);
                        }
                        else {
                            _self._onError(payload, errorMessage);
                        }
                    }
                    else {
                        _consecutiveErrors = 0;
                        _self._onSuccess(payload, countOfItemsInPayload);
                    }
                }
            }
            function _checkAndUpdateEndPointUrl(responseUrl) {
                // Maximum stamp specific redirects allowed(uncomment this when breeze is ready with not allowing redirects feature)
                if (_stamp_specific_redirects >= 10) {
                    //  _self._senderConfig.endpointUrl = () => Sender._getDefaultAppInsightsChannelConfig().endpointUrl()+"/?redirect=false";
                    //  _stamp_specific_redirects = 0;
                    return false;
                }
                if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.isNullOrUndefined)(responseUrl) && responseUrl !== "") {
                    if (responseUrl !== _self._senderConfig.endpointUrl()) {
                        _self._senderConfig.endpointUrl = function () { return responseUrl; };
                        ++_stamp_specific_redirects;
                        return true;
                    }
                }
                return false;
            }
            function _doUnloadSend(payload, isAsync) {
                if (_syncUnloadSender) {
                    // We are unloading so always call the sender with sync set to false
                    _syncUnloadSender(payload, false);
                }
                else {
                    // Fallback to the previous beacon Sender (which causes a CORB warning on chrome now)
                    _beaconSender(payload, isAsync);
                }
            }
            function _doBeaconSend(payload) {
                var nav = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.getNavigator)();
                var buffer = _self._buffer;
                var url = _self._senderConfig.endpointUrl();
                var batch = _self._buffer.batchPayloads(payload);
                // Chrome only allows CORS-safelisted values for the sendBeacon data argument
                // see: https://bugs.chromium.org/p/chromium/issues/detail?id=720283
                var plainTextBatch = new Blob([batch], { type: "text/plain;charset=UTF-8" });
                // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.
                var queued = nav.sendBeacon(url, plainTextBatch);
                if (queued) {
                    buffer.markAsSent(payload);
                    // no response from beaconSender, clear buffer
                    _self._onSuccess(payload, payload.length);
                }
                return queued;
            }
            /**
             * Send Beacon API request
             * @param payload {string} - The data payload to be sent.
             * @param isAsync {boolean} - not used
             * Note: Beacon API does not support custom headers and we are not able to get
             * appId from the backend for the correct correlation.
             */
            function _beaconSender(payload, isAsync) {
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(payload) && payload.length > 0) {
                    // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.
                    if (!_doBeaconSend(payload)) {
                        // Failed to send entire payload so try and split data and try to send as much events as possible
                        var droppedPayload = [];
                        for (var lp = 0; lp < payload.length; lp++) {
                            var thePayload = payload[lp];
                            if (!_doBeaconSend([thePayload])) {
                                // Can't send anymore, so split the batch and drop the rest
                                droppedPayload.push(thePayload);
                            }
                        }
                        if (droppedPayload.length > 0) {
                            _fallbackSender(droppedPayload, true);
                            _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, ". " + "Failed to send telemetry with Beacon API, retried with normal sender.");
                        }
                    }
                }
            }
            /**
             * Send XMLHttpRequest
             * @param payload {string} - The data payload to be sent.
             * @param isAsync {boolean} - Indicates if the request should be sent asynchronously
             */
            function _xhrSender(payload, isAsync) {
                var xhr = new XMLHttpRequest();
                var endPointUrl = _self._senderConfig.endpointUrl();
                try {
                    xhr[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.DisabledPropertyName] = true;
                }
                catch (e) {
                    // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would
                    // cause the request to fail and we no telemetry would be sent
                }
                xhr.open("POST", endPointUrl, isAsync);
                xhr.setRequestHeader("Content-type", "application/json");
                // append Sdk-Context request header only in case of breeze endpoint
                if ((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__.isInternalApplicationInsightsEndpoint)(endPointUrl)) {
                    xhr.setRequestHeader(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__.RequestHeaders.sdkContextHeader, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__.RequestHeaders.sdkContextHeaderAppIdRequest);
                }
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.arrForEach)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.objKeys)(_headers), function (headerName) {
                    xhr.setRequestHeader(headerName, _headers[headerName]);
                });
                xhr.onreadystatechange = function () { return _self._xhrReadyStateChange(xhr, payload, payload.length); };
                xhr.onerror = function (event) { return _self._onError(payload, _formatErrorMessageXhr(xhr), event); };
                // compose an array of payloads
                var batch = _self._buffer.batchPayloads(payload);
                xhr.send(batch);
                _self._buffer.markAsSent(payload);
            }
            function _fetchKeepAliveSender(payload, isAsync) {
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(payload)) {
                    var payloadSize = payload.length;
                    for (var lp = 0; lp < payload.length; lp++) {
                        payloadSize += payload[lp].length;
                    }
                    if ((_syncFetchPayload + payloadSize) <= FetchSyncRequestSizeLimitBytes) {
                        _doFetchSender(payload, false);
                    }
                    else if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.isBeaconsSupported)()) {
                        // Fallback to beacon sender as we at least get told which events can't be scheduled
                        _beaconSender(payload, isAsync);
                    }
                    else {
                        // Payload is going to be too big so just try and send via XHR
                        _fallbackSender && _fallbackSender(payload, true);
                        _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, ". " + "Failed to send telemetry with Beacon API, retried with xhrSender.");
                    }
                }
            }
            /**
             * Send fetch API request
             * @param payload {string} - The data payload to be sent.
             * @param isAsync {boolean} - not used
             */
            function _fetchSender(payload, isAsync) {
                _doFetchSender(payload, true);
            }
            /**
             * Send fetch API request
             * @param payload {string} - The data payload to be sent.
             * @param isAsync {boolean} - For fetch this identifies whether we are "unloading" (false) or a normal request
             */
            function _doFetchSender(payload, isAsync) {
                var _a;
                var endPointUrl = _self._senderConfig.endpointUrl();
                var batch = _self._buffer.batchPayloads(payload);
                var plainTextBatch = new Blob([batch], { type: "application/json" });
                var requestHeaders = new Headers();
                var batchLength = batch.length;
                var ignoreResponse = false;
                var responseHandled = false;
                // append Sdk-Context request header only in case of breeze endpoint
                if ((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__.isInternalApplicationInsightsEndpoint)(endPointUrl)) {
                    requestHeaders.append(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__.RequestHeaders.sdkContextHeader, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__.RequestHeaders.sdkContextHeaderAppIdRequest);
                }
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.arrForEach)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.objKeys)(_headers), function (headerName) {
                    requestHeaders.append(headerName, _headers[headerName]);
                });
                var init = (_a = {
                        method: "POST",
                        headers: requestHeaders,
                        body: plainTextBatch
                    },
                    _a[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.DisabledPropertyName] = true // Mark so we don't attempt to track this request
                ,
                    _a);
                if (!isAsync) {
                    init.keepalive = true;
                    // As a sync request (during unload), it is unlikely that we will get a chance to process the response so
                    // just like beacon send assume that the events have been accepted and processed
                    ignoreResponse = true;
                    _syncFetchPayload += batchLength;
                }
                var request = new Request(endPointUrl, init);
                try {
                    // Also try and tag the request (just in case the value in init is not copied over)
                    request[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.DisabledPropertyName] = true;
                }
                catch (e) {
                    // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would
                    // cause the request to fail and we no telemetry would be sent
                }
                _self._buffer.markAsSent(payload);
                try {
                    fetch(request).then(function (response) {
                        if (!isAsync) {
                            _syncFetchPayload -= batchLength;
                            batchLength = 0;
                        }
                        if (!responseHandled) {
                            responseHandled = true;
                            /**
                             * The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500.
                             * Instead, it will resolve normally (with ok status set to false), and it will only reject on network failure
                             * or if anything prevented the request from completing.
                             */
                            if (!response.ok) {
                                _self._onError(payload, response.statusText);
                            }
                            else {
                                response.text().then(function (text) {
                                    _checkResponsStatus(response.status, payload, response.url, payload.length, response.statusText, text);
                                });
                            }
                        }
                    })["catch"](function (error) {
                        if (!isAsync) {
                            _syncFetchPayload -= batchLength;
                            batchLength = 0;
                        }
                        if (!responseHandled) {
                            responseHandled = true;
                            _self._onError(payload, error.message);
                        }
                    });
                }
                catch (e) {
                    if (!responseHandled) {
                        _self._onError(payload, (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e));
                    }
                }
                if (ignoreResponse && !responseHandled) {
                    // Assume success during unload processing as we most likely won't get the response
                    responseHandled = true;
                    _self._onSuccess(payload, payload.length);
                }
            }
            /**
             * Parses the response from the backend.
             * @param response - XMLHttpRequest or XDomainRequest response
             */
            function _parseResponse(response) {
                try {
                    if (response && response !== "") {
                        var result = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.getJSON)().parse(response);
                        if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted &&
                            result.itemsReceived - result.itemsAccepted === result.errors.length) {
                            return result;
                        }
                    }
                }
                catch (e) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.InvalidBackendResponse, "Cannot parse the response. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), {
                        response: response
                    });
                }
                return null;
            }
            /**
             * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).
             * @param payload
             */
            function _resendPayload(payload, linearFactor) {
                if (linearFactor === void 0) { linearFactor = 1; }
                if (!payload || payload.length === 0) {
                    return;
                }
                var buffer = _self._buffer;
                buffer.clearSent(payload);
                _consecutiveErrors++;
                for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {
                    var item = payload_1[_i];
                    buffer.enqueue(item);
                }
                // setup timer
                _setRetryTime(linearFactor);
                _setupTimer();
            }
            /**
             * Calculates the time to wait before retrying in case of an error based on
             * http://en.wikipedia.org/wiki/Exponential_backoff
             */
            function _setRetryTime(linearFactor) {
                var SlotDelayInSeconds = 10;
                var delayInSeconds;
                if (_consecutiveErrors <= 1) {
                    delayInSeconds = SlotDelayInSeconds;
                }
                else {
                    var backOffSlot = (Math.pow(2, _consecutiveErrors) - 1) / 2;
                    // tslint:disable-next-line:insecure-random
                    var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;
                    backOffDelay = linearFactor * backOffDelay;
                    delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);
                }
                // TODO: Log the backoff time like the C# version does.
                var retryAfterTimeSpan = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.dateNow)() + (delayInSeconds * 1000);
                // TODO: Log the retry at time like the C# version does.
                _retryAt = retryAfterTimeSpan;
            }
            /**
             * Sets up the timer which triggers actually sending the data.
             */
            function _setupTimer() {
                if (!_timeoutHandle && !_paused) {
                    var retryInterval = _retryAt ? Math.max(0, _retryAt - (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.dateNow)()) : 0;
                    var timerValue = Math.max(_self._senderConfig.maxBatchInterval(), retryInterval);
                    _timeoutHandle = setTimeout(function () {
                        _timeoutHandle = null;
                        _self.triggerSend(true, null, 1 /* NormalSchedule */);
                    }, timerValue);
                }
            }
            function _clearScheduledTimer() {
                clearTimeout(_timeoutHandle);
                _timeoutHandle = null;
                _retryAt = null;
            }
            /**
             * Checks if the SDK should resend the payload after receiving this status code from the backend.
             * @param statusCode
             */
            function _isRetriable(statusCode) {
                return statusCode === 408 // Timeout
                    || statusCode === 429 // Too many requests.
                    || statusCode === 500 // Internal server error.
                    || statusCode === 503; // Service unavailable.
            }
            function _formatErrorMessageXhr(xhr, message) {
                if (xhr) {
                    return "XMLHttpRequest,Status:" + xhr.status + ",Response:" + _getResponseText(xhr) || 0 || 0;
                }
                return message;
            }
            /**
             * Send XDomainRequest
             * @param payload {string} - The data payload to be sent.
             * @param isAsync {boolean} - Indicates if the request should be sent asynchronously
             *
             * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added
             * to maintain consistency with the xhrSender's contract
             * Note: XDomainRequest does not support custom headers and we are not able to get
             * appId from the backend for the correct correlation.
             */
            function _xdrSender(payload, isAsync) {
                var buffer = _self._buffer;
                var _window = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.getWindow)();
                var xdr = new XDomainRequest();
                xdr.onload = function () { return _self._xdrOnLoad(xdr, payload); };
                xdr.onerror = function (event) { return _self._onError(payload, _formatErrorMessageXdr(xdr), event); };
                // XDomainRequest requires the same protocol as the hosting page.
                // If the protocol doesn't match, we can't send the telemetry :(.
                var hostingProtocol = _window && _window.location && _window.location.protocol || "";
                if (_self._senderConfig.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {
                    _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.TransmissionFailed, ". " +
                        "Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.");
                    buffer.clear();
                    return;
                }
                var endpointUrl = _self._senderConfig.endpointUrl().replace(/^(https?:)/, "");
                xdr.open("POST", endpointUrl);
                // compose an array of payloads
                var batch = buffer.batchPayloads(payload);
                xdr.send(batch);
                buffer.markAsSent(payload);
            }
            function _formatErrorMessageXdr(xdr, message) {
                if (xdr) {
                    return "XDomainRequest,Response:" + _getResponseText(xdr) || 0;
                }
                return message;
            }
            // Using function lookups for backward compatibility as the getNotifyMgr() did not exist until after v2.5.6
            function _getNotifyMgr() {
                var func = "getNotifyMgr";
                if (_self.core[func]) {
                    return _self.core[func]();
                }
                // using _self.core['_notificationManager'] for backward compatibility
                return _self.core["_notificationManager"];
            }
            function _notifySendRequest(sendRequest, isAsync) {
                var manager = _getNotifyMgr();
                if (manager && manager.eventsSendRequest) {
                    try {
                        manager.eventsSendRequest(sendRequest, isAsync);
                    }
                    catch (e) {
                        _self.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_12__._InternalMessageId.NotificationException, "send request notification failed: " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_13__.dumpObj)(e) });
                    }
                }
            }
            /**
             * Validate UUID Format
             * Specs taken from https://tools.ietf.org/html/rfc4122 and breeze repo
             */
            function _validateInstrumentationKey(config) {
                var disableIKeyValidationFlag = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.isNullOrUndefined)(config.disableInstrumentationKeyValidation) ? false : config.disableInstrumentationKeyValidation;
                if (disableIKeyValidationFlag) {
                    return true;
                }
                var UUID_Regex = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$";
                var regexp = new RegExp(UUID_Regex);
                return regexp.test(config.instrumentationKey);
            }
        });
        return _this;
    }
    Sender.constructEnvelope = function (orig, iKey, logger, convertUndefined) {
        var envelope;
        if (iKey !== orig.iKey && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__.isNullOrUndefined)(iKey)) {
            envelope = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__.__assignFn)({}, orig), { iKey: iKey });
        }
        else {
            envelope = orig;
        }
        var creator = EnvelopeTypeCreator[envelope.baseType] || _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_1__.EventEnvelopeCreator;
        return creator(logger, envelope, convertUndefined);
    };
// Removed Stub for Sender.prototype.pause.
// Removed Stub for Sender.prototype.resume.
// Removed Stub for Sender.prototype.flush.
// Removed Stub for Sender.prototype.onunloadFlush.
// Removed Stub for Sender.prototype.teardown.
// Removed Stub for Sender.prototype.initialize.
// Removed Stub for Sender.prototype.processTelemetry.
// Removed Stub for Sender.prototype._xhrReadyStateChange.
// Removed Stub for Sender.prototype.triggerSend.
// Removed Stub for Sender.prototype._onError.
// Removed Stub for Sender.prototype._onPartialSuccess.
// Removed Stub for Sender.prototype._onSuccess.
// Removed Stub for Sender.prototype._xdrOnLoad.
// Removed Stub for Sender.prototype.addHeader.
    return Sender;
}(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_22__.BaseTelemetryPlugin));

//# sourceMappingURL=Sender.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Serializer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Serializer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Serializer": () => (/* binding */ Serializer)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var Serializer = /** @class */ (function () {
    function Serializer(logger) {
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Serializer, this, function (_self) {
            /**
             * Serializes the current object to a JSON string.
             */
            _self.serialize = function (input) {
                var output = _serializeObject(input, "root");
                try {
                    return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getJSON)().stringify(output);
                }
                catch (e) {
                    // if serialization fails return an empty string
                    logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.CannotSerializeObject, (e && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(e.toString)) ? e.toString() : "Error serializing object", null, true);
                }
            };
            function _serializeObject(source, name) {
                var circularReferenceCheck = "__aiCircularRefCheck";
                var output = {};
                if (!source) {
                    logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.CannotSerializeObject, "cannot serialize object because it is null or undefined", { name: name }, true);
                    return output;
                }
                if (source[circularReferenceCheck]) {
                    logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.CircularReferenceDetected, "Circular reference detected while serializing object", { name: name }, true);
                    return output;
                }
                if (!source.aiDataContract) {
                    // special case for measurements/properties/tags
                    if (name === "measurements") {
                        output = _serializeStringMap(source, "number", name);
                    }
                    else if (name === "properties") {
                        output = _serializeStringMap(source, "string", name);
                    }
                    else if (name === "tags") {
                        output = _serializeStringMap(source, "string", name);
                    }
                    else if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isArray)(source)) {
                        output = _serializeArray(source, name);
                    }
                    else {
                        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.CannotSerializeObjectNonSerializable, "Attempting to serialize an object which does not implement ISerializable", { name: name }, true);
                        try {
                            // verify that the object can be stringified
                            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getJSON)().stringify(source);
                            output = source;
                        }
                        catch (e) {
                            // if serialization fails return an empty string
                            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.CannotSerializeObject, (e && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(e.toString)) ? e.toString() : "Error serializing object", null, true);
                        }
                    }
                    return output;
                }
                source[circularReferenceCheck] = true;
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.objForEachKey)(source.aiDataContract, function (field, contract) {
                    var isRequired = ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(contract)) ? (contract() & 1 /* Required */) : (contract & 1 /* Required */);
                    var isHidden = ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(contract)) ? (contract() & 4 /* Hidden */) : (contract & 4 /* Hidden */);
                    var isArray = contract & 2 /* Array */;
                    var isPresent = source[field] !== undefined;
                    var isObj = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(source[field]) && source[field] !== null;
                    if (isRequired && !isPresent && !isArray) {
                        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.MissingRequiredFieldSpecification, "Missing required field specification. The field is required but not present on source", { field: field, name: name });
                        // If not in debug mode, continue and hope the error is permissible
                    }
                    else if (!isHidden) { // Don't serialize hidden fields
                        var value = void 0;
                        if (isObj) {
                            if (isArray) {
                                // special case; recurse on each object in the source array
                                value = _serializeArray(source[field], field);
                            }
                            else {
                                // recurse on the source object in this field
                                value = _serializeObject(source[field], field);
                            }
                        }
                        else {
                            // assign the source field to the output even if undefined or required
                            value = source[field];
                        }
                        // only emit this field if the value is defined
                        if (value !== undefined) {
                            output[field] = value;
                        }
                    }
                });
                delete source[circularReferenceCheck];
                return output;
            }
            function _serializeArray(sources, name) {
                var output;
                if (!!sources) {
                    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isArray)(sources)) {
                        logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.ItemNotInArray, "This field was specified as an array in the contract but the item is not an array.\r\n", { name: name }, true);
                    }
                    else {
                        output = [];
                        for (var i = 0; i < sources.length; i++) {
                            var source = sources[i];
                            var item = _serializeObject(source, name + "[" + i + "]");
                            output.push(item);
                        }
                    }
                }
                return output;
            }
            function _serializeStringMap(map, expectedType, name) {
                var output;
                if (map) {
                    output = {};
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.objForEachKey)(map, function (field, value) {
                        if (expectedType === "string") {
                            if (value === undefined) {
                                output[field] = "undefined";
                            }
                            else if (value === null) {
                                output[field] = "null";
                            }
                            else if (!value.toString) {
                                output[field] = "invalid field: toString() is not defined.";
                            }
                            else {
                                output[field] = value.toString();
                            }
                        }
                        else if (expectedType === "number") {
                            if (value === undefined) {
                                output[field] = "undefined";
                            }
                            else if (value === null) {
                                output[field] = "null";
                            }
                            else {
                                var num = parseFloat(value);
                                if (isNaN(num)) {
                                    output[field] = "NaN";
                                }
                                else {
                                    output[field] = num;
                                }
                            }
                        }
                        else {
                            output[field] = "invalid field: " + name + " is of unknown type.";
                            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, output[field], null, true);
                        }
                    });
                }
                return output;
            }
        });
    }
// Removed Stub for Serializer.prototype.serialize.
    return Serializer;
}());

//# sourceMappingURL=Serializer.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sample": () => (/* binding */ Sample)
/* harmony export */ });
/* harmony import */ var _SamplingScoreGenerators_SamplingScoreGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SamplingScoreGenerators/SamplingScoreGenerator */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





var Sample = /** @class */ (function () {
    function Sample(sampleRate, logger) {
        // We're using 32 bit math, hence max value is (2^31 - 1)
        this.INT_MAX_VALUE = 2147483647;
        var _logger = logger || (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.safeGetLogger)(null);
        if (sampleRate > 100 || sampleRate < 0) {
            _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.SampleRateOutOfRange, "Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.", { samplingRate: sampleRate }, true);
            sampleRate = 100;
        }
        this.sampleRate = sampleRate;
        this.samplingScoreGenerator = new _SamplingScoreGenerators_SamplingScoreGenerator__WEBPACK_IMPORTED_MODULE_2__.SamplingScoreGenerator();
    }
    /**
     * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).
     */
    Sample.prototype.isSampledIn = function (envelope) {
        var samplingPercentage = this.sampleRate; // 0 - 100
        var isSampledIn = false;
        if (samplingPercentage === null || samplingPercentage === undefined || samplingPercentage >= 100) {
            return true;
        }
        else if (envelope.baseType === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__.Metric.dataType) {
            // exclude MetricData telemetry from sampling
            return true;
        }
        isSampledIn = this.samplingScoreGenerator.getSamplingScore(envelope) < samplingPercentage;
        return isSampledIn;
    };
    return Sample;
}());

//# sourceMappingURL=Sample.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HashCodeScoreGenerator": () => (/* binding */ HashCodeScoreGenerator)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution
var MIN_INPUT_LENGTH = 8;
var HashCodeScoreGenerator = /** @class */ (function () {
    function HashCodeScoreGenerator() {
    }
    HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {
        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;
        return score * 100;
    };
    HashCodeScoreGenerator.prototype.getHashCode = function (input) {
        if (input === "") {
            return 0;
        }
        while (input.length < MIN_INPUT_LENGTH) {
            input = input.concat(input);
        }
        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function
        var hash = 5381;
        for (var i = 0; i < input.length; ++i) {
            hash = ((hash << 5) + hash) + input.charCodeAt(i);
            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)
            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.
            hash = hash & hash;
        }
        return Math.abs(hash);
    };
    // We're using 32 bit math, hence max value is (2^31 - 1)
    HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;
    return HashCodeScoreGenerator;
}());

//# sourceMappingURL=HashCodeScoreGenerator.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SamplingScoreGenerator": () => (/* binding */ SamplingScoreGenerator)
/* harmony export */ });
/* harmony import */ var _HashCodeScoreGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HashCodeScoreGenerator */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js");
/*
 * Application Insights JavaScript SDK - Channel, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var SamplingScoreGenerator = /** @class */ (function () {
    function SamplingScoreGenerator() {
        var _self = this;
        var hashCodeGenerator = new _HashCodeScoreGenerator__WEBPACK_IMPORTED_MODULE_0__.HashCodeScoreGenerator();
        var keys = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.ContextTagKeys();
        _self.getSamplingScore = function (item) {
            var score = 0;
            if (item.tags && item.tags[keys.userId]) { // search in tags first, then ext
                score = hashCodeGenerator.getHashCodeScore(item.tags[keys.userId]);
            }
            else if (item.ext && item.ext.user && item.ext.user.id) {
                score = hashCodeGenerator.getHashCodeScore(item.ext.user.id);
            }
            else if (item.tags && item.tags[keys.operationId]) { // search in tags first, then ext
                score = hashCodeGenerator.getHashCodeScore(item.tags[keys.operationId]);
            }
            else if (item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace.traceID) {
                score = hashCodeGenerator.getHashCodeScore(item.ext.telemetryTrace.traceID);
            }
            else {
                // tslint:disable-next-line:insecure-random
                score = (Math.random() * 100);
            }
            return score;
        };
    }
    return SamplingScoreGenerator;
}());

//# sourceMappingURL=SamplingScoreGenerator.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/ConnectionStringParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/ConnectionStringParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionStringParser": () => (/* binding */ ConnectionStringParser),
/* harmony export */   "parseConnectionString": () => (/* binding */ parseConnectionString)
/* harmony export */ });
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var _FIELDS_SEPARATOR = ";";
var _FIELD_KEY_VALUE_SEPARATOR = "=";
function parseConnectionString(connectionString) {
    if (!connectionString) {
        return {};
    }
    var kvPairs = connectionString.split(_FIELDS_SEPARATOR);
    var result = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrReduce)(kvPairs, function (fields, kv) {
        var kvParts = kv.split(_FIELD_KEY_VALUE_SEPARATOR);
        if (kvParts.length === 2) { // only save fields with valid formats
            var key = kvParts[0].toLowerCase();
            var value = kvParts[1];
            fields[key] = value;
        }
        return fields;
    }, {});
    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objKeys)(result).length > 0) {
        // this is a valid connection string, so parse the results
        if (result.endpointsuffix) {
            // use endpoint suffix where overrides are not provided
            var locationPrefix = result.location ? result.location + "." : "";
            result.ingestionendpoint = result.ingestionendpoint || ("https://" + locationPrefix + "dc." + result.endpointsuffix);
        }
        // apply the default endpoints
        result.ingestionendpoint = result.ingestionendpoint || _Constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_BREEZE_ENDPOINT;
    }
    return result;
}
var ConnectionStringParser = {
    parse: parseConnectionString
};
//# sourceMappingURL=ConnectionStringParser.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_BREEZE_ENDPOINT": () => (/* binding */ DEFAULT_BREEZE_ENDPOINT),
/* harmony export */   "DisabledPropertyName": () => (/* binding */ DisabledPropertyName),
/* harmony export */   "HttpMethod": () => (/* binding */ HttpMethod),
/* harmony export */   "ProcessLegacy": () => (/* binding */ ProcessLegacy),
/* harmony export */   "SampleRate": () => (/* binding */ SampleRate),
/* harmony export */   "strIkey": () => (/* binding */ strIkey),
/* harmony export */   "strNotSpecified": () => (/* binding */ strNotSpecified)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * This is an internal property used to cause internal (reporting) requests to be ignored from reporting
 * additional telemetry, to handle polyfil implementations ALL urls used with a disabled request will
 * also be ignored for future requests even when this property is not provided.
 * Tagging as Ignore as this is an internal value and is not expected to be used outside of the SDK
 * @ignore
 */
var DisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
var SampleRate = "sampleRate";
var ProcessLegacy = "ProcessLegacy";
var HttpMethod = "http.method";
var DEFAULT_BREEZE_ENDPOINT = "https://dc.services.visualstudio.com";
var strNotSpecified = "not_specified";
var strIkey = "iKey";
//# sourceMappingURL=Constants.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/DomHelperFuncs.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/DomHelperFuncs.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDomEvent": () => (/* binding */ createDomEvent)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



function createDomEvent(eventName) {
    var event = null;
    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(Event)) { // Use Event constructor when available
        event = new Event(eventName);
    }
    else { // Event has no constructor in IE
        var doc = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
        if (doc && doc.createEvent) {
            event = doc.createEvent("Event");
            event.initEvent(eventName, true, true);
        }
    }
    return event;
}
//# sourceMappingURL=DomHelperFuncs.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DistributedTracingModes": () => (/* binding */ DistributedTracingModes),
/* harmony export */   "StorageType": () => (/* binding */ StorageType)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * Type of storage to differentiate between local storage and session storage
 */
var StorageType;
(function (StorageType) {
    StorageType[StorageType["LocalStorage"] = 0] = "LocalStorage";
    StorageType[StorageType["SessionStorage"] = 1] = "SessionStorage";
})(StorageType || (StorageType = {}));
var DistributedTracingModes;
(function (DistributedTracingModes) {
    /**
     * (Default) Send Application Insights correlation headers
     */
    DistributedTracingModes[DistributedTracingModes["AI"] = 0] = "AI";
    /**
     * Send both W3C Trace Context headers and back-compatibility Application Insights headers
     */
    DistributedTracingModes[DistributedTracingModes["AI_AND_W3C"] = 1] = "AI_AND_W3C";
    /**
     * Send W3C Trace Context headers
     */
    DistributedTracingModes[DistributedTracingModes["W3C"] = 2] = "W3C";
})(DistributedTracingModes || (DistributedTracingModes = {}));
//# sourceMappingURL=Enums.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExtensionByName": () => (/* binding */ getExtensionByName),
/* harmony export */   "isCrossOriginError": () => (/* binding */ isCrossOriginError),
/* harmony export */   "msToTimeSpan": () => (/* binding */ msToTimeSpan),
/* harmony export */   "stringToBoolOrDefault": () => (/* binding */ stringToBoolOrDefault)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



function stringToBoolOrDefault(str, defaultValue) {
    if (defaultValue === void 0) { defaultValue = false; }
    if (str === undefined || str === null) {
        return defaultValue;
    }
    return str.toString().toLowerCase() === "true";
}
/**
 * Convert ms to c# time span format
 */
function msToTimeSpan(totalms) {
    if (isNaN(totalms) || totalms < 0) {
        totalms = 0;
    }
    totalms = Math.round(totalms);
    var ms = "" + totalms % 1000;
    var sec = "" + Math.floor(totalms / 1000) % 60;
    var min = "" + Math.floor(totalms / (1000 * 60)) % 60;
    var hour = "" + Math.floor(totalms / (1000 * 60 * 60)) % 24;
    var days = Math.floor(totalms / (1000 * 60 * 60 * 24));
    ms = ms.length === 1 ? "00" + ms : ms.length === 2 ? "0" + ms : ms;
    sec = sec.length < 2 ? "0" + sec : sec;
    min = min.length < 2 ? "0" + min : min;
    hour = hour.length < 2 ? "0" + hour : hour;
    return (days > 0 ? days + "." : "") + hour + ":" + min + ":" + sec + "." + ms;
}
function getExtensionByName(extensions, identifier) {
    var extension = null;
    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrForEach)(extensions, function (value) {
        if (value.identifier === identifier) {
            extension = value;
            return -1;
        }
    });
    return extension;
}
function isCrossOriginError(message, url, lineNumber, columnNumber, error) {
    return !error && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(message) && (message === "Script error." || message === "Script error");
}
//# sourceMappingURL=HelperFuncs.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Base.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Base.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Base": () => (/* binding */ Base)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// THIS FILE WAS AUTOGENERATED
/**
 * Data struct to contain only C section with custom fields.
 */
var Base = /** @class */ (function () {
    function Base() {
    }
    return Base;
}());

//# sourceMappingURL=Base.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContextTagKeys": () => (/* binding */ ContextTagKeys)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




function _aiNameFunc(baseName) {
    var aiName = "ai." + baseName + ".";
    return function (name) {
        return aiName + name;
    };
}
var _aiApplication = _aiNameFunc("application");
var _aiDevice = _aiNameFunc("device");
var _aiLocation = _aiNameFunc("location");
var _aiOperation = _aiNameFunc("operation");
var _aiSession = _aiNameFunc("session");
var _aiUser = _aiNameFunc("user");
var _aiCloud = _aiNameFunc("cloud");
var _aiInternal = _aiNameFunc("internal");
var ContextTagKeys = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(ContextTagKeys, _super);
    function ContextTagKeys() {
        return _super.call(this) || this;
    }
    return ContextTagKeys;
}((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.createClassFromInterface)({
    applicationVersion: _aiApplication("ver"),
    applicationBuild: _aiApplication("build"),
    applicationTypeId: _aiApplication("typeId"),
    applicationId: _aiApplication("applicationId"),
    applicationLayer: _aiApplication("layer"),
    deviceId: _aiDevice("id"),
    deviceIp: _aiDevice("ip"),
    deviceLanguage: _aiDevice("language"),
    deviceLocale: _aiDevice("locale"),
    deviceModel: _aiDevice("model"),
    deviceFriendlyName: _aiDevice("friendlyName"),
    deviceNetwork: _aiDevice("network"),
    deviceNetworkName: _aiDevice("networkName"),
    deviceOEMName: _aiDevice("oemName"),
    deviceOS: _aiDevice("os"),
    deviceOSVersion: _aiDevice("osVersion"),
    deviceRoleInstance: _aiDevice("roleInstance"),
    deviceRoleName: _aiDevice("roleName"),
    deviceScreenResolution: _aiDevice("screenResolution"),
    deviceType: _aiDevice("type"),
    deviceMachineName: _aiDevice("machineName"),
    deviceVMName: _aiDevice("vmName"),
    deviceBrowser: _aiDevice("browser"),
    deviceBrowserVersion: _aiDevice("browserVersion"),
    locationIp: _aiLocation("ip"),
    locationCountry: _aiLocation("country"),
    locationProvince: _aiLocation("province"),
    locationCity: _aiLocation("city"),
    operationId: _aiOperation("id"),
    operationName: _aiOperation("name"),
    operationParentId: _aiOperation("parentId"),
    operationRootId: _aiOperation("rootId"),
    operationSyntheticSource: _aiOperation("syntheticSource"),
    operationCorrelationVector: _aiOperation("correlationVector"),
    sessionId: _aiSession("id"),
    sessionIsFirst: _aiSession("isFirst"),
    sessionIsNew: _aiSession("isNew"),
    userAccountAcquisitionDate: _aiUser("accountAcquisitionDate"),
    userAccountId: _aiUser("accountId"),
    userAgent: _aiUser("userAgent"),
    userId: _aiUser("id"),
    userStoreRegion: _aiUser("storeRegion"),
    userAuthUserId: _aiUser("authUserId"),
    userAnonymousUserAcquisitionDate: _aiUser("anonUserAcquisitionDate"),
    userAuthenticatedUserAcquisitionDate: _aiUser("authUserAcquisitionDate"),
    cloudName: _aiCloud("name"),
    cloudRole: _aiCloud("role"),
    cloudRoleVer: _aiCloud("roleVer"),
    cloudRoleInstance: _aiCloud("roleInstance"),
    cloudEnvironment: _aiCloud("environment"),
    cloudLocation: _aiCloud("location"),
    cloudDeploymentUnit: _aiCloud("deploymentUnit"),
    internalNodeName: _aiInternal("nodeName"),
    internalSdkVersion: _aiInternal("sdkVersion"),
    internalAgentVersion: _aiInternal("agentVersion"),
    internalSnippet: _aiInternal("snippet"),
    internalSdkSrc: _aiInternal("sdkSrc")
})));

//# sourceMappingURL=ContextTagKeys.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Data.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Data.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Data": () => (/* binding */ Data)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Base */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Base.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



// THIS FILE WAS AUTOGENERATED

/**
 * Data struct to contain both B and C sections.
 */
var Data = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(Data, _super);
    function Data() {
        return _super.call(this) || this;
    }
    return Data;
}(_Base__WEBPACK_IMPORTED_MODULE_1__.Base));

//# sourceMappingURL=Data.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/DataPoint.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/DataPoint.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataPoint": () => (/* binding */ DataPoint)
/* harmony export */ });
/* harmony import */ var _DataPointType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPointType */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/DataPointType.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



/**
 * Metric data single measurement.
 */
var DataPoint = /** @class */ (function () {
    function DataPoint() {
        /**
         * Metric type. Single measurement or the aggregated value.
         */
        this.kind = _DataPointType__WEBPACK_IMPORTED_MODULE_0__.DataPointType.Measurement;
    }
    return DataPoint;
}());

//# sourceMappingURL=DataPoint.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/DataPointType.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/DataPointType.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataPointType": () => (/* binding */ DataPointType)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// THIS FILE WAS AUTOGENERATED
/**
 * Type of the metric data measurement.
 */
var DataPointType;
(function (DataPointType) {
    DataPointType[DataPointType["Measurement"] = 0] = "Measurement";
    DataPointType[DataPointType["Aggregation"] = 1] = "Aggregation";
})(DataPointType || (DataPointType = {}));
//# sourceMappingURL=DataPointType.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Envelope.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Envelope.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Envelope": () => (/* binding */ Envelope)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * System variables for a telemetry item.
 */
var Envelope = /** @class */ (function () {
    function Envelope() {
        /**
         * Envelope version. For internal use only. By assigning this the default, it will not be serialized within the payload unless changed to a value other than #1.
         */
        this.ver = 1;
        /**
         * Sampling rate used in application. This telemetry item represents 1 / sampleRate actual telemetry items.
         */
        this.sampleRate = 100.0;
        /**
         * Key/value collection of context properties. See ContextTagKeys for information on available properties.
         */
        this.tags = {};
    }
    return Envelope;
}());

//# sourceMappingURL=Envelope.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/EventData.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/EventData.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventData": () => (/* binding */ EventData)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * Instances of Event represent structured event records that can be grouped and searched by their properties. Event data item also creates a metric of event count by name.
 */
var EventData = /** @class */ (function () {
    function EventData() {
        /**
         * Schema version
         */
        this.ver = 2;
        /**
         * Collection of custom properties.
         */
        this.properties = {};
        /**
         * Collection of custom measurements.
         */
        this.measurements = {};
    }
    return EventData;
}());

//# sourceMappingURL=EventData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ExceptionData.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ExceptionData.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExceptionData": () => (/* binding */ ExceptionData)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application.
 */
var ExceptionData = /** @class */ (function () {
    function ExceptionData() {
        /**
         * Schema version
         */
        this.ver = 2;
        /**
         * Exception chain - list of inner exceptions.
         */
        this.exceptions = [];
        /**
         * Collection of custom properties.
         */
        this.properties = {};
        /**
         * Collection of custom measurements.
         */
        this.measurements = {};
    }
    return ExceptionData;
}());

//# sourceMappingURL=ExceptionData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ExceptionDetails.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ExceptionDetails.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExceptionDetails": () => (/* binding */ ExceptionDetails)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * Exception details of the exception in a chain.
 */
var ExceptionDetails = /** @class */ (function () {
    function ExceptionDetails() {
        /**
         * Indicates if full exception stack is provided in the exception. The stack may be trimmed, such as in the case of a StackOverflow exception.
         */
        this.hasFullStack = true;
        /**
         * List of stack frames. Either stack or parsedStack should have a value.
         */
        this.parsedStack = [];
    }
    return ExceptionDetails;
}());

//# sourceMappingURL=ExceptionDetails.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/MessageData.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/MessageData.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MessageData": () => (/* binding */ MessageData)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * Instances of Message represent printf-like trace statements that are text-searched. Log4Net, NLog and other text-based log file entries are translated into intances of this type. The message does not have measurements.
 */
var MessageData = /** @class */ (function () {
    function MessageData() {
        /**
         * Schema version
         */
        this.ver = 2;
        /**
         * Collection of custom properties.
         */
        this.properties = {};
        /**
         * Collection of custom measurements.
         */
        this.measurements = {};
    }
    return MessageData;
}());

//# sourceMappingURL=MessageData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/MetricData.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/MetricData.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MetricData": () => (/* binding */ MetricData)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * An instance of the Metric item is a list of measurements (single data points) and/or aggregations.
 */
var MetricData = /** @class */ (function () {
    function MetricData() {
        /**
         * Schema version
         */
        this.ver = 2;
        /**
         * List of metrics. Only one metric in the list is currently supported by Application Insights storage. If multiple data points were sent only the first one will be used.
         */
        this.metrics = [];
        /**
         * Collection of custom properties.
         */
        this.properties = {};
        /**
         * Collection of custom measurements.
         */
        this.measurements = {};
    }
    return MetricData;
}());

//# sourceMappingURL=MetricData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewData.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewData.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageViewData": () => (/* binding */ PageViewData)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _EventData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/EventData.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



// THIS FILE WAS AUTOGENERATED

/**
 * An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView.
 */
var PageViewData = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(PageViewData, _super);
    function PageViewData() {
        var _this = _super.call(this) || this;
        /**
         * Schema version
         */
        _this.ver = 2;
        /**
         * Collection of custom properties.
         */
        _this.properties = {};
        /**
         * Collection of custom measurements.
         */
        _this.measurements = {};
        return _this;
    }
    return PageViewData;
}(_EventData__WEBPACK_IMPORTED_MODULE_1__.EventData));

//# sourceMappingURL=PageViewData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewPerfData.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewPerfData.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageViewPerfData": () => (/* binding */ PageViewPerfData)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _PageViewData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PageViewData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewData.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



// THIS FILE WAS AUTOGENERATED

/**
 * An instance of PageViewPerf represents: a page view with no performance data, a page view with performance data, or just the performance data of an earlier page request.
 */
var PageViewPerfData = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(PageViewPerfData, _super);
    function PageViewPerfData() {
        var _this = _super.call(this) || this;
        /**
         * Schema version
         */
        _this.ver = 2;
        /**
         * Collection of custom properties.
         */
        _this.properties = {};
        /**
         * Collection of custom measurements.
         */
        _this.measurements = {};
        return _this;
    }
    return PageViewPerfData;
}(_PageViewData__WEBPACK_IMPORTED_MODULE_1__.PageViewData));

//# sourceMappingURL=PageViewPerfData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/RemoteDependencyData.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/RemoteDependencyData.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RemoteDependencyData": () => (/* binding */ RemoteDependencyData)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint.
 */
var RemoteDependencyData = /** @class */ (function () {
    function RemoteDependencyData() {
        /**
         * Schema version
         */
        this.ver = 2;
        /**
         * Indication of successful or unsuccessful call.
         */
        this.success = true;
        /**
         * Collection of custom properties.
         */
        this.properties = {};
        /**
         * Collection of custom measurements.
         */
        this.measurements = {};
    }
    return RemoteDependencyData;
}());

//# sourceMappingURL=RemoteDependencyData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SeverityLevel": () => (/* binding */ SeverityLevel)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// THIS FILE WAS AUTOGENERATED
/**
 * Defines the level of severity for the event.
 */
var SeverityLevel;
(function (SeverityLevel) {
    SeverityLevel[SeverityLevel["Verbose"] = 0] = "Verbose";
    SeverityLevel[SeverityLevel["Information"] = 1] = "Information";
    SeverityLevel[SeverityLevel["Warning"] = 2] = "Warning";
    SeverityLevel[SeverityLevel["Error"] = 3] = "Error";
    SeverityLevel[SeverityLevel["Critical"] = 4] = "Critical";
})(SeverityLevel || (SeverityLevel = {}));
//# sourceMappingURL=SeverityLevel.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/StackFrame.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/StackFrame.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StackFrame": () => (/* binding */ StackFrame)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// THIS FILE WAS AUTOGENERATED
/**
 * Stack frame information.
 */
var StackFrame = /** @class */ (function () {
    function StackFrame() {
    }
    return StackFrame;
}());

//# sourceMappingURL=StackFrame.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/IConfig.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/IConfig.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfigurationManager": () => (/* binding */ ConfigurationManager)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



var ConfigurationManager = /** @class */ (function () {
    function ConfigurationManager() {
    }
    ConfigurationManager.getConfig = function (config, field, identifier, defaultValue) {
        if (defaultValue === void 0) { defaultValue = false; }
        var configValue;
        if (identifier && config.extensionConfig && config.extensionConfig[identifier] && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(config.extensionConfig[identifier][field])) {
            configValue = config.extensionConfig[identifier][field];
        }
        else {
            configValue = config[field];
        }
        return !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(configValue) ? configValue : defaultValue;
    };
    return ConfigurationManager;
}());

//# sourceMappingURL=IConfig.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/PartAExtensions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/PartAExtensions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CtxTagKeys": () => (/* binding */ CtxTagKeys),
/* harmony export */   "Extensions": () => (/* binding */ Extensions)
/* harmony export */ });
/* harmony import */ var _Contracts_Generated_ContextTagKeys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts/Generated/ContextTagKeys */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */

var Extensions = {
    UserExt: "user",
    DeviceExt: "device",
    TraceExt: "trace",
    WebExt: "web",
    AppExt: "app",
    OSExt: "os",
    SessionExt: "ses",
    SDKExt: "sdk"
};
var CtxTagKeys = new _Contracts_Generated_ContextTagKeys__WEBPACK_IMPORTED_MODULE_0__.ContextTagKeys();
//# sourceMappingURL=PartAExtensions.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RequestHeaders": () => (/* binding */ RequestHeaders)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var RequestHeaders = {
    requestContextHeader: "Request-Context",
    requestContextTargetKey: "appId",
    requestContextAppIdFormat: "appId=cid-v1:",
    requestIdHeader: "Request-Id",
    traceParentHeader: "traceparent",
    traceStateHeader: "tracestate",
    sdkContextHeader: "Sdk-Context",
    sdkContextHeaderAppIdRequest: "appId",
    requestContextHeaderLowerCase: "request-context"
};
//# sourceMappingURL=RequestResponseHeaders.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "utlCanUseLocalStorage": () => (/* binding */ utlCanUseLocalStorage),
/* harmony export */   "utlCanUseSessionStorage": () => (/* binding */ utlCanUseSessionStorage),
/* harmony export */   "utlDisableStorage": () => (/* binding */ utlDisableStorage),
/* harmony export */   "utlGetLocalStorage": () => (/* binding */ utlGetLocalStorage),
/* harmony export */   "utlGetSessionStorage": () => (/* binding */ utlGetSessionStorage),
/* harmony export */   "utlGetSessionStorageKeys": () => (/* binding */ utlGetSessionStorageKeys),
/* harmony export */   "utlRemoveSessionStorage": () => (/* binding */ utlRemoveSessionStorage),
/* harmony export */   "utlRemoveStorage": () => (/* binding */ utlRemoveStorage),
/* harmony export */   "utlSetLocalStorage": () => (/* binding */ utlSetLocalStorage),
/* harmony export */   "utlSetSessionStorage": () => (/* binding */ utlSetSessionStorage)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _Enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Enums */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var _canUseLocalStorage = undefined;
var _canUseSessionStorage = undefined;
/**
 * Gets the localStorage object if available
 * @return {Storage} - Returns the storage object if available else returns null
 */
function _getLocalStorageObject() {
    if (utlCanUseLocalStorage()) {
        return _getVerifiedStorageObject(_Enums__WEBPACK_IMPORTED_MODULE_0__.StorageType.LocalStorage);
    }
    return null;
}
/**
 * Tests storage object (localStorage or sessionStorage) to verify that it is usable
 * More details here: https://mathiasbynens.be/notes/localstorage-pattern
 * @param storageType Type of storage
 * @return {Storage} Returns storage object verified that it is usable
 */
function _getVerifiedStorageObject(storageType) {
    try {
        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.getGlobal)())) {
            return null;
        }
        var uid = new Date;
        var storage = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getGlobalInst)(storageType === _Enums__WEBPACK_IMPORTED_MODULE_0__.StorageType.LocalStorage ? "localStorage" : "sessionStorage");
        storage.setItem(uid.toString(), uid.toString());
        var fail = storage.getItem(uid.toString()) !== uid.toString();
        storage.removeItem(uid.toString());
        if (!fail) {
            return storage;
        }
    }
    catch (exception) {
        // eslint-disable-next-line no-empty
    }
    return null;
}
/**
 * Gets the sessionStorage object if available
 * @return {Storage} - Returns the storage object if available else returns null
 */
function _getSessionStorageObject() {
    if (utlCanUseSessionStorage()) {
        return _getVerifiedStorageObject(_Enums__WEBPACK_IMPORTED_MODULE_0__.StorageType.SessionStorage);
    }
    return null;
}
function utlDisableStorage() {
    _canUseLocalStorage = false;
    _canUseSessionStorage = false;
}
function utlCanUseLocalStorage() {
    if (_canUseLocalStorage === undefined) {
        _canUseLocalStorage = !!_getVerifiedStorageObject(_Enums__WEBPACK_IMPORTED_MODULE_0__.StorageType.LocalStorage);
    }
    return _canUseLocalStorage;
}
function utlGetLocalStorage(logger, name) {
    var storage = _getLocalStorageObject();
    if (storage !== null) {
        try {
            return storage.getItem(name);
        }
        catch (e) {
            _canUseLocalStorage = false;
            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.BrowserCannotReadLocalStorage, "Browser failed read of local storage. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
        }
    }
    return null;
}
function utlSetLocalStorage(logger, name, data) {
    var storage = _getLocalStorageObject();
    if (storage !== null) {
        try {
            storage.setItem(name, data);
            return true;
        }
        catch (e) {
            _canUseLocalStorage = false;
            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.BrowserCannotWriteLocalStorage, "Browser failed write to local storage. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
        }
    }
    return false;
}
function utlRemoveStorage(logger, name) {
    var storage = _getLocalStorageObject();
    if (storage !== null) {
        try {
            storage.removeItem(name);
            return true;
        }
        catch (e) {
            _canUseLocalStorage = false;
            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.BrowserFailedRemovalFromLocalStorage, "Browser failed removal of local storage item. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
        }
    }
    return false;
}
function utlCanUseSessionStorage() {
    if (_canUseSessionStorage === undefined) {
        _canUseSessionStorage = !!_getVerifiedStorageObject(_Enums__WEBPACK_IMPORTED_MODULE_0__.StorageType.SessionStorage);
    }
    return _canUseSessionStorage;
}
function utlGetSessionStorageKeys() {
    var keys = [];
    if (utlCanUseSessionStorage()) {
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.objForEachKey)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getGlobalInst)("sessionStorage"), function (key) {
            keys.push(key);
        });
    }
    return keys;
}
function utlGetSessionStorage(logger, name) {
    var storage = _getSessionStorageObject();
    if (storage !== null) {
        try {
            return storage.getItem(name);
        }
        catch (e) {
            _canUseSessionStorage = false;
            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.BrowserCannotReadSessionStorage, "Browser failed read of session storage. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
        }
    }
    return null;
}
function utlSetSessionStorage(logger, name, data) {
    var storage = _getSessionStorageObject();
    if (storage !== null) {
        try {
            storage.setItem(name, data);
            return true;
        }
        catch (e) {
            _canUseSessionStorage = false;
            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.BrowserCannotWriteSessionStorage, "Browser failed write to session storage. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
        }
    }
    return false;
}
function utlRemoveSessionStorage(logger, name) {
    var storage = _getSessionStorageObject();
    if (storage !== null) {
        try {
            storage.removeItem(name);
            return true;
        }
        catch (e) {
            _canUseSessionStorage = false;
            logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.BrowserFailedRemovalFromSessionStorage, "Browser failed removal of session storage item. " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
        }
    }
    return false;
}
//# sourceMappingURL=StorageHelperFuncs.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/TelemetryItemCreator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/TelemetryItemCreator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TelemetryItemCreator": () => (/* binding */ TelemetryItemCreator)
/* harmony export */ });
/* harmony import */ var _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Telemetry/Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





var TelemetryItemCreator = /** @class */ (function () {
    function TelemetryItemCreator() {
    }
    /**
     * Create a telemetry item that the 1DS channel understands
     * @param item domain specific properties; part B
     * @param baseType telemetry item type. ie PageViewData
     * @param envelopeName name of the envelope. ie Microsoft.ApplicationInsights.<instrumentation key>.PageView
     * @param customProperties user defined custom properties; part C
     * @param systemProperties system properties that are added to the context; part A
     * @returns ITelemetryItem that is sent to channel
     */
    TelemetryItemCreator.create = function (item, baseType, envelopeName, logger, customProperties, systemProperties) {
        envelopeName = (0,_Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_0__.dataSanitizeString)(logger, envelopeName) || _Constants__WEBPACK_IMPORTED_MODULE_1__.strNotSpecified;
        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(item) ||
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(baseType) ||
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(envelopeName)) {
            throw Error("Input doesn't contain all required fields");
        }
        var iKey = "";
        if (item[_Constants__WEBPACK_IMPORTED_MODULE_1__.strIkey]) {
            iKey = item[_Constants__WEBPACK_IMPORTED_MODULE_1__.strIkey];
            delete item[_Constants__WEBPACK_IMPORTED_MODULE_1__.strIkey];
        }
        var telemetryItem = {
            name: envelopeName,
            time: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.toISOString)(new Date()),
            iKey: iKey,
            ext: systemProperties ? systemProperties : {},
            tags: [],
            data: {},
            baseType: baseType,
            baseData: item // Part B
        };
        // Part C
        if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(customProperties)) {
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.objForEachKey)(customProperties, function (prop, value) {
                telemetryItem.data[prop] = value;
            });
        }
        return telemetryItem;
    };
    return TelemetryItemCreator;
}());

//# sourceMappingURL=TelemetryItemCreator.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Data.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Data.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Data": () => (/* binding */ Data)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Interfaces/Contracts/Generated/Data */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Data.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var Data = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(Data, _super);
    /**
     * Constructs a new instance of telemetry data.
     */
    function Data(baseType, data) {
        var _this = _super.call(this) || this;
        /**
         * The data contract for serializing this object.
         */
        _this.aiDataContract = {
            baseType: 1 /* Required */,
            baseData: 1 /* Required */
        };
        _this.baseType = baseType;
        _this.baseData = data;
        return _this;
    }
    return Data;
}(_Interfaces_Contracts_Generated_Data__WEBPACK_IMPORTED_MODULE_1__.Data));

//# sourceMappingURL=Data.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataPoint.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataPoint.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataPoint": () => (/* binding */ DataPoint)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_DataPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Interfaces/Contracts/Generated/DataPoint */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/DataPoint.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var DataPoint = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(DataPoint, _super);
    function DataPoint() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The data contract for serializing this object.
         */
        _this.aiDataContract = {
            name: 1 /* Required */,
            kind: 0 /* Default */,
            value: 1 /* Required */,
            count: 0 /* Default */,
            min: 0 /* Default */,
            max: 0 /* Default */,
            stdDev: 0 /* Default */
        };
        return _this;
    }
    return DataPoint;
}(_Interfaces_Contracts_Generated_DataPoint__WEBPACK_IMPORTED_MODULE_1__.DataPoint));

//# sourceMappingURL=DataPoint.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSanitizer": () => (/* binding */ DataSanitizer),
/* harmony export */   "dataSanitizeException": () => (/* binding */ dataSanitizeException),
/* harmony export */   "dataSanitizeId": () => (/* binding */ dataSanitizeId),
/* harmony export */   "dataSanitizeInput": () => (/* binding */ dataSanitizeInput),
/* harmony export */   "dataSanitizeKey": () => (/* binding */ dataSanitizeKey),
/* harmony export */   "dataSanitizeKeyAndAddUniqueness": () => (/* binding */ dataSanitizeKeyAndAddUniqueness),
/* harmony export */   "dataSanitizeMeasurements": () => (/* binding */ dataSanitizeMeasurements),
/* harmony export */   "dataSanitizeMessage": () => (/* binding */ dataSanitizeMessage),
/* harmony export */   "dataSanitizeProperties": () => (/* binding */ dataSanitizeProperties),
/* harmony export */   "dataSanitizeString": () => (/* binding */ dataSanitizeString),
/* harmony export */   "dataSanitizeUrl": () => (/* binding */ dataSanitizeUrl),
/* harmony export */   "dsPadNumber": () => (/* binding */ dsPadNumber)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



function dataSanitizeKeyAndAddUniqueness(logger, key, map) {
    var origLength = key.length;
    var field = dataSanitizeKey(logger, key);
    // validation truncated the length.  We need to add uniqueness
    if (field.length !== origLength) {
        var i = 0;
        var uniqueField = field;
        while (map[uniqueField] !== undefined) {
            i++;
            uniqueField = field.substring(0, 150 /* MAX_NAME_LENGTH */ - 3) + dsPadNumber(i);
        }
        field = uniqueField;
    }
    return field;
}
function dataSanitizeKey(logger, name) {
    var nameTrunc;
    if (name) {
        // Remove any leading or trailing whitespace
        name = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim)(name.toString());
        // truncate the string to 150 chars
        if (name.length > 150 /* MAX_NAME_LENGTH */) {
            nameTrunc = name.substring(0, 150 /* MAX_NAME_LENGTH */);
            logger && logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.NameTooLong, "name is too long.  It has been truncated to " + 150 /* MAX_NAME_LENGTH */ + " characters.", { name: name }, true);
        }
    }
    return nameTrunc || name;
}
function dataSanitizeString(logger, value, maxLength) {
    if (maxLength === void 0) { maxLength = 1024 /* MAX_STRING_LENGTH */; }
    var valueTrunc;
    if (value) {
        maxLength = maxLength ? maxLength : 1024 /* MAX_STRING_LENGTH */; // in case default parameters dont work
        value = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim)(value);
        if (value.toString().length > maxLength) {
            valueTrunc = value.toString().substring(0, maxLength);
            logger && logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.StringValueTooLong, "string value is too long. It has been truncated to " + maxLength + " characters.", { value: value }, true);
        }
    }
    return valueTrunc || value;
}
function dataSanitizeUrl(logger, url) {
    return dataSanitizeInput(logger, url, 2048 /* MAX_URL_LENGTH */, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.UrlTooLong);
}
function dataSanitizeMessage(logger, message) {
    var messageTrunc;
    if (message) {
        if (message.length > 32768 /* MAX_MESSAGE_LENGTH */) {
            messageTrunc = message.substring(0, 32768 /* MAX_MESSAGE_LENGTH */);
            logger && logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.MessageTruncated, "message is too long, it has been truncated to " + 32768 /* MAX_MESSAGE_LENGTH */ + " characters.", { message: message }, true);
        }
    }
    return messageTrunc || message;
}
function dataSanitizeException(logger, exception) {
    var exceptionTrunc;
    if (exception) {
        // Make surte its a string
        var value = "" + exception;
        if (value.length > 32768 /* MAX_EXCEPTION_LENGTH */) {
            exceptionTrunc = value.substring(0, 32768 /* MAX_EXCEPTION_LENGTH */);
            logger && logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.ExceptionTruncated, "exception is too long, it has been truncated to " + 32768 /* MAX_EXCEPTION_LENGTH */ + " characters.", { exception: exception }, true);
        }
    }
    return exceptionTrunc || exception;
}
function dataSanitizeProperties(logger, properties) {
    if (properties) {
        var tempProps_1 = {};
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(properties, function (prop, value) {
            if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.hasJSON)()) {
                // Stringify any part C properties
                try {
                    value = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.getJSON)().stringify(value);
                }
                catch (e) {
                    logger && logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.CannotSerializeObjectNonSerializable, "custom property is not valid", { exception: e }, true);
                }
            }
            value = dataSanitizeString(logger, value, 8192 /* MAX_PROPERTY_LENGTH */);
            prop = dataSanitizeKeyAndAddUniqueness(logger, prop, tempProps_1);
            tempProps_1[prop] = value;
        });
        properties = tempProps_1;
    }
    return properties;
}
function dataSanitizeMeasurements(logger, measurements) {
    if (measurements) {
        var tempMeasurements_1 = {};
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objForEachKey)(measurements, function (measure, value) {
            measure = dataSanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements_1);
            tempMeasurements_1[measure] = value;
        });
        measurements = tempMeasurements_1;
    }
    return measurements;
}
function dataSanitizeId(logger, id) {
    return id ? dataSanitizeInput(logger, id, 128 /* MAX_ID_LENGTH */, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._InternalMessageId.IdTooLong).toString() : id;
}
function dataSanitizeInput(logger, input, maxLength, _msgId) {
    var inputTrunc;
    if (input) {
        input = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim)(input);
        if (input.length > maxLength) {
            inputTrunc = input.substring(0, maxLength);
            logger && logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.LoggingSeverity.WARNING, _msgId, "input is too long, it has been truncated to " + maxLength + " characters.", { data: input }, true);
        }
    }
    return inputTrunc || input;
}
function dsPadNumber(num) {
    var s = "00" + num;
    return s.substr(s.length - 3);
}
/**
 * Provides the DataSanitizer functions within the previous namespace.
 */
var DataSanitizer = {
    MAX_NAME_LENGTH: 150 /* MAX_NAME_LENGTH */,
    MAX_ID_LENGTH: 128 /* MAX_ID_LENGTH */,
    MAX_PROPERTY_LENGTH: 8192 /* MAX_PROPERTY_LENGTH */,
    MAX_STRING_LENGTH: 1024 /* MAX_STRING_LENGTH */,
    MAX_URL_LENGTH: 2048 /* MAX_URL_LENGTH */,
    MAX_MESSAGE_LENGTH: 32768 /* MAX_MESSAGE_LENGTH */,
    MAX_EXCEPTION_LENGTH: 32768 /* MAX_EXCEPTION_LENGTH */,
    sanitizeKeyAndAddUniqueness: dataSanitizeKeyAndAddUniqueness,
    sanitizeKey: dataSanitizeKey,
    sanitizeString: dataSanitizeString,
    sanitizeUrl: dataSanitizeUrl,
    sanitizeMessage: dataSanitizeMessage,
    sanitizeException: dataSanitizeException,
    sanitizeProperties: dataSanitizeProperties,
    sanitizeMeasurements: dataSanitizeMeasurements,
    sanitizeId: dataSanitizeId,
    sanitizeInput: dataSanitizeInput,
    padNumber: dsPadNumber,
    trim: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim
};
//# sourceMappingURL=DataSanitizer.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Envelope.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Envelope.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Envelope": () => (/* binding */ Envelope)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_Envelope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Interfaces/Contracts/Generated/Envelope */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Envelope.js");
/* harmony import */ var _DataSanitizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */







var Envelope = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(Envelope, _super);
    /**
     * Constructs a new instance of telemetry data.
     */
    function Envelope(logger, data, name) {
        var _this = _super.call(this) || this;
        _this.name = (0,_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeString)(logger, name) || _Constants__WEBPACK_IMPORTED_MODULE_2__.strNotSpecified;
        _this.data = data;
        _this.time = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.toISOString)(new Date());
        _this.aiDataContract = {
            time: 1 /* Required */,
            iKey: 1 /* Required */,
            name: 1 /* Required */,
            sampleRate: function () {
                return (_this.sampleRate === 100) ? 4 /* Hidden */ : 1 /* Required */;
            },
            tags: 1 /* Required */,
            data: 1 /* Required */
        };
        return _this;
    }
    return Envelope;
}(_Interfaces_Contracts_Generated_Envelope__WEBPACK_IMPORTED_MODULE_4__.Envelope));

//# sourceMappingURL=Envelope.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": () => (/* binding */ Event)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_EventData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/EventData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/EventData.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */






var Event = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(Event, _super);
    /**
     * Constructs a new instance of the EventTelemetry object
     */
    function Event(logger, name, properties, measurements) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: 1 /* Required */,
            name: 1 /* Required */,
            properties: 0 /* Default */,
            measurements: 0 /* Default */
        };
        _this.name = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeString)(logger, name) || _Constants__WEBPACK_IMPORTED_MODULE_2__.strNotSpecified;
        _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeProperties)(logger, properties);
        _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeMeasurements)(logger, measurements);
        return _this;
    }
    Event.envelopeType = "Microsoft.ApplicationInsights.{0}.Event";
    Event.dataType = "EventData";
    return Event;
}(_Interfaces_Contracts_Generated_EventData__WEBPACK_IMPORTED_MODULE_3__.EventData));

//# sourceMappingURL=Event.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Exception": () => (/* binding */ Exception),
/* harmony export */   "_ExceptionDetails": () => (/* binding */ _ExceptionDetails),
/* harmony export */   "_StackFrame": () => (/* binding */ _StackFrame),
/* harmony export */   "_formatErrorCode": () => (/* binding */ _formatErrorCode)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_StackFrame__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/StackFrame */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/StackFrame.js");
/* harmony import */ var _Interfaces_Contracts_Generated_ExceptionData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/ExceptionData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ExceptionData.js");
/* harmony import */ var _Interfaces_Contracts_Generated_ExceptionDetails__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/ExceptionDetails */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ExceptionDetails.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */









var NoMethod = "<no_method>";
var strError = "error";
var strStack = "stack";
var strStackDetails = "stackDetails";
var strErrorSrc = "errorSrc";
var strMessage = "message";
var strDescription = "description";
function _stringify(value, convertToString) {
    var result = value;
    if (result && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(result)) {
        if (JSON && JSON.stringify) {
            result = JSON.stringify(value);
            if (convertToString && (!result || result === "{}")) {
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value.toString)) {
                    result = value.toString();
                }
                else {
                    result = "" + value;
                }
            }
        }
        else {
            result = "" + value + " - (Missing JSON.stringify)";
        }
    }
    return result || "";
}
function _formatMessage(theEvent, errorType) {
    var evtMessage = theEvent;
    if (theEvent) {
        if (evtMessage && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(evtMessage)) {
            evtMessage = theEvent[strMessage] || theEvent[strDescription] || evtMessage;
        }
        // Make sure the message is a string
        if (evtMessage && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(evtMessage)) {
            // tslint:disable-next-line: prefer-conditional-expression
            evtMessage = _stringify(evtMessage, true);
        }
        if (theEvent["filename"]) {
            // Looks like an event object with filename
            evtMessage = evtMessage + " @" + (theEvent["filename"] || "") + ":" + (theEvent["lineno"] || "?") + ":" + (theEvent["colno"] || "?");
        }
    }
    // Automatically add the error type to the message if it does already appear to be present
    if (errorType && errorType !== "String" && errorType !== "Object" && errorType !== "Error" && (evtMessage || "").indexOf(errorType) === -1) {
        evtMessage = errorType + ": " + evtMessage;
    }
    return evtMessage || "";
}
function _isExceptionDetailsInternal(value) {
    try {
        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
            return "hasFullStack" in value && "typeName" in value;
        }
    }
    catch (e) {
        // This can happen with some native browser objects, but should not happen for the type we are checking for
    }
    return false;
}
function _isExceptionInternal(value) {
    try {
        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
            return ("ver" in value && "exceptions" in value && "properties" in value);
        }
    }
    catch (e) {
        // This can happen with some native browser objects, but should not happen for the type we are checking for
    }
    return false;
}
function _isStackDetails(details) {
    return details && details.src && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(details.src) && details.obj && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(details.obj);
}
function _convertStackObj(errorStack) {
    var src = errorStack || "";
    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(src)) {
        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(src[strStack])) {
            src = src[strStack];
        }
        else {
            src = "" + src;
        }
    }
    var items = src.split("\n");
    return {
        src: src,
        obj: items
    };
}
function _getOperaStack(errorMessage) {
    var stack = [];
    var lines = errorMessage.split("\n");
    for (var lp = 0; lp < lines.length; lp++) {
        var entry = lines[lp];
        if (lines[lp + 1]) {
            entry += "@" + lines[lp + 1];
            lp++;
        }
        stack.push(entry);
    }
    return {
        src: errorMessage,
        obj: stack
    };
}
function _getStackFromErrorObj(errorObj) {
    var details = null;
    if (errorObj) {
        try {
            /* Using bracket notation is support older browsers (IE 7/8 -- dont remember the version) that throw when using dot
            notation for undefined objects and we don't want to loose the error from being reported */
            if (errorObj[strStack]) {
                // Chrome/Firefox
                details = _convertStackObj(errorObj[strStack]);
            }
            else if (errorObj[strError] && errorObj[strError][strStack]) {
                // Edge error event provides the stack and error object
                details = _convertStackObj(errorObj[strError][strStack]);
            }
            else if (errorObj["exception"] && errorObj.exception[strStack]) {
                details = _convertStackObj(errorObj.exception[strStack]);
            }
            else if (_isStackDetails(errorObj)) {
                details = errorObj;
            }
            else if (_isStackDetails(errorObj[strStackDetails])) {
                details = errorObj[strStackDetails];
            }
            else if (window && window["opera"] && errorObj[strMessage]) {
                // Opera
                details = _getOperaStack(errorObj.message);
            }
            else if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(errorObj)) {
                details = _convertStackObj(errorObj);
            }
            else {
                var evtMessage = errorObj[strMessage] || errorObj[strDescription] || "";
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(errorObj[strErrorSrc])) {
                    if (evtMessage) {
                        evtMessage += "\n";
                    }
                    evtMessage += " from " + errorObj[strErrorSrc];
                }
                if (evtMessage) {
                    details = _convertStackObj(evtMessage);
                }
            }
        }
        catch (e) {
            // something unexpected happened so to avoid failing to report any error lets swallow the exception
            // and fallback to the callee/caller method
            details = _convertStackObj(e);
        }
    }
    return details || {
        src: "",
        obj: null
    };
}
function _formatStackTrace(stackDetails) {
    var stack = "";
    if (stackDetails) {
        if (stackDetails.obj) {
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrForEach)(stackDetails.obj, function (entry) {
                stack += entry + "\n";
            });
        }
        else {
            stack = stackDetails.src || "";
        }
    }
    return stack;
}
function _parseStack(stack) {
    var parsedStack;
    var frames = stack.obj;
    if (frames && frames.length > 0) {
        parsedStack = [];
        var level_1 = 0;
        var totalSizeInBytes_1 = 0;
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrForEach)(frames, function (frame) {
            var theFrame = frame.toString();
            if (_StackFrame.regex.test(theFrame)) {
                var parsedFrame = new _StackFrame(theFrame, level_1++);
                totalSizeInBytes_1 += parsedFrame.sizeInBytes;
                parsedStack.push(parsedFrame);
            }
        });
        // DP Constraint - exception parsed stack must be < 32KB
        // remove frames from the middle to meet the threshold
        var exceptionParsedStackThreshold = 32 * 1024;
        if (totalSizeInBytes_1 > exceptionParsedStackThreshold) {
            var left = 0;
            var right = parsedStack.length - 1;
            var size = 0;
            var acceptedLeft = left;
            var acceptedRight = right;
            while (left < right) {
                // check size
                var lSize = parsedStack[left].sizeInBytes;
                var rSize = parsedStack[right].sizeInBytes;
                size += lSize + rSize;
                if (size > exceptionParsedStackThreshold) {
                    // remove extra frames from the middle
                    var howMany = acceptedRight - acceptedLeft + 1;
                    parsedStack.splice(acceptedLeft, howMany);
                    break;
                }
                // update pointers
                acceptedLeft = left;
                acceptedRight = right;
                left++;
                right--;
            }
        }
    }
    return parsedStack;
}
function _getErrorType(errorType) {
    // Gets the Error Type by passing the constructor (used to get the true type of native error object).
    var typeName = "";
    if (errorType) {
        typeName = errorType.typeName || errorType.name || "";
        if (!typeName) {
            try {
                var funcNameRegex = /function (.{1,200})\(/;
                var results = (funcNameRegex).exec((errorType).constructor.toString());
                typeName = (results && results.length > 1) ? results[1] : "";
            }
            catch (e) {
                // eslint-disable-next-line no-empty -- Ignoring any failures as nothing we can do
            }
        }
    }
    return typeName;
}
/**
 * Formats the provided errorObj for display and reporting, it may be a String, Object, integer or undefined depending on the browser.
 * @param errorObj The supplied errorObj
 */
function _formatErrorCode(errorObj) {
    if (errorObj) {
        try {
            if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(errorObj)) {
                var errorType = _getErrorType(errorObj);
                var result = _stringify(errorObj, false);
                if (!result || result === "{}") {
                    if (errorObj[strError]) {
                        // Looks like an MS Error Event
                        errorObj = errorObj[strError];
                        errorType = _getErrorType(errorObj);
                    }
                    result = _stringify(errorObj, true);
                }
                if (result.indexOf(errorType) !== 0 && errorType !== "String") {
                    return errorType + ":" + result;
                }
                return result;
            }
        }
        catch (e) {
            // eslint-disable-next-line no-empty -- Ignoring any failures as nothing we can do
        }
    }
    // Fallback to just letting the object format itself into a string
    return "" + (errorObj || "");
}
var Exception = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__extendsFn)(Exception, _super);
    /**
     * Constructs a new instance of the ExceptionTelemetry object
     */
    function Exception(logger, exception, properties, measurements, severityLevel, id) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: 1 /* Required */,
            exceptions: 1 /* Required */,
            severityLevel: 0 /* Default */,
            properties: 0 /* Default */,
            measurements: 0 /* Default */
        };
        if (!_isExceptionInternal(exception)) {
            if (!properties) {
                properties = {};
            }
            _this.exceptions = [new _ExceptionDetails(logger, exception, properties)];
            _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeProperties)(logger, properties);
            _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeMeasurements)(logger, measurements);
            if (severityLevel) {
                _this.severityLevel = severityLevel;
            }
            if (id) {
                _this.id = id;
            }
        }
        else {
            _this.exceptions = exception.exceptions;
            _this.properties = exception.properties;
            _this.measurements = exception.measurements;
            if (exception.severityLevel) {
                _this.severityLevel = exception.severityLevel;
            }
            if (exception.id) {
                _this.id = exception.id;
            }
            if (exception.problemGroup) {
                _this.problemGroup = exception.problemGroup;
            }
            // bool/int types, use isNullOrUndefined
            _this.ver = 2; // TODO: handle the CS"4.0" ==> breeze 2 conversion in a better way
            if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(exception.isManual)) {
                _this.isManual = exception.isManual;
            }
        }
        return _this;
    }
    Exception.CreateAutoException = function (message, url, lineNumber, columnNumber, error, evt, stack, errorSrc) {
        var errorType = _getErrorType(error || evt || message);
        return {
            message: _formatMessage(message, errorType),
            url: url,
            lineNumber: lineNumber,
            columnNumber: columnNumber,
            error: _formatErrorCode(error || evt || message),
            evt: _formatErrorCode(evt || message),
            typeName: errorType,
            stackDetails: _getStackFromErrorObj(stack || error || evt),
            errorSrc: errorSrc
        };
    };
    Exception.CreateFromInterface = function (logger, exception, properties, measurements) {
        var exceptions = exception.exceptions
            && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrMap)(exception.exceptions, function (ex) { return _ExceptionDetails.CreateFromInterface(logger, ex); });
        var exceptionData = new Exception(logger, (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__assignFn)({}, exception), { exceptions: exceptions }), properties, measurements);
        return exceptionData;
    };
    Exception.prototype.toInterface = function () {
        var _a = this, exceptions = _a.exceptions, properties = _a.properties, measurements = _a.measurements, severityLevel = _a.severityLevel, problemGroup = _a.problemGroup, id = _a.id, isManual = _a.isManual;
        var exceptionDetailsInterface = exceptions instanceof Array
            && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrMap)(exceptions, function (exception) { return exception.toInterface(); })
            || undefined;
        return {
            ver: "4.0",
            exceptions: exceptionDetailsInterface,
            severityLevel: severityLevel,
            properties: properties,
            measurements: measurements,
            problemGroup: problemGroup,
            id: id,
            isManual: isManual
        };
    };
    /**
     * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.
     */
    Exception.CreateSimpleException = function (message, typeName, assembly, fileName, details, line) {
        return {
            exceptions: [
                {
                    hasFullStack: true,
                    message: message,
                    stack: details,
                    typeName: typeName
                }
            ]
        };
    };
    Exception.envelopeType = "Microsoft.ApplicationInsights.{0}.Exception";
    Exception.dataType = "ExceptionData";
    Exception.formatError = _formatErrorCode;
    return Exception;
}(_Interfaces_Contracts_Generated_ExceptionData__WEBPACK_IMPORTED_MODULE_3__.ExceptionData));

var _ExceptionDetails = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__extendsFn)(_ExceptionDetails, _super);
    function _ExceptionDetails(logger, exception, properties) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            id: 0 /* Default */,
            outerId: 0 /* Default */,
            typeName: 1 /* Required */,
            message: 1 /* Required */,
            hasFullStack: 0 /* Default */,
            stack: 0 /* Default */,
            parsedStack: 2 /* Array */
        };
        if (!_isExceptionDetailsInternal(exception)) {
            var error = exception;
            var evt = error && error.evt;
            if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error)) {
                error = error[strError] || evt || error;
            }
            _this.typeName = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, _getErrorType(error)) || _Constants__WEBPACK_IMPORTED_MODULE_4__.strNotSpecified;
            _this.message = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeMessage)(logger, _formatMessage(exception || error, _this.typeName)) || _Constants__WEBPACK_IMPORTED_MODULE_4__.strNotSpecified;
            var stack = exception[strStackDetails] || _getStackFromErrorObj(exception);
            _this.parsedStack = _parseStack(stack);
            _this[strStack] = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeException)(logger, _formatStackTrace(stack));
            _this.hasFullStack = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(_this.parsedStack) && _this.parsedStack.length > 0;
            if (properties) {
                properties.typeName = properties.typeName || _this.typeName;
            }
        }
        else {
            _this.typeName = exception.typeName;
            _this.message = exception.message;
            _this[strStack] = exception[strStack];
            _this.parsedStack = exception.parsedStack;
            _this.hasFullStack = exception.hasFullStack;
        }
        return _this;
    }
    _ExceptionDetails.prototype.toInterface = function () {
        var parsedStack = this.parsedStack instanceof Array
            && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrMap)(this.parsedStack, function (frame) { return frame.toInterface(); });
        var exceptionDetailsInterface = {
            id: this.id,
            outerId: this.outerId,
            typeName: this.typeName,
            message: this.message,
            hasFullStack: this.hasFullStack,
            stack: this[strStack],
            parsedStack: parsedStack || undefined
        };
        return exceptionDetailsInterface;
    };
    _ExceptionDetails.CreateFromInterface = function (logger, exception) {
        var parsedStack = (exception.parsedStack instanceof Array
            && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.arrMap)(exception.parsedStack, function (frame) { return _StackFrame.CreateFromInterface(frame); }))
            || exception.parsedStack;
        var exceptionDetails = new _ExceptionDetails(logger, (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__assignFn)({}, exception), { parsedStack: parsedStack }));
        return exceptionDetails;
    };
    return _ExceptionDetails;
}(_Interfaces_Contracts_Generated_ExceptionDetails__WEBPACK_IMPORTED_MODULE_5__.ExceptionDetails));

var _StackFrame = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.__extendsFn)(_StackFrame, _super);
    function _StackFrame(sourceFrame, level) {
        var _this = _super.call(this) || this;
        _this.sizeInBytes = 0;
        _this.aiDataContract = {
            level: 1 /* Required */,
            method: 1 /* Required */,
            assembly: 0 /* Default */,
            fileName: 0 /* Default */,
            line: 0 /* Default */
        };
        // Not converting this to isString() as typescript uses this logic to "understand" the different
        // types for the 2 different code paths
        if (typeof sourceFrame === "string") {
            var frame = sourceFrame;
            _this.level = level;
            _this.method = NoMethod;
            _this.assembly = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim)(frame);
            _this.fileName = "";
            _this.line = 0;
            var matches = frame.match(_StackFrame.regex);
            if (matches && matches.length >= 5) {
                _this.method = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim)(matches[2]) || _this.method;
                _this.fileName = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.strTrim)(matches[4]);
                _this.line = parseInt(matches[5]) || 0;
            }
        }
        else {
            _this.level = sourceFrame.level;
            _this.method = sourceFrame.method;
            _this.assembly = sourceFrame.assembly;
            _this.fileName = sourceFrame.fileName;
            _this.line = sourceFrame.line;
            _this.sizeInBytes = 0;
        }
        _this.sizeInBytes += _this.method.length;
        _this.sizeInBytes += _this.fileName.length;
        _this.sizeInBytes += _this.assembly.length;
        // todo: these might need to be removed depending on how the back-end settles on their size calculation
        _this.sizeInBytes += _StackFrame.baseSize;
        _this.sizeInBytes += _this.level.toString().length;
        _this.sizeInBytes += _this.line.toString().length;
        return _this;
    }
    _StackFrame.CreateFromInterface = function (frame) {
        return new _StackFrame(frame, null /* level is available in frame interface */);
    };
    _StackFrame.prototype.toInterface = function () {
        return {
            level: this.level,
            method: this.method,
            assembly: this.assembly,
            fileName: this.fileName,
            line: this.line
        };
    };
    // regex to match stack frames from ie/chrome/ff
    // methodName=$2, fileName=$4, lineNo=$5, column=$6
    _StackFrame.regex = /^([\s]+at)?[\s]{0,50}([^\@\()]+?)[\s]{0,50}(\@|\()([^\(\n]+):([0-9]+):([0-9]+)(\)?)$/;
    _StackFrame.baseSize = 58; // '{"method":"","level":,"assembly":"","fileName":"","line":}'.length
    return _StackFrame;
}(_Interfaces_Contracts_Generated_StackFrame__WEBPACK_IMPORTED_MODULE_6__.StackFrame));

//# sourceMappingURL=Exception.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Metric": () => (/* binding */ Metric)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_MetricData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/MetricData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/MetricData.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _Common_DataPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Common/DataPoint */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataPoint.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */







var Metric = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(Metric, _super);
    /**
     * Constructs a new instance of the MetricTelemetry object
     */
    function Metric(logger, name, value, count, min, max, stdDev, properties, measurements) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: 1 /* Required */,
            metrics: 1 /* Required */,
            properties: 0 /* Default */
        };
        var dataPoint = new _Common_DataPoint__WEBPACK_IMPORTED_MODULE_1__.DataPoint();
        dataPoint.count = count > 0 ? count : undefined;
        dataPoint.max = isNaN(max) || max === null ? undefined : max;
        dataPoint.min = isNaN(min) || min === null ? undefined : min;
        dataPoint.name = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, name) || _Constants__WEBPACK_IMPORTED_MODULE_3__.strNotSpecified;
        dataPoint.value = value;
        dataPoint.stdDev = isNaN(stdDev) || stdDev === null ? undefined : stdDev;
        _this.metrics = [dataPoint];
        _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeProperties)(logger, properties);
        _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeMeasurements)(logger, measurements);
        return _this;
    }
    Metric.envelopeType = "Microsoft.ApplicationInsights.{0}.Metric";
    Metric.dataType = "MetricData";
    return Metric;
}(_Interfaces_Contracts_Generated_MetricData__WEBPACK_IMPORTED_MODULE_4__.MetricData));

//# sourceMappingURL=Metric.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageView": () => (/* binding */ PageView)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_PageViewData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/PageViewData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewData.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../HelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */







var PageView = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(PageView, _super);
    /**
     * Constructs a new instance of the PageEventTelemetry object
     */
    function PageView(logger, name, url, durationMs, properties, measurements, id) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: 1 /* Required */,
            name: 0 /* Default */,
            url: 0 /* Default */,
            duration: 0 /* Default */,
            properties: 0 /* Default */,
            measurements: 0 /* Default */,
            id: 0 /* Default */
        };
        _this.id = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeId)(logger, id);
        _this.url = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeUrl)(logger, url);
        _this.name = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeString)(logger, name) || _Constants__WEBPACK_IMPORTED_MODULE_2__.strNotSpecified;
        if (!isNaN(durationMs)) {
            _this.duration = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_3__.msToTimeSpan)(durationMs);
        }
        _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeProperties)(logger, properties);
        _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeMeasurements)(logger, measurements);
        return _this;
    }
    PageView.envelopeType = "Microsoft.ApplicationInsights.{0}.Pageview";
    PageView.dataType = "PageviewData";
    return PageView;
}(_Interfaces_Contracts_Generated_PageViewData__WEBPACK_IMPORTED_MODULE_4__.PageViewData));

//# sourceMappingURL=PageView.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageViewPerformance": () => (/* binding */ PageViewPerformance)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_PageViewPerfData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/PageViewPerfData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewPerfData.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */






var PageViewPerformance = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(PageViewPerformance, _super);
    /**
     * Constructs a new instance of the PageEventTelemetry object
     */
    function PageViewPerformance(logger, name, url, unused, properties, measurements, cs4BaseData) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: 1 /* Required */,
            name: 0 /* Default */,
            url: 0 /* Default */,
            duration: 0 /* Default */,
            perfTotal: 0 /* Default */,
            networkConnect: 0 /* Default */,
            sentRequest: 0 /* Default */,
            receivedResponse: 0 /* Default */,
            domProcessing: 0 /* Default */,
            properties: 0 /* Default */,
            measurements: 0 /* Default */
        };
        _this.url = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeUrl)(logger, url);
        _this.name = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeString)(logger, name) || _Constants__WEBPACK_IMPORTED_MODULE_2__.strNotSpecified;
        _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeProperties)(logger, properties);
        _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_1__.dataSanitizeMeasurements)(logger, measurements);
        if (cs4BaseData) {
            _this.domProcessing = cs4BaseData.domProcessing;
            _this.duration = cs4BaseData.duration;
            _this.networkConnect = cs4BaseData.networkConnect;
            _this.perfTotal = cs4BaseData.perfTotal;
            _this.receivedResponse = cs4BaseData.receivedResponse;
            _this.sentRequest = cs4BaseData.sentRequest;
        }
        return _this;
    }
    PageViewPerformance.envelopeType = "Microsoft.ApplicationInsights.{0}.PageviewPerformance";
    PageViewPerformance.dataType = "PageviewPerformanceData";
    return PageViewPerformance;
}(_Interfaces_Contracts_Generated_PageViewPerfData__WEBPACK_IMPORTED_MODULE_3__.PageViewPerfData));

//# sourceMappingURL=PageViewPerformance.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RemoteDependencyData": () => (/* binding */ RemoteDependencyData)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Util */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _Interfaces_Contracts_Generated_RemoteDependencyData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/RemoteDependencyData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/RemoteDependencyData.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../HelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */







var RemoteDependencyData = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(RemoteDependencyData, _super);
    /**
     * Constructs a new instance of the RemoteDependencyData object
     */
    function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, correlationContext, properties, measurements) {
        if (requestAPI === void 0) { requestAPI = "Ajax"; }
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            id: 1 /* Required */,
            ver: 1 /* Required */,
            name: 0 /* Default */,
            resultCode: 0 /* Default */,
            duration: 0 /* Default */,
            success: 0 /* Default */,
            data: 0 /* Default */,
            target: 0 /* Default */,
            type: 0 /* Default */,
            properties: 0 /* Default */,
            measurements: 0 /* Default */,
            kind: 0 /* Default */,
            value: 0 /* Default */,
            count: 0 /* Default */,
            min: 0 /* Default */,
            max: 0 /* Default */,
            stdDev: 0 /* Default */,
            dependencyKind: 0 /* Default */,
            dependencySource: 0 /* Default */,
            commandName: 0 /* Default */,
            dependencyTypeName: 0 /* Default */
        };
        _this.id = id;
        _this.duration = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.msToTimeSpan)(value);
        _this.success = success;
        _this.resultCode = resultCode + "";
        _this.type = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, requestAPI);
        var dependencyFields = (0,_Util__WEBPACK_IMPORTED_MODULE_3__.AjaxHelperParseDependencyPath)(logger, absoluteUrl, method, commandName);
        _this.data = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeUrl)(logger, commandName) || dependencyFields.data; // get a value from hosturl if commandName not available
        _this.target = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, dependencyFields.target);
        if (correlationContext) {
            _this.target = "".concat(_this.target, " | ").concat(correlationContext);
        }
        _this.name = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, dependencyFields.name);
        _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeProperties)(logger, properties);
        _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeMeasurements)(logger, measurements);
        return _this;
    }
    RemoteDependencyData.envelopeType = "Microsoft.ApplicationInsights.{0}.RemoteDependency";
    RemoteDependencyData.dataType = "RemoteDependencyData";
    return RemoteDependencyData;
}(_Interfaces_Contracts_Generated_RemoteDependencyData__WEBPACK_IMPORTED_MODULE_4__.RemoteDependencyData));

//# sourceMappingURL=RemoteDependencyData.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Trace": () => (/* binding */ Trace)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _Interfaces_Contracts_Generated_MessageData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Interfaces/Contracts/Generated/MessageData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/MessageData.js");
/* harmony import */ var _Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */






var Trace = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(Trace, _super);
    /**
     * Constructs a new instance of the TraceTelemetry object
     */
    function Trace(logger, message, severityLevel, properties, measurements) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: 1 /* Required */,
            message: 1 /* Required */,
            severityLevel: 0 /* Default */,
            properties: 0 /* Default */
        };
        message = message || _Constants__WEBPACK_IMPORTED_MODULE_1__.strNotSpecified;
        _this.message = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeMessage)(logger, message);
        _this.properties = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeProperties)(logger, properties);
        _this.measurements = (0,_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeMeasurements)(logger, measurements);
        if (severityLevel) {
            _this.severityLevel = severityLevel;
        }
        return _this;
    }
    Trace.envelopeType = "Microsoft.ApplicationInsights.{0}.Message";
    Trace.dataType = "MessageData";
    return Trace;
}(_Interfaces_Contracts_Generated_MessageData__WEBPACK_IMPORTED_MODULE_3__.MessageData));

//# sourceMappingURL=Trace.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/UrlHelperFuncs.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/UrlHelperFuncs.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "urlGetAbsoluteUrl": () => (/* binding */ urlGetAbsoluteUrl),
/* harmony export */   "urlGetCompleteUrl": () => (/* binding */ urlGetCompleteUrl),
/* harmony export */   "urlGetPathName": () => (/* binding */ urlGetPathName),
/* harmony export */   "urlParseFullHost": () => (/* binding */ urlParseFullHost),
/* harmony export */   "urlParseHost": () => (/* binding */ urlParseHost),
/* harmony export */   "urlParseUrl": () => (/* binding */ urlParseUrl)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



var _document = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)() || {};
var _htmlAnchorIdx = 0;
// Use an array of temporary values as it's possible for multiple calls to parseUrl() will be called with different URLs
// Using a cache size of 5 for now as it current depth usage is at least 2, so adding a minor buffer to handle future updates
var _htmlAnchorElement = [null, null, null, null, null];
function urlParseUrl(url) {
    var anchorIdx = _htmlAnchorIdx;
    var anchorCache = _htmlAnchorElement;
    var tempAnchor = anchorCache[anchorIdx];
    if (!_document.createElement) {
        // Always create the temp instance if createElement is not available
        tempAnchor = { host: urlParseHost(url, true) };
    }
    else if (!anchorCache[anchorIdx]) {
        // Create and cache the unattached anchor instance
        tempAnchor = anchorCache[anchorIdx] = _document.createElement("a");
    }
    tempAnchor.href = url;
    // Move the cache index forward
    anchorIdx++;
    if (anchorIdx >= anchorCache.length) {
        anchorIdx = 0;
    }
    _htmlAnchorIdx = anchorIdx;
    return tempAnchor;
}
function urlGetAbsoluteUrl(url) {
    var result;
    var a = urlParseUrl(url);
    if (a) {
        result = a.href;
    }
    return result;
}
function urlGetPathName(url) {
    var result;
    var a = urlParseUrl(url);
    if (a) {
        result = a.pathname;
    }
    return result;
}
function urlGetCompleteUrl(method, absoluteUrl) {
    if (method) {
        return method.toUpperCase() + " " + absoluteUrl;
    }
    return absoluteUrl;
}
// Fallback method to grab host from url if document.createElement method is not available
function urlParseHost(url, inclPort) {
    var fullHost = urlParseFullHost(url, inclPort) || "";
    if (fullHost) {
        var match = fullHost.match(/(www[0-9]?\.)?(.[^/:]+)(\:[\d]+)?/i);
        if (match != null && match.length > 3 && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isString)(match[2]) && match[2].length > 0) {
            return match[2] + (match[3] || "");
        }
    }
    return fullHost;
}
function urlParseFullHost(url, inclPort) {
    var result = null;
    if (url) {
        var match = url.match(/(\w*):\/\/(.[^/:]+)(\:[\d]+)?/i);
        if (match != null && match.length > 2 && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isString)(match[2]) && match[2].length > 0) {
            result = match[2] || "";
            if (inclPort && match.length > 2) {
                var protocol = (match[1] || "").toLowerCase();
                var port = match[3] || "";
                // IE includes the standard port so pass it off if it's the same as the protocol
                if (protocol === "http" && port === ":80") {
                    port = "";
                }
                else if (protocol === "https" && port === ":443") {
                    port = "";
                }
                result += port;
            }
        }
    }
    return result;
}
//# sourceMappingURL=UrlHelperFuncs.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AjaxHelperParseDependencyPath": () => (/* binding */ AjaxHelperParseDependencyPath),
/* harmony export */   "CorrelationIdHelper": () => (/* binding */ CorrelationIdHelper),
/* harmony export */   "DateTimeUtils": () => (/* binding */ DateTimeUtils),
/* harmony export */   "UrlHelper": () => (/* binding */ UrlHelper),
/* harmony export */   "Util": () => (/* binding */ Util),
/* harmony export */   "dateTimeUtilsDuration": () => (/* binding */ dateTimeUtilsDuration),
/* harmony export */   "dateTimeUtilsNow": () => (/* binding */ dateTimeUtilsNow),
/* harmony export */   "isInternalApplicationInsightsEndpoint": () => (/* binding */ isInternalApplicationInsightsEndpoint)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _RequestResponseHeaders__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./RequestResponseHeaders */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js");
/* harmony import */ var _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Telemetry/Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _DomHelperFuncs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DomHelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/DomHelperFuncs.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StorageHelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./UrlHelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/UrlHelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */










// listing only non-geo specific locations
var _internalEndpoints = [
    "https://dc.services.visualstudio.com/v2/track",
    "https://breeze.aimon.applicationinsights.io/v2/track",
    "https://dc-int.services.visualstudio.com/v2/track"
];
function isInternalApplicationInsightsEndpoint(endpointUrl) {
    return _internalEndpoints.indexOf(endpointUrl.toLowerCase()) !== -1;
}
var Util = {
    NotSpecified: _Constants__WEBPACK_IMPORTED_MODULE_0__.strNotSpecified,
    createDomEvent: _DomHelperFuncs__WEBPACK_IMPORTED_MODULE_1__.createDomEvent,
    disableStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlDisableStorage,
    isInternalApplicationInsightsEndpoint: isInternalApplicationInsightsEndpoint,
    canUseLocalStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlCanUseLocalStorage,
    getStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlGetLocalStorage,
    setStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlSetLocalStorage,
    removeStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlRemoveStorage,
    canUseSessionStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlCanUseSessionStorage,
    getSessionStorageKeys: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlGetSessionStorageKeys,
    getSessionStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlGetSessionStorage,
    setSessionStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlSetSessionStorage,
    removeSessionStorage: _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_2__.utlRemoveSessionStorage,
    disableCookies: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.disableCookies,
    canUseCookies: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.canUseCookies,
    disallowsSameSiteNone: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.uaDisallowsSameSiteNone,
    setCookie: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.setCookie,
    stringToBoolOrDefault: _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.stringToBoolOrDefault,
    getCookie: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getCookie,
    deleteCookie: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.deleteCookie,
    trim: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.strTrim,
    newId: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.newId,
    random32: function () {
        return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.random32)(true);
    },
    generateW3CId: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.generateW3CId,
    isArray: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.isArray,
    isError: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.isError,
    isDate: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.isDate,
    toISOStringForIE8: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.toISOString,
    getIEVersion: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__.getIEVersion,
    msToTimeSpan: _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.msToTimeSpan,
    isCrossOriginError: _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isCrossOriginError,
    dump: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__.dumpObj,
    getExceptionName: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.getExceptionName,
    addEventHandler: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.attachEvent,
    IsBeaconApiSupported: _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__.isBeaconsSupported,
    getExtension: _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.getExtensionByName
};
var UrlHelper = {
    parseUrl: _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlParseUrl,
    getAbsoluteUrl: _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlGetAbsoluteUrl,
    getPathName: _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlGetPathName,
    getCompleteUrl: _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlGetCompleteUrl,
    parseHost: _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlParseHost,
    parseFullHost: _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlParseFullHost
};
var CorrelationIdHelper = {
    correlationIdPrefix: "cid-v1:",
    /**
     * Checks if a request url is not on a excluded domain list and if it is safe to add correlation headers.
     * Headers are always included if the current domain matches the request domain. If they do not match (CORS),
     * they are regex-ed across correlationHeaderDomains and correlationHeaderExcludedDomains to determine if headers are included.
     * Some environments don't give information on currentHost via window.location.host (e.g. Cordova). In these cases, the user must
     * manually supply domains to include correlation headers on. Else, no headers will be included at all.
     */
    canIncludeCorrelationHeader: function (config, requestUrl, currentHost) {
        if (!requestUrl || (config && config.disableCorrelationHeaders)) {
            return false;
        }
        if (config && config.correlationHeaderExcludePatterns) {
            for (var i = 0; i < config.correlationHeaderExcludePatterns.length; i++) {
                if (config.correlationHeaderExcludePatterns[i].test(requestUrl)) {
                    return false;
                }
            }
        }
        var requestHost = (0,_UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlParseUrl)(requestUrl).host.toLowerCase();
        if (requestHost && (requestHost.indexOf(":443") !== -1 || requestHost.indexOf(":80") !== -1)) {
            // [Bug #1260] IE can include the port even for http and https URLs so if present
            // try and parse it to remove if it matches the default protocol port
            requestHost = ((0,_UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlParseFullHost)(requestUrl, true) || "").toLowerCase();
        }
        if ((!config || !config.enableCorsCorrelation) && (requestHost && requestHost !== currentHost)) {
            return false;
        }
        var includedDomains = config && config.correlationHeaderDomains;
        if (includedDomains) {
            var matchExists_1;
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.arrForEach)(includedDomains, function (domain) {
                var regex = new RegExp(domain.toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
                matchExists_1 = matchExists_1 || regex.test(requestHost);
            });
            if (!matchExists_1) {
                return false;
            }
        }
        var excludedDomains = config && config.correlationHeaderExcludedDomains;
        if (!excludedDomains || excludedDomains.length === 0) {
            return true;
        }
        for (var i = 0; i < excludedDomains.length; i++) {
            var regex = new RegExp(excludedDomains[i].toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
            if (regex.test(requestHost)) {
                return false;
            }
        }
        // if we don't know anything about the requestHost, require the user to use included/excludedDomains.
        // Previously we always returned false for a falsy requestHost
        return requestHost && requestHost.length > 0;
    },
    /**
     * Combines target appId and target role name from response header.
     */
    getCorrelationContext: function (responseHeader) {
        if (responseHeader) {
            var correlationId = CorrelationIdHelper.getCorrelationContextValue(responseHeader, _RequestResponseHeaders__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextTargetKey);
            if (correlationId && correlationId !== CorrelationIdHelper.correlationIdPrefix) {
                return correlationId;
            }
        }
    },
    /**
     * Gets key from correlation response header
     */
    getCorrelationContextValue: function (responseHeader, key) {
        if (responseHeader) {
            var keyValues = responseHeader.split(",");
            for (var i = 0; i < keyValues.length; ++i) {
                var keyValue = keyValues[i].split("=");
                if (keyValue.length === 2 && keyValue[0] === key) {
                    return keyValue[1];
                }
            }
        }
    }
};
function AjaxHelperParseDependencyPath(logger, absoluteUrl, method, commandName) {
    var target, name = commandName, data = commandName;
    if (absoluteUrl && absoluteUrl.length > 0) {
        var parsedUrl = (0,_UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_9__.urlParseUrl)(absoluteUrl);
        target = parsedUrl.host;
        if (!name) {
            if (parsedUrl.pathname != null) {
                var pathName = (parsedUrl.pathname.length === 0) ? "/" : parsedUrl.pathname;
                if (pathName.charAt(0) !== "/") {
                    pathName = "/" + pathName;
                }
                data = parsedUrl.pathname;
                name = (0,_Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_11__.dataSanitizeString)(logger, method ? method + " " + pathName : pathName);
            }
            else {
                name = (0,_Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_11__.dataSanitizeString)(logger, absoluteUrl);
            }
        }
    }
    else {
        target = commandName;
        name = commandName;
    }
    return {
        target: target,
        name: name,
        data: data
    };
}
function dateTimeUtilsNow() {
    // returns the window or webworker performance object
    var perf = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__.getPerformance)();
    if (perf && perf.now && perf.timing) {
        var now = perf.now() + perf.timing.navigationStart;
        // Known issue with IE where this calculation can be negative, so if it is then ignore and fallback
        if (now > 0) {
            return now;
        }
    }
    return (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.dateNow)();
}
function dateTimeUtilsDuration(start, end) {
    var result = null;
    if (start !== 0 && end !== 0 && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.isNullOrUndefined)(start) && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.isNullOrUndefined)(end)) {
        result = end - start;
    }
    return result;
}
/**
 * A utility class that helps getting time related parameters
 */
var DateTimeUtils = {
    Now: dateTimeUtilsNow,
    GetDuration: dateTimeUtilsDuration
};
//# sourceMappingURL=Util.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AIBase": () => (/* reexport safe */ _Interfaces_Contracts_Generated_Base__WEBPACK_IMPORTED_MODULE_5__.Base),
/* harmony export */   "AIData": () => (/* reexport safe */ _Interfaces_Contracts_Generated_Data__WEBPACK_IMPORTED_MODULE_4__.Data),
/* harmony export */   "AnalyticsPluginIdentifier": () => (/* binding */ AnalyticsPluginIdentifier),
/* harmony export */   "BreezeChannelIdentifier": () => (/* binding */ BreezeChannelIdentifier),
/* harmony export */   "ConfigurationManager": () => (/* reexport safe */ _Interfaces_IConfig__WEBPACK_IMPORTED_MODULE_17__.ConfigurationManager),
/* harmony export */   "ConnectionStringParser": () => (/* reexport safe */ _ConnectionStringParser__WEBPACK_IMPORTED_MODULE_1__.ConnectionStringParser),
/* harmony export */   "ContextTagKeys": () => (/* reexport safe */ _Interfaces_Contracts_Generated_ContextTagKeys__WEBPACK_IMPORTED_MODULE_18__.ContextTagKeys),
/* harmony export */   "CorrelationIdHelper": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.CorrelationIdHelper),
/* harmony export */   "CtxTagKeys": () => (/* reexport safe */ _Interfaces_PartAExtensions__WEBPACK_IMPORTED_MODULE_21__.CtxTagKeys),
/* harmony export */   "DEFAULT_BREEZE_ENDPOINT": () => (/* reexport safe */ _Constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_BREEZE_ENDPOINT),
/* harmony export */   "Data": () => (/* reexport safe */ _Telemetry_Common_Data__WEBPACK_IMPORTED_MODULE_15__.Data),
/* harmony export */   "DataSanitizer": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.DataSanitizer),
/* harmony export */   "DateTimeUtils": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.DateTimeUtils),
/* harmony export */   "DisabledPropertyName": () => (/* reexport safe */ _Constants__WEBPACK_IMPORTED_MODULE_3__.DisabledPropertyName),
/* harmony export */   "DistributedTracingModes": () => (/* reexport safe */ _Enums__WEBPACK_IMPORTED_MODULE_22__.DistributedTracingModes),
/* harmony export */   "Envelope": () => (/* reexport safe */ _Telemetry_Common_Envelope__WEBPACK_IMPORTED_MODULE_6__.Envelope),
/* harmony export */   "Event": () => (/* reexport safe */ _Telemetry_Event__WEBPACK_IMPORTED_MODULE_7__.Event),
/* harmony export */   "Exception": () => (/* reexport safe */ _Telemetry_Exception__WEBPACK_IMPORTED_MODULE_8__.Exception),
/* harmony export */   "Extensions": () => (/* reexport safe */ _Interfaces_PartAExtensions__WEBPACK_IMPORTED_MODULE_21__.Extensions),
/* harmony export */   "HttpMethod": () => (/* reexport safe */ _Constants__WEBPACK_IMPORTED_MODULE_3__.HttpMethod),
/* harmony export */   "Metric": () => (/* reexport safe */ _Telemetry_Metric__WEBPACK_IMPORTED_MODULE_9__.Metric),
/* harmony export */   "PageView": () => (/* reexport safe */ _Telemetry_PageView__WEBPACK_IMPORTED_MODULE_10__.PageView),
/* harmony export */   "PageViewData": () => (/* reexport safe */ _Interfaces_Contracts_Generated_PageViewData__WEBPACK_IMPORTED_MODULE_11__.PageViewData),
/* harmony export */   "PageViewPerformance": () => (/* reexport safe */ _Telemetry_PageViewPerformance__WEBPACK_IMPORTED_MODULE_14__.PageViewPerformance),
/* harmony export */   "ProcessLegacy": () => (/* reexport safe */ _Constants__WEBPACK_IMPORTED_MODULE_3__.ProcessLegacy),
/* harmony export */   "PropertiesPluginIdentifier": () => (/* binding */ PropertiesPluginIdentifier),
/* harmony export */   "RemoteDependencyData": () => (/* reexport safe */ _Telemetry_RemoteDependencyData__WEBPACK_IMPORTED_MODULE_12__.RemoteDependencyData),
/* harmony export */   "RequestHeaders": () => (/* reexport safe */ _RequestResponseHeaders__WEBPACK_IMPORTED_MODULE_2__.RequestHeaders),
/* harmony export */   "SampleRate": () => (/* reexport safe */ _Constants__WEBPACK_IMPORTED_MODULE_3__.SampleRate),
/* harmony export */   "SeverityLevel": () => (/* reexport safe */ _Interfaces_Contracts_Generated_SeverityLevel__WEBPACK_IMPORTED_MODULE_16__.SeverityLevel),
/* harmony export */   "TelemetryItemCreator": () => (/* reexport safe */ _TelemetryItemCreator__WEBPACK_IMPORTED_MODULE_20__.TelemetryItemCreator),
/* harmony export */   "Trace": () => (/* reexport safe */ _Telemetry_Trace__WEBPACK_IMPORTED_MODULE_13__.Trace),
/* harmony export */   "UrlHelper": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.UrlHelper),
/* harmony export */   "Util": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.Util),
/* harmony export */   "createDomEvent": () => (/* reexport safe */ _DomHelperFuncs__WEBPACK_IMPORTED_MODULE_25__.createDomEvent),
/* harmony export */   "dataSanitizeException": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeException),
/* harmony export */   "dataSanitizeId": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeId),
/* harmony export */   "dataSanitizeInput": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeInput),
/* harmony export */   "dataSanitizeKey": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeKey),
/* harmony export */   "dataSanitizeKeyAndAddUniqueness": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeKeyAndAddUniqueness),
/* harmony export */   "dataSanitizeMeasurements": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeMeasurements),
/* harmony export */   "dataSanitizeMessage": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeMessage),
/* harmony export */   "dataSanitizeProperties": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeProperties),
/* harmony export */   "dataSanitizeString": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeString),
/* harmony export */   "dataSanitizeUrl": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dataSanitizeUrl),
/* harmony export */   "dateTimeUtilsDuration": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration),
/* harmony export */   "dateTimeUtilsNow": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsNow),
/* harmony export */   "dsPadNumber": () => (/* reexport safe */ _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__.dsPadNumber),
/* harmony export */   "getExtensionByName": () => (/* reexport safe */ _HelperFuncs__WEBPACK_IMPORTED_MODULE_23__.getExtensionByName),
/* harmony export */   "isBeaconApiSupported": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_24__.isBeaconsSupported),
/* harmony export */   "isCrossOriginError": () => (/* reexport safe */ _HelperFuncs__WEBPACK_IMPORTED_MODULE_23__.isCrossOriginError),
/* harmony export */   "isInternalApplicationInsightsEndpoint": () => (/* reexport safe */ _Util__WEBPACK_IMPORTED_MODULE_0__.isInternalApplicationInsightsEndpoint),
/* harmony export */   "msToTimeSpan": () => (/* reexport safe */ _HelperFuncs__WEBPACK_IMPORTED_MODULE_23__.msToTimeSpan),
/* harmony export */   "parseConnectionString": () => (/* reexport safe */ _ConnectionStringParser__WEBPACK_IMPORTED_MODULE_1__.parseConnectionString),
/* harmony export */   "strNotSpecified": () => (/* reexport safe */ _Constants__WEBPACK_IMPORTED_MODULE_3__.strNotSpecified),
/* harmony export */   "stringToBoolOrDefault": () => (/* reexport safe */ _HelperFuncs__WEBPACK_IMPORTED_MODULE_23__.stringToBoolOrDefault),
/* harmony export */   "urlGetAbsoluteUrl": () => (/* reexport safe */ _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__.urlGetAbsoluteUrl),
/* harmony export */   "urlGetCompleteUrl": () => (/* reexport safe */ _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__.urlGetCompleteUrl),
/* harmony export */   "urlGetPathName": () => (/* reexport safe */ _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__.urlGetPathName),
/* harmony export */   "urlParseFullHost": () => (/* reexport safe */ _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__.urlParseFullHost),
/* harmony export */   "urlParseHost": () => (/* reexport safe */ _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__.urlParseHost),
/* harmony export */   "urlParseUrl": () => (/* reexport safe */ _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__.urlParseUrl),
/* harmony export */   "utlCanUseLocalStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlCanUseLocalStorage),
/* harmony export */   "utlCanUseSessionStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlCanUseSessionStorage),
/* harmony export */   "utlDisableStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlDisableStorage),
/* harmony export */   "utlGetLocalStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlGetLocalStorage),
/* harmony export */   "utlGetSessionStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlGetSessionStorage),
/* harmony export */   "utlGetSessionStorageKeys": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlGetSessionStorageKeys),
/* harmony export */   "utlRemoveSessionStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlRemoveSessionStorage),
/* harmony export */   "utlRemoveStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlRemoveStorage),
/* harmony export */   "utlSetLocalStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlSetLocalStorage),
/* harmony export */   "utlSetSessionStorage": () => (/* reexport safe */ _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__.utlSetSessionStorage)
/* harmony export */ });
/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Util */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _ConnectionStringParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionStringParser */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/ConnectionStringParser.js");
/* harmony import */ var _RequestResponseHeaders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RequestResponseHeaders */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _Interfaces_Contracts_Generated_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Interfaces/Contracts/Generated/Data */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Data.js");
/* harmony import */ var _Interfaces_Contracts_Generated_Base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Interfaces/Contracts/Generated/Base */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Base.js");
/* harmony import */ var _Telemetry_Common_Envelope__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Telemetry/Common/Envelope */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Envelope.js");
/* harmony import */ var _Telemetry_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Telemetry/Event */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js");
/* harmony import */ var _Telemetry_Exception__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Telemetry/Exception */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js");
/* harmony import */ var _Telemetry_Metric__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Telemetry/Metric */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _Telemetry_PageView__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Telemetry/PageView */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _Interfaces_Contracts_Generated_PageViewData__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Interfaces/Contracts/Generated/PageViewData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewData.js");
/* harmony import */ var _Telemetry_RemoteDependencyData__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Telemetry/RemoteDependencyData */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _Telemetry_Trace__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Telemetry/Trace */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js");
/* harmony import */ var _Telemetry_PageViewPerformance__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Telemetry/PageViewPerformance */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js");
/* harmony import */ var _Telemetry_Common_Data__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Telemetry/Common/Data */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Data.js");
/* harmony import */ var _Interfaces_Contracts_Generated_SeverityLevel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Interfaces/Contracts/Generated/SeverityLevel */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js");
/* harmony import */ var _Interfaces_IConfig__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Interfaces/IConfig */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/IConfig.js");
/* harmony import */ var _Interfaces_Contracts_Generated_ContextTagKeys__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Interfaces/Contracts/Generated/ContextTagKeys */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js");
/* harmony import */ var _Telemetry_Common_DataSanitizer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Telemetry/Common/DataSanitizer */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _TelemetryItemCreator__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./TelemetryItemCreator */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/TelemetryItemCreator.js");
/* harmony import */ var _Interfaces_PartAExtensions__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Interfaces/PartAExtensions */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/PartAExtensions.js");
/* harmony import */ var _Enums__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./Enums */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _DomHelperFuncs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./DomHelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/DomHelperFuncs.js");
/* harmony import */ var _StorageHelperFuncs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./StorageHelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _UrlHelperFuncs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./UrlHelperFuncs */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/UrlHelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Common, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */

// Licensed under the




























var PropertiesPluginIdentifier = "AppInsightsPropertiesPlugin";
var BreezeChannelIdentifier = "AppInsightsChannelPlugin";
var AnalyticsPluginIdentifier = "ApplicationInsightsAnalytics";
//# sourceMappingURL=applicationinsights-common.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventsDiscardedReason": () => (/* binding */ EventsDiscardedReason)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.
 */
var EventsDiscardedReason = {
    /**
     * Unknown.
     */
    Unknown: 0,
    /**
     * Status set to non-retryable.
     */
    NonRetryableStatus: 1,
    /**
     * The event is invalid.
     */
    InvalidEvent: 2,
    /**
     * The size of the event is too large.
     */
    SizeLimitExceeded: 3,
    /**
     * The server is not accepting events from this instrumentation key.
     */
    KillSwitch: 4,
    /**
     * The event queue is full.
     */
    QueueFull: 5
};
//# sourceMappingURL=EventsDiscardedReason.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoggingSeverity": () => (/* binding */ LoggingSeverity),
/* harmony export */   "_InternalMessageId": () => (/* binding */ _InternalMessageId)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var LoggingSeverity;
(function (LoggingSeverity) {
    /**
     * Error will be sent as internal telemetry
     */
    LoggingSeverity[LoggingSeverity["CRITICAL"] = 1] = "CRITICAL";
    /**
     * Error will NOT be sent as internal telemetry, and will only be shown in browser console
     */
    LoggingSeverity[LoggingSeverity["WARNING"] = 2] = "WARNING";
})(LoggingSeverity || (LoggingSeverity = {}));
/**
 * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered
 */
var _InternalMessageId = {
    // Non user actionable
    BrowserDoesNotSupportLocalStorage: 0,
    BrowserCannotReadLocalStorage: 1,
    BrowserCannotReadSessionStorage: 2,
    BrowserCannotWriteLocalStorage: 3,
    BrowserCannotWriteSessionStorage: 4,
    BrowserFailedRemovalFromLocalStorage: 5,
    BrowserFailedRemovalFromSessionStorage: 6,
    CannotSendEmptyTelemetry: 7,
    ClientPerformanceMathError: 8,
    ErrorParsingAISessionCookie: 9,
    ErrorPVCalc: 10,
    ExceptionWhileLoggingError: 11,
    FailedAddingTelemetryToBuffer: 12,
    FailedMonitorAjaxAbort: 13,
    FailedMonitorAjaxDur: 14,
    FailedMonitorAjaxOpen: 15,
    FailedMonitorAjaxRSC: 16,
    FailedMonitorAjaxSend: 17,
    FailedMonitorAjaxGetCorrelationHeader: 18,
    FailedToAddHandlerForOnBeforeUnload: 19,
    FailedToSendQueuedTelemetry: 20,
    FailedToReportDataLoss: 21,
    FlushFailed: 22,
    MessageLimitPerPVExceeded: 23,
    MissingRequiredFieldSpecification: 24,
    NavigationTimingNotSupported: 25,
    OnError: 26,
    SessionRenewalDateIsZero: 27,
    SenderNotInitialized: 28,
    StartTrackEventFailed: 29,
    StopTrackEventFailed: 30,
    StartTrackFailed: 31,
    StopTrackFailed: 32,
    TelemetrySampledAndNotSent: 33,
    TrackEventFailed: 34,
    TrackExceptionFailed: 35,
    TrackMetricFailed: 36,
    TrackPVFailed: 37,
    TrackPVFailedCalc: 38,
    TrackTraceFailed: 39,
    TransmissionFailed: 40,
    FailedToSetStorageBuffer: 41,
    FailedToRestoreStorageBuffer: 42,
    InvalidBackendResponse: 43,
    FailedToFixDepricatedValues: 44,
    InvalidDurationValue: 45,
    TelemetryEnvelopeInvalid: 46,
    CreateEnvelopeError: 47,
    // User actionable
    CannotSerializeObject: 48,
    CannotSerializeObjectNonSerializable: 49,
    CircularReferenceDetected: 50,
    ClearAuthContextFailed: 51,
    ExceptionTruncated: 52,
    IllegalCharsInName: 53,
    ItemNotInArray: 54,
    MaxAjaxPerPVExceeded: 55,
    MessageTruncated: 56,
    NameTooLong: 57,
    SampleRateOutOfRange: 58,
    SetAuthContextFailed: 59,
    SetAuthContextFailedAccountName: 60,
    StringValueTooLong: 61,
    StartCalledMoreThanOnce: 62,
    StopCalledWithoutStart: 63,
    TelemetryInitializerFailed: 64,
    TrackArgumentsNotSpecified: 65,
    UrlTooLong: 66,
    SessionStorageBufferFull: 67,
    CannotAccessCookie: 68,
    IdTooLong: 69,
    InvalidEvent: 70,
    FailedMonitorAjaxSetRequestHeader: 71,
    SendBrowserInfoOnUserInit: 72,
    PluginException: 73,
    NotificationException: 74,
    SnippetScriptLoadFailure: 99,
    InvalidInstrumentationKey: 100,
    CannotParseAiBlobValue: 101,
    InvalidContentBlob: 102,
    TrackPageActionEventFailed: 103,
    FailedAddingCustomDefinedRequestContext: 104,
    InMemoryStorageBufferFull: 105
};
//# sourceMappingURL=LoggingEnums.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppInsightsCore": () => (/* binding */ AppInsightsCore)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _BaseCore__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BaseCore */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js");
/* harmony import */ var _JavaScriptSDK_Enums_EventsDiscardedReason__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../JavaScriptSDK.Enums/EventsDiscardedReason */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js");
/* harmony import */ var _NotificationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NotificationManager */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js");
/* harmony import */ var _PerfManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PerfManager */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js");
/* harmony import */ var _DiagnosticLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DiagnosticLogger */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */








"use strict";
var AppInsightsCore = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(AppInsightsCore, _super);
    function AppInsightsCore() {
        var _this = _super.call(this) || this;
        /**
         * Internal log poller
         */
        var _internalLogPoller = 0;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__["default"])(AppInsightsCore, _this, function (_self, _base) {
            _self.initialize = function (config, extensions, logger, notificationManager) {
                _base.initialize(config, extensions, logger || new _DiagnosticLogger__WEBPACK_IMPORTED_MODULE_2__.DiagnosticLogger(config), notificationManager || new _NotificationManager__WEBPACK_IMPORTED_MODULE_3__.NotificationManager(config));
            };
            _self.track = function (telemetryItem) {
                (0,_PerfManager__WEBPACK_IMPORTED_MODULE_4__.doPerf)(_self.getPerfMgr(), function () { return "AppInsightsCore:track"; }, function () {
                    if (telemetryItem === null) {
                        _notifyInvalidEvent(telemetryItem);
                        // throw error
                        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.throwError)("Invalid telemetry item");
                    }
                    // do basic validation before sending it through the pipeline
                    _validateTelemetryItem(telemetryItem);
                    _base.track(telemetryItem);
                }, function () { return ({ item: telemetryItem }); }, !(telemetryItem.sync));
            };
            /**
             * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.
             * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be
             * called.
             * @param {INotificationListener} listener - An INotificationListener object.
             */
            _self.addNotificationListener = function (listener) {
                var manager = _self.getNotifyMgr();
                if (manager) {
                    manager.addNotificationListener(listener);
                }
            };
            /**
             * Removes all instances of the listener.
             * @param {INotificationListener} listener - INotificationListener to remove.
             */
            _self.removeNotificationListener = function (listener) {
                var manager = _self.getNotifyMgr();
                if (manager) {
                    manager.removeNotificationListener(listener);
                }
            };
            /**
             * Periodically check logger.queue for log messages to be flushed
             */
            _self.pollInternalLogs = function (eventName) {
                var interval = _self.config.diagnosticLogInterval;
                if (!interval || !(interval > 0)) {
                    interval = 10000;
                }
                if (_internalLogPoller) {
                    _self.stopPollingInternalLogs();
                }
                _internalLogPoller = setInterval(function () {
                    var queue = _self.logger ? _self.logger.queue : [];
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.arrForEach)(queue, function (logMessage) {
                        var item = {
                            name: eventName ? eventName : "InternalMessageId: " + logMessage.messageId,
                            iKey: _self.config.instrumentationKey,
                            time: (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.toISOString)(new Date()),
                            baseType: _DiagnosticLogger__WEBPACK_IMPORTED_MODULE_2__._InternalLogMessage.dataType,
                            baseData: { message: logMessage.message }
                        };
                        _self.track(item);
                    });
                    queue.length = 0;
                }, interval);
                return _internalLogPoller;
            };
            /**
             * Stop polling log messages from logger.queue
             */
            _self.stopPollingInternalLogs = function () {
                if (!_internalLogPoller)
                    return;
                clearInterval(_internalLogPoller);
                _internalLogPoller = 0;
            };
            function _validateTelemetryItem(telemetryItem) {
                if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined)(telemetryItem.name)) {
                    _notifyInvalidEvent(telemetryItem);
                    throw Error("telemetry name required");
                }
            }
            function _notifyInvalidEvent(telemetryItem) {
                var manager = _self.getNotifyMgr();
                if (manager) {
                    manager.eventsDiscarded([telemetryItem], _JavaScriptSDK_Enums_EventsDiscardedReason__WEBPACK_IMPORTED_MODULE_6__.EventsDiscardedReason.InvalidEvent);
                }
            }
        });
        return _this;
    }
// Removed Stub for AppInsightsCore.prototype.initialize.
// Removed Stub for AppInsightsCore.prototype.track.
// Removed Stub for AppInsightsCore.prototype.addNotificationListener.
// Removed Stub for AppInsightsCore.prototype.removeNotificationListener.
// Removed Stub for AppInsightsCore.prototype.pollInternalLogs.
// Removed Stub for AppInsightsCore.prototype.stopPollingInternalLogs.
    return AppInsightsCore;
}(_BaseCore__WEBPACK_IMPORTED_MODULE_7__.BaseCore));

//# sourceMappingURL=AppInsightsCore.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCore": () => (/* binding */ BaseCore)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _ChannelController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChannelController */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ChannelController.js");
/* harmony import */ var _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ProcessTelemetryContext */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js");
/* harmony import */ var _TelemetryHelpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TelemetryHelpers */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js");
/* harmony import */ var _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../JavaScriptSDK.Enums/LoggingEnums */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _PerfManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PerfManager */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js");
/* harmony import */ var _CookieMgr__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CookieMgr */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/Constants.js");
/* harmony import */ var _DiagnosticLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DiagnosticLogger */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _DbgExtensionUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DbgExtensionUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
















var validationError = "Extensions must provide callback to initialize";
var strNotificationManager = "_notificationManager";
/**
 * Helper to create the default performance manager
 * @param core
 * @param notificationMgr
 */
function _createPerfManager(core, notificationMgr) {
    return new _PerfManager__WEBPACK_IMPORTED_MODULE_0__.PerfManager(notificationMgr);
}
var BaseCore = /** @class */ (function () {
    function BaseCore() {
        var _isInitialized = false;
        var _eventQueue;
        var _channelController;
        var _notificationManager;
        var _perfManager;
        var _cookieManager;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__["default"])(BaseCore, this, function (_self) {
            _self._extensions = new Array();
            _channelController = new _ChannelController__WEBPACK_IMPORTED_MODULE_2__.ChannelController();
            // Use a default logger so initialization errors are not dropped on the floor with full logging
            _self.logger = new _DiagnosticLogger__WEBPACK_IMPORTED_MODULE_3__.DiagnosticLogger({ loggingLevelConsole: _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.CRITICAL });
            _eventQueue = [];
            _self.isInitialized = function () { return _isInitialized; };
            _self.initialize = function (config, extensions, logger, notificationManager) {
                // Make sure core is only initialized once
                if (_self.isInitialized()) {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.throwError)("Core should not be initialized more than once");
                }
                if (!config || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined)(config.instrumentationKey)) {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.throwError)("Please provide instrumentation key");
                }
                _notificationManager = notificationManager;
                // For backward compatibility only
                _self[strNotificationManager] = notificationManager;
                _self.config = config || {};
                if (notificationManager && _self.config.disableDbgExt !== true) {
                    notificationManager.addNotificationListener((0,_DbgExtensionUtils__WEBPACK_IMPORTED_MODULE_6__.getDebugListener)(config));
                }
                if (_self.config.enablePerfMgr) {
                    // Set the performance manager creation function if not defined
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.setValue)(_self.config, "createPerfMgr", _createPerfManager);
                }
                config.extensions = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined)(config.extensions) ? [] : config.extensions;
                // add notification to the extensions in the config so other plugins can access it
                var extConfig = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.getSetValue)(config, _Constants__WEBPACK_IMPORTED_MODULE_7__.strExtensionConfig);
                extConfig.NotificationManager = notificationManager;
                if (logger) {
                    _self.logger = logger;
                }
                // Concat all available extensions
                var allExtensions = [];
                allExtensions.push.apply(allExtensions, (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__.__spreadArrayFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_8__.__spreadArrayFn)([], extensions, false), config.extensions, false));
                allExtensions = (0,_TelemetryHelpers__WEBPACK_IMPORTED_MODULE_9__.sortPlugins)(allExtensions);
                var coreExtensions = [];
                var channelExtensions = [];
                // Check if any two extensions have the same priority, then warn to console
                // And extract the local extensions from the
                var extPriorities = {};
                // Extension validation
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.arrForEach)(allExtensions, function (ext) {
                    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined)(ext) || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined)(ext.initialize)) {
                        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.throwError)(validationError);
                    }
                    var extPriority = ext.priority;
                    var identifier = ext.identifier;
                    if (ext && extPriority) {
                        if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined)(extPriorities[extPriority])) {
                            logger.warnToConsole("Two extensions have same priority #" + extPriority + " - " + extPriorities[extPriority] + ", " + identifier);
                        }
                        else {
                            // set a value
                            extPriorities[extPriority] = identifier;
                        }
                    }
                    // Split extensions to core and channelController
                    if (!extPriority || extPriority < _channelController.priority) {
                        // Add to core extension that will be managed by BaseCore
                        coreExtensions.push(ext);
                    }
                    else {
                        // Add all other extensions to be managed by the channel controller
                        channelExtensions.push(ext);
                    }
                });
                // Validation complete
                // Add the channelController to the complete extension collection and
                // to the end of the core extensions
                allExtensions.push(_channelController);
                coreExtensions.push(_channelController);
                // Sort the complete set of extensions by priority
                allExtensions = (0,_TelemetryHelpers__WEBPACK_IMPORTED_MODULE_9__.sortPlugins)(allExtensions);
                _self._extensions = allExtensions;
                // initialize channel controller first, this will initialize all channel plugins
                (0,_TelemetryHelpers__WEBPACK_IMPORTED_MODULE_9__.initializePlugins)(new _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_10__.ProcessTelemetryContext([_channelController], config, _self), allExtensions);
                (0,_TelemetryHelpers__WEBPACK_IMPORTED_MODULE_9__.initializePlugins)(new _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_10__.ProcessTelemetryContext(coreExtensions, config, _self), allExtensions);
                // Now reset the extensions to just those being managed by Basecore
                _self._extensions = coreExtensions;
                if (_self.getTransmissionControls().length === 0) {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.throwError)("No channels available");
                }
                _isInitialized = true;
                _self.releaseQueue();
            };
            _self.getTransmissionControls = function () {
                return _channelController.getChannelControls();
            };
            _self.track = function (telemetryItem) {
                // setup default iKey if not passed in
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.setValue)(telemetryItem, _Constants__WEBPACK_IMPORTED_MODULE_7__.strIKey, _self.config.instrumentationKey, null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNotTruthy);
                // add default timestamp if not passed in
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.setValue)(telemetryItem, "time", (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.toISOString)(new Date()), null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNotTruthy);
                // Common Schema 4.0
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.setValue)(telemetryItem, "ver", "4.0", null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isNullOrUndefined);
                if (_self.isInitialized()) {
                    // Process the telemetry plugin chain
                    _self.getProcessTelContext().processNext(telemetryItem);
                }
                else {
                    // Queue events until all extensions are initialized
                    _eventQueue.push(telemetryItem);
                }
            };
            _self.getProcessTelContext = function () {
                var extensions = _self._extensions;
                var thePlugins = extensions;
                // invoke any common telemetry processors before sending through pipeline
                if (!extensions || extensions.length === 0) {
                    // Pass to Channel controller so data is sent to correct channel queues
                    thePlugins = [_channelController];
                }
                return new _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_10__.ProcessTelemetryContext(thePlugins, _self.config, _self);
            };
            _self.getNotifyMgr = function () {
                if (!_notificationManager) {
                    // Create Dummy notification manager
                    _notificationManager = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_11__.objCreateFn)({
                        addNotificationListener: function (listener) { },
                        removeNotificationListener: function (listener) { },
                        eventsSent: function (events) { },
                        eventsDiscarded: function (events, reason) { },
                        eventsSendRequest: function (sendReason, isAsync) { }
                    });
                    // For backward compatibility only
                    _self[strNotificationManager] = _notificationManager;
                }
                return _notificationManager;
            };
            _self.getCookieMgr = function () {
                if (!_cookieManager) {
                    _cookieManager = (0,_CookieMgr__WEBPACK_IMPORTED_MODULE_12__.createCookieMgr)(_self.config, _self.logger);
                }
                return _cookieManager;
            };
            _self.setCookieMgr = function (cookieMgr) {
                _cookieManager = cookieMgr;
            };
            _self.getPerfMgr = function () {
                if (!_perfManager) {
                    if (_self.config && _self.config.enablePerfMgr && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.isFunction)(_self.config.createPerfMgr)) {
                        _perfManager = _self.config.createPerfMgr(_self, _self.getNotifyMgr());
                    }
                }
                return _perfManager || (0,_PerfManager__WEBPACK_IMPORTED_MODULE_0__.getGblPerfMgr)();
            };
            _self.setPerfMgr = function (perfMgr) {
                _perfManager = perfMgr;
            };
            _self.eventCnt = function () {
                return _eventQueue.length;
            };
            _self.releaseQueue = function () {
                if (_eventQueue.length > 0) {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_5__.arrForEach)(_eventQueue, function (event) {
                        _self.getProcessTelContext().processNext(event);
                    });
                    _eventQueue = [];
                }
            };
        });
    }
// Removed Stub for BaseCore.prototype.initialize.
// Removed Stub for BaseCore.prototype.getTransmissionControls.
// Removed Stub for BaseCore.prototype.track.
// Removed Stub for BaseCore.prototype.getProcessTelContext.
// Removed Stub for BaseCore.prototype.getNotifyMgr.
// Removed Stub for BaseCore.prototype.getCookieMgr.
// Removed Stub for BaseCore.prototype.setCookieMgr.
// Removed Stub for BaseCore.prototype.getPerfMgr.
// Removed Stub for BaseCore.prototype.setPerfMgr.
// Removed Stub for BaseCore.prototype.eventCnt.
// Removed Stub for BaseCore.prototype.releaseQueue.
    return BaseCore;
}());

//# sourceMappingURL=BaseCore.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTelemetryPlugin": () => (/* binding */ BaseTelemetryPlugin)
/* harmony export */ });
/* harmony import */ var _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProcessTelemetryContext */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/Constants.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */






var strGetPlugin = "getPlugin";
/**
 * BaseTelemetryPlugin provides a basic implementation of the ITelemetryPlugin interface so that plugins
 * can avoid implementation the same set of boiler plate code as well as provide a base
 * implementation so that new default implementations can be added without breaking all plugins.
 */
var BaseTelemetryPlugin = /** @class */ (function () {
    function BaseTelemetryPlugin() {
        var _self = this;
        var _isinitialized = false;
        var _rootCtx = null; // Used as the root context, holding the current config and initialized core
        var _nextPlugin = null; // Used for backward compatibility where plugins don't call the main pipeline
        _self.core = null;
        _self.diagLog = function (itemCtx) {
            return _self._getTelCtx(itemCtx).diagLog();
        };
        _self.isInitialized = function () {
            return _isinitialized;
        };
        _self.setInitialized = function (isInitialized) {
            _isinitialized = isInitialized;
        };
        // _self.getNextPlugin = () => DO NOT IMPLEMENT
        // Sub-classes of this base class *should* not be relying on this value and instead
        // should use processNext() function. If you require access to the plugin use the
        // IProcessTelemetryContext.getNext().getPlugin() while in the pipeline, Note getNext() may return null.
        _self.setNextPlugin = function (next) {
            _nextPlugin = next;
        };
        _self.processNext = function (env, itemCtx) {
            if (itemCtx) {
                // Normal core execution sequence
                itemCtx.processNext(env);
            }
            else if (_nextPlugin && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(_nextPlugin.processTelemetry)) {
                // Looks like backward compatibility or out of band processing. And as it looks
                // like a ITelemetryPlugin or ITelemetryPluginChain, just call processTelemetry
                _nextPlugin.processTelemetry(env, null);
            }
        };
        _self._getTelCtx = function (currentCtx) {
            if (currentCtx === void 0) { currentCtx = null; }
            var itemCtx = currentCtx;
            if (!itemCtx) {
                var rootCtx = _rootCtx || new _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_1__.ProcessTelemetryContext(null, {}, _self.core);
                // tslint:disable-next-line: prefer-conditional-expression
                if (_nextPlugin && _nextPlugin[strGetPlugin]) {
                    // Looks like a chain object
                    itemCtx = rootCtx.createNew(null, _nextPlugin[strGetPlugin]);
                }
                else {
                    itemCtx = rootCtx.createNew(null, _nextPlugin);
                }
            }
            return itemCtx;
        };
        _self._baseTelInit = function (config, core, extensions, pluginChain) {
            if (config) {
                // Make sure the extensionConfig exists
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.setValue)(config, _Constants__WEBPACK_IMPORTED_MODULE_2__.strExtensionConfig, [], null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined);
            }
            if (!pluginChain && core) {
                // Get the first plugin from the core
                pluginChain = core.getProcessTelContext().getNext();
            }
            var nextPlugin = _nextPlugin;
            if (_nextPlugin && _nextPlugin[strGetPlugin]) {
                // If it looks like a proxy/chain then get the plugin
                nextPlugin = _nextPlugin[strGetPlugin]();
            }
            // Support legacy plugins where core was defined as a property
            _self.core = core;
            _rootCtx = new _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_1__.ProcessTelemetryContext(pluginChain, config, core, nextPlugin);
            _isinitialized = true;
        };
    }
    BaseTelemetryPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {
        this._baseTelInit(config, core, extensions, pluginChain);
    };
    return BaseTelemetryPlugin;
}());

//# sourceMappingURL=BaseTelemetryPlugin.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ChannelController.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ChannelController.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChannelController": () => (/* binding */ ChannelController)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _BaseTelemetryPlugin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BaseTelemetryPlugin */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js");
/* harmony import */ var _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ProcessTelemetryContext */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js");
/* harmony import */ var _TelemetryHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TelemetryHelpers */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */









var ChannelControllerPriority = 500;
var ChannelValidationMessage = "Channel has invalid priority";
var ChannelController = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(ChannelController, _super);
    function ChannelController() {
        var _this = _super.call(this) || this;
        _this.identifier = "ChannelControllerPlugin";
        _this.priority = ChannelControllerPriority; // in reserved range 100 to 200
        var _channelQueue;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__["default"])(ChannelController, _this, function (_self, _base) {
            _self.setNextPlugin = function (next) {
                // The Channel controller is last in pipeline
            };
            _self.processTelemetry = function (item, itemCtx) {
                if (_channelQueue) {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(_channelQueue, function (queues) {
                        // pass on to first item in queue
                        if (queues.length > 0) {
                            // Copying the item context as we could have mutiple chains that are executing asynchronously
                            // and calling _getDefTelCtx as it's possible that the caller doesn't pass any context
                            var chainCtx = _this._getTelCtx(itemCtx).createNew(queues);
                            chainCtx.processNext(item);
                        }
                    });
                }
            };
            _self.getChannelControls = function () {
                return _channelQueue;
            };
            _self.initialize = function (config, core, extensions) {
                if (_self.isInitialized()) {
                    // already initialized
                    return;
                }
                _base.initialize(config, core, extensions);
                _createChannelQueues((config || {}).channels, extensions);
                // Initialize the Queues
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(_channelQueue, function (queue) { return (0,_TelemetryHelpers__WEBPACK_IMPORTED_MODULE_3__.initializePlugins)(new _ProcessTelemetryContext__WEBPACK_IMPORTED_MODULE_4__.ProcessTelemetryContext(queue, config, core), extensions); });
            };
        });
        function _checkQueuePriority(queue) {
            (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(queue, function (queueItem) {
                if (queueItem.priority < ChannelControllerPriority) {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.throwError)(ChannelValidationMessage + queueItem.identifier);
                }
            });
        }
        function _addChannelQueue(queue) {
            if (queue && queue.length > 0) {
                queue = queue.sort(function (a, b) {
                    return a.priority - b.priority;
                });
                _checkQueuePriority(queue);
                _channelQueue.push(queue);
            }
        }
        function _createChannelQueues(channels, extensions) {
            _channelQueue = [];
            if (channels) {
                // Add and sort the configuration channel queues
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(channels, function (queue) { return _addChannelQueue(queue); });
            }
            if (extensions) {
                // Create a new channel queue for any extensions with a priority > the ChannelControllerPriority
                var extensionQueue_1 = [];
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(extensions, function (plugin) {
                    if (plugin.priority > ChannelControllerPriority) {
                        extensionQueue_1.push(plugin);
                    }
                });
                _addChannelQueue(extensionQueue_1);
            }
        }
        return _this;
    }
// Removed Stub for ChannelController.prototype.processTelemetry.
// Removed Stub for ChannelController.prototype.getChannelControls.
// Removed Stub for ChannelController.prototype.initialize.
    /**
     * Static constructor, attempt to create accessors
     */
    // tslint:disable-next-line
    ChannelController._staticInit = (function () {
        var proto = ChannelController.prototype;
        // Dynamically create get/set property accessors
        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.objDefineAccessors)(proto, "ChannelControls", proto.getChannelControls);
        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.objDefineAccessors)(proto, "channelQueue", proto.getChannelControls);
    })();
    return ChannelController;
}(_BaseTelemetryPlugin__WEBPACK_IMPORTED_MODULE_5__.BaseTelemetryPlugin));

//# sourceMappingURL=ChannelController.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/Constants.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/Constants.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "strExtensionConfig": () => (/* binding */ strExtensionConfig),
/* harmony export */   "strIKey": () => (/* binding */ strIKey)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var strIKey = "iKey";
var strExtensionConfig = "extensionConfig";
//# sourceMappingURL=Constants.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_gblCookieMgr": () => (/* binding */ _gblCookieMgr),
/* harmony export */   "areCookiesSupported": () => (/* binding */ areCookiesSupported),
/* harmony export */   "createCookieMgr": () => (/* binding */ createCookieMgr),
/* harmony export */   "safeGetCookieMgr": () => (/* binding */ safeGetCookieMgr),
/* harmony export */   "uaDisallowsSameSiteNone": () => (/* binding */ uaDisallowsSameSiteNone)
/* harmony export */ });
/* harmony import */ var _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../JavaScriptSDK.Enums/LoggingEnums */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _EnvUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EnvUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



var strToGMTString = "toGMTString";
var strToUTCString = "toUTCString";
var strCookie = "cookie";
var strExpires = "expires";
var strEnabled = "enabled";
var strIsCookieUseDisabled = "isCookieUseDisabled";
var strDisableCookiesUsage = "disableCookiesUsage";
var strConfigCookieMgr = "_ckMgr";
var strEmpty = "";
var _supportsCookies = null;
var _allowUaSameSite = null;
var _parsedCookieValue = null;
var _doc = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
var _cookieCache = {};
var _globalCookieConfig = {};
/**
 * @ignore
 * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.
 * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create
 * your own instance of the CookieMgr and use that.
 * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.
 * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.
 * @param logger - The DiagnosticLogger to use for reporting errors.
 */
function _gblCookieMgr(config, logger) {
    // Stash the global instance against the BaseCookieMgr class
    var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];
    if (!inst) {
        // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr
        // that ultimately is never used
        inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);
        _globalCookieConfig[strConfigCookieMgr] = inst;
    }
    return inst;
}
function _isMgrEnabled(cookieMgr) {
    if (cookieMgr) {
        return cookieMgr.isEnabled();
    }
    return true;
}
function _createCookieMgrConfig(rootConfig) {
    var cookieMgrCfg = rootConfig.cookieCfg = rootConfig.cookieCfg || {};
    // Sets the values from the root config if not already present on the cookieMgrCfg
    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(cookieMgrCfg, "domain", rootConfig.cookieDomain, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNotNullOrUndefined, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined);
    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(cookieMgrCfg, "path", rootConfig.cookiePath || "/", null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined);
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(cookieMgrCfg[strEnabled])) {
        // Set the enabled from the provided setting or the legacy root values
        var cookieEnabled = void 0;
        if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(rootConfig[strIsCookieUseDisabled])) {
            cookieEnabled = !rootConfig[strIsCookieUseDisabled];
        }
        if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(rootConfig[strDisableCookiesUsage])) {
            cookieEnabled = !rootConfig[strDisableCookiesUsage];
        }
        cookieMgrCfg[strEnabled] = cookieEnabled;
    }
    return cookieMgrCfg;
}
/**
 * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation
 * associated with the configuration or a legacy default.
 * @param core
 * @param config
 * @returns
 */
function safeGetCookieMgr(core, config) {
    var cookieMgr;
    if (core) {
        // Always returns an instance
        cookieMgr = core.getCookieMgr();
    }
    else if (config) {
        var cookieCfg = config.cookieCfg;
        if (cookieCfg[strConfigCookieMgr]) {
            cookieMgr = cookieCfg[strConfigCookieMgr];
        }
        else {
            cookieMgr = createCookieMgr(config);
        }
    }
    if (!cookieMgr) {
        // Get or initialize the default global (legacy) cookie manager if we couldn't find one
        cookieMgr = _gblCookieMgr(config, (core || {}).logger);
    }
    return cookieMgr;
}
function createCookieMgr(rootConfig, logger) {
    var cookieMgrConfig = _createCookieMgrConfig(rootConfig || _globalCookieConfig);
    var _path = cookieMgrConfig.path || "/";
    var _domain = cookieMgrConfig.domain;
    // Explicitly checking against false, so that setting to undefined will === true
    var _enabled = cookieMgrConfig[strEnabled] !== false;
    var cookieMgr = {
        isEnabled: function () {
            var enabled = _enabled && areCookiesSupported(logger);
            // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's
            // that don't use the "applicationinsights-core" version of the default cookie function
            var gblManager = _globalCookieConfig[strConfigCookieMgr];
            if (enabled && gblManager && cookieMgr !== gblManager) {
                // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.
                // As the global (deprecated) functions may have been called (for backward compatibility)
                enabled = _isMgrEnabled(gblManager);
            }
            return enabled;
        },
        setEnabled: function (value) {
            // Explicitly checking against false, so that setting to undefined will === true
            _enabled = value !== false;
        },
        set: function (name, value, maxAgeSec, domain, path) {
            var result = false;
            if (_isMgrEnabled(cookieMgr)) {
                var values = {};
                var theValue = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(value || strEmpty);
                var idx = theValue.indexOf(";");
                if (idx !== -1) {
                    theValue = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(value.substring(0, idx));
                    values = _extractParts(value.substring(idx + 1));
                }
                // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(values, "domain", domain || _domain, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isTruthy, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined);
                if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(maxAgeSec)) {
                    var _isIE = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.isIE)();
                    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(values[strExpires])) {
                        var nowMs = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.dateNow)();
                        // Only add expires if not already present
                        var expireMs = nowMs + (maxAgeSec * 1000);
                        // Sanity check, if zero or -ve then ignore
                        if (expireMs > 0) {
                            var expiry = new Date();
                            expiry.setTime(expireMs);
                            (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || strEmpty, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isTruthy);
                        }
                    }
                    if (!_isIE) {
                        // Only replace if not already present
                        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(values, "max-age", strEmpty + maxAgeSec, null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined);
                    }
                }
                var location_1 = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.getLocation)();
                if (location_1 && location_1.protocol === "https:") {
                    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(values, "secure", null, null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined);
                    // Only set same site if not also secure
                    if (_allowUaSameSite === null) {
                        _allowUaSameSite = !uaDisallowsSameSiteNone(((0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.getNavigator)() || {}).userAgent);
                    }
                    if (_allowUaSameSite) {
                        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(values, "SameSite", "None", null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined);
                    }
                }
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.setValue)(values, "path", path || _path, null, _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined);
                var setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;
                setCookieFn(name, _formatCookieValue(theValue, values));
                result = true;
            }
            return result;
        },
        get: function (name) {
            var value = strEmpty;
            if (_isMgrEnabled(cookieMgr)) {
                value = (cookieMgrConfig.getCookie || _getCookieValue)(name);
            }
            return value;
        },
        del: function (name, path) {
            var result = false;
            if (_isMgrEnabled(cookieMgr)) {
                // Only remove the cookie if the manager and cookie support has not been disabled
                result = cookieMgr.purge(name, path);
            }
            return result;
        },
        purge: function (name, path) {
            var _a;
            var result = false;
            if (areCookiesSupported(logger)) {
                // Setting the expiration date in the past immediately removes the cookie
                var values = (_a = {},
                    _a["path"] = path ? path : "/",
                    _a[strExpires] = "Thu, 01 Jan 1970 00:00:01 GMT",
                    _a);
                if (!(0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.isIE)()) {
                    // Set max age to expire now
                    values["max-age"] = "0";
                }
                var delCookie = cookieMgrConfig.delCookie || _setCookieValue;
                delCookie(name, _formatCookieValue(strEmpty, values));
                result = true;
            }
            return result;
        }
    };
    // Associated this cookie manager with the config
    cookieMgr[strConfigCookieMgr] = cookieMgr;
    return cookieMgr;
}
/*
* Helper method to tell if document.cookie object is supported by the runtime
*/
function areCookiesSupported(logger) {
    if (_supportsCookies === null) {
        _supportsCookies = false;
        try {
            var doc = _doc || {};
            _supportsCookies = doc[strCookie] !== undefined;
        }
        catch (e) {
            logger && logger.throwInternal(_JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.WARNING, _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.CannotAccessCookie, "Cannot access document.cookie - " + (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.getExceptionName)(e), { exception: (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.dumpObj)(e) });
        }
    }
    return _supportsCookies;
}
function _extractParts(theValue) {
    var values = {};
    if (theValue && theValue.length) {
        var parts = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(theValue).split(";");
        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(parts, function (thePart) {
            thePart = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(thePart || strEmpty);
            if (thePart) {
                var idx = thePart.indexOf("=");
                if (idx === -1) {
                    values[thePart] = null;
                }
                else {
                    values[(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(thePart.substring(0, idx))] = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(thePart.substring(idx + 1));
                }
            }
        });
    }
    return values;
}
function _formatDate(theDate, func) {
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isFunction)(theDate[func])) {
        return theDate[func]();
    }
    return null;
}
function _formatCookieValue(value, values) {
    var cookieValue = value || strEmpty;
    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.objForEachKey)(values, function (name, theValue) {
        cookieValue += "; " + name + (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(theValue) ? "=" + theValue : strEmpty);
    });
    return cookieValue;
}
function _getCookieValue(name) {
    var cookieValue = strEmpty;
    if (_doc) {
        var theCookie = _doc[strCookie] || strEmpty;
        if (_parsedCookieValue !== theCookie) {
            _cookieCache = _extractParts(theCookie);
            _parsedCookieValue = theCookie;
        }
        cookieValue = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strTrim)(_cookieCache[name] || strEmpty);
    }
    return cookieValue;
}
function _setCookieValue(name, cookieValue) {
    if (_doc) {
        _doc[strCookie] = name + "=" + cookieValue;
    }
}
function uaDisallowsSameSiteNone(userAgent) {
    if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isString)(userAgent)) {
        return false;
    }
    // Cover all iOS based browsers here. This includes:
    // - Safari on iOS 12 for iPhone, iPod Touch, iPad
    // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad
    // - Chrome on iOS 12 for iPhone, iPod Touch, iPad
    // All of which are broken by SameSite=None, because they use the iOS networking stack
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "CPU iPhone OS 12") || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "iPad; CPU OS 12")) {
        return true;
    }
    // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:
    // - Safari on Mac OS X
    // This does not include:
    // - Internal browser on Mac OS X
    // - Chrome on Mac OS X
    // - Chromium on Mac OS X
    // Because they do not use the Mac OS networking stack.
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Macintosh; Intel Mac OS X 10_14") && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Version/") && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Safari")) {
        return true;
    }
    // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:
    // - Internal browser on Mac OS X
    // This does not include:
    // - Safari on Mac OS X
    // - Chrome on Mac OS X
    // - Chromium on Mac OS X
    // Because they do not use the Mac OS networking stack.
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Macintosh; Intel Mac OS X 10_14") && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strEndsWith)(userAgent, "AppleWebKit/605.1.15 (KHTML, like Gecko)")) {
        return true;
    }
    // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.
    // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.
    // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Chrome/5") || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Chrome/6")) {
        return true;
    }
    // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal
    // that don't specify their Chrome version as lacking support for SameSite=None.
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "UnrealEngine") && !(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "Chrome")) {
        return true;
    }
    // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None
    // NB: this rule isn't complete - you need regex to make a complete rule.
    // See: https://www.chromium.org/updates/same-site/incompatible-clients
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "UCBrowser/12") || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, "UCBrowser/11")) {
        return true;
    }
    return false;
}
//# sourceMappingURL=CookieMgr.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoreUtils": () => (/* binding */ CoreUtils),
/* harmony export */   "EventHelper": () => (/* binding */ EventHelper),
/* harmony export */   "Undefined": () => (/* binding */ Undefined),
/* harmony export */   "_legacyCookieMgr": () => (/* binding */ _legacyCookieMgr),
/* harmony export */   "addEventHandler": () => (/* binding */ addEventHandler),
/* harmony export */   "addEventListeners": () => (/* binding */ addEventListeners),
/* harmony export */   "addPageHideEventListener": () => (/* binding */ addPageHideEventListener),
/* harmony export */   "addPageShowEventListener": () => (/* binding */ addPageShowEventListener),
/* harmony export */   "addPageUnloadEventListener": () => (/* binding */ addPageUnloadEventListener),
/* harmony export */   "canUseCookies": () => (/* binding */ canUseCookies),
/* harmony export */   "deleteCookie": () => (/* binding */ deleteCookie),
/* harmony export */   "disableCookies": () => (/* binding */ disableCookies),
/* harmony export */   "generateW3CId": () => (/* binding */ generateW3CId),
/* harmony export */   "getCookie": () => (/* binding */ getCookie),
/* harmony export */   "newGuid": () => (/* binding */ newGuid),
/* harmony export */   "newId": () => (/* binding */ newId),
/* harmony export */   "perfNow": () => (/* binding */ perfNow),
/* harmony export */   "setCookie": () => (/* binding */ setCookie),
/* harmony export */   "strEndsWith": () => (/* binding */ strEndsWith)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
/* harmony import */ var _CookieMgr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CookieMgr */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js");
/* harmony import */ var _EnvUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnvUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _RandomHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RandomHelper */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */








var strVisibilityChangeEvt = "visibilitychange";
var strPageHide = "pagehide";
var strPageShow = "pageshow";
var _cookieMgrs = null;
var _canUseCookies; // legacy supported config
// Added to help with minfication
var Undefined = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined;
/**
 * Trys to add an event handler for the specified event to the window, body and document
 * @param eventName {string} - The name of the event
 * @param callback {any} - The callback function that needs to be executed for the given event
 * @return {boolean} - true if the handler was successfully added
 */
function addEventHandler(eventName, callback) {
    var result = false;
    var w = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getWindow)();
    if (w) {
        result = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.attachEvent)(w, eventName, callback);
        result = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.attachEvent)(w["body"], eventName, callback) || result;
    }
    var doc = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
    if (doc) {
        result = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.attachEvent)(doc, eventName, callback) || result;
    }
    return result;
}
/**
 * Bind the listener to the array of events
 * @param events An string array of event names to bind the listener to
 * @param listener The event callback to call when the event is triggered
 * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.
 * @returns true - when at least one of the events was registered otherwise false
 */
function addEventListeners(events, listener, excludeEvents) {
    var added = false;
    if (listener && events && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isArray)(events)) {
        var excluded_1 = [];
        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(events, function (name) {
            if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isString)(name)) {
                if (!excludeEvents || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf)(excludeEvents, name) === -1) {
                    added = addEventHandler(name, listener) || added;
                }
                else {
                    excluded_1.push(name);
                }
            }
        });
        if (!added && excluded_1.length > 0) {
            // Failed to add any listeners and we excluded some, so just attempt to add the excluded events
            added = addEventListeners(excluded_1, listener);
        }
    }
    return added;
}
/**
 * Listen to the 'beforeunload', 'unload' and 'pagehide' events which indicates a page unload is occurring,
 * this does NOT listen to the 'visibilitychange' event as while it does indicate that the page is being hidden
 * it does not *necessarily* mean that the page is being completely unloaded, it can mean that the user is
 * just navigating to a different Tab and may come back (without unloading the page). As such you may also
 * need to listen to the 'addPageHideEventListener' and 'addPageShowEventListener' events.
 * @param listener - The event callback to call when a page unload event is triggered
 * @param excludeEvents - [Optional] An array of events that should not be hooked, unless no other events can be.
 * @returns true - when at least one of the events was registered otherwise false
 */
function addPageUnloadEventListener(listener, excludeEvents) {
    // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server
    // As just hooking the window does not always fire (on chrome) for page navigation's.
    return addEventListeners(["beforeunload", "unload", "pagehide"], listener, excludeEvents);
}
/**
 * Listen to the pagehide and visibility changing to 'hidden' events
 * @param listener - The event callback to call when a page hide event is triggered
 * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.
 * Suggestion: pass as true if you are also calling addPageUnloadEventListener as that also hooks pagehide
 * @returns true - when at least one of the events was registered otherwise false
 */
function addPageHideEventListener(listener, excludeEvents) {
    function _handlePageVisibility(evt) {
        var doc = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
        if (listener && doc && doc.visibilityState === "hidden") {
            listener(evt);
        }
    }
    var pageUnloadAdded = false;
    if (!excludeEvents || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf)(excludeEvents, strPageHide) === -1) {
        pageUnloadAdded = addEventHandler(strPageHide, listener);
    }
    if (!excludeEvents || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf)(excludeEvents, strVisibilityChangeEvt) === -1) {
        pageUnloadAdded = addEventHandler(strVisibilityChangeEvt, _handlePageVisibility) || pageUnloadAdded;
    }
    if (!pageUnloadAdded && excludeEvents) {
        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything
        pageUnloadAdded = addPageHideEventListener(listener);
    }
    return pageUnloadAdded;
}
/**
 * Listen to the pageshow and visibility changing to 'visible' events
 * @param listener - The event callback to call when a page is show event is triggered
 * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.
 * @returns true - when at least one of the events was registered otherwise false
 */
function addPageShowEventListener(listener, excludeEvents) {
    function _handlePageVisibility(evt) {
        var doc = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getDocument)();
        if (listener && doc && doc.visibilityState === "visible") {
            listener(evt);
        }
    }
    var pageShowAdded = false;
    if (!excludeEvents || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf)(excludeEvents, strPageShow) === -1) {
        pageShowAdded = addEventHandler(strPageShow, listener);
    }
    if (!excludeEvents || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf)(excludeEvents, strVisibilityChangeEvt) === -1) {
        pageShowAdded = addEventHandler(strVisibilityChangeEvt, _handlePageVisibility) || pageShowAdded;
    }
    if (!pageShowAdded && excludeEvents) {
        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything
        pageShowAdded = addPageShowEventListener(listener);
    }
    return pageShowAdded;
}
function newGuid() {
    function randomHexDigit() {
        return (0,_RandomHelper__WEBPACK_IMPORTED_MODULE_3__.randomValue)(15); // Get a random value from 0..15
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(GuidRegex, function (c) {
        var r = (randomHexDigit() | 0), v = (c === "x" ? r : r & 0x3 | 0x8);
        return v.toString(16);
    });
}
/**
 * Return the current value of the Performance Api now() function (if available) and fallback to dateNow() if it is unavailable (IE9 or less)
 * https://caniuse.com/#search=performance.now
 */
function perfNow() {
    var perf = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getPerformance)();
    if (perf && perf.now) {
        return perf.now();
    }
    return (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.dateNow)();
}
/**
 * Generate random base64 id string.
 * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)
 * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22
 */
function newId(maxLength) {
    if (maxLength === void 0) { maxLength = 22; }
    var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    // Start with an initial random number, consuming the value in reverse byte order
    var number = (0,_RandomHelper__WEBPACK_IMPORTED_MODULE_3__.random32)() >>> 0; // Make sure it's a +ve number
    var chars = 0;
    var result = "";
    while (result.length < maxLength) {
        chars++;
        result += base64chars.charAt(number & 0x3F);
        number >>>= 6; // Zero fill with right shift
        if (chars === 5) {
            // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char
            // So add on another 30 bits and make sure it's +ve
            number = ((((0,_RandomHelper__WEBPACK_IMPORTED_MODULE_3__.random32)() << 2) & 0xFFFFFFFF) | (number & 0x03)) >>> 0;
            chars = 0; // We need to reset the number every 5 chars (30 bits)
        }
    }
    return result;
}
/**
 * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.
 * @param value - The value to check whether it ends with the search value.
 * @param search - The characters to be searched for at the end of the value.
 * @returns true if the given search value is found at the end of the string, otherwise false.
 */
function strEndsWith(value, search) {
    if (value && search) {
        var len = value.length;
        var start = len - search.length;
        return value.substring(start >= 0 ? start : 0, len) === search;
    }
    return false;
}
/**
 * generate W3C trace id
 */
function generateW3CId() {
    var hexValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    // rfc4122 version 4 UUID without dashes and with lowercase letters
    var oct = "", tmp;
    for (var a = 0; a < 4; a++) {
        tmp = (0,_RandomHelper__WEBPACK_IMPORTED_MODULE_3__.random32)();
        oct +=
            hexValues[tmp & 0xF] +
                hexValues[tmp >> 4 & 0xF] +
                hexValues[tmp >> 8 & 0xF] +
                hexValues[tmp >> 12 & 0xF] +
                hexValues[tmp >> 16 & 0xF] +
                hexValues[tmp >> 20 & 0xF] +
                hexValues[tmp >> 24 & 0xF] +
                hexValues[tmp >> 28 & 0xF];
    }
    // "Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively"
    var clockSequenceHi = hexValues[8 + ((0,_RandomHelper__WEBPACK_IMPORTED_MODULE_3__.random32)() & 0x03) | 0];
    return oct.substr(0, 8) + oct.substr(9, 4) + "4" + oct.substr(13, 3) + clockSequenceHi + oct.substr(16, 3) + oct.substr(19, 12);
}
/**
 * Provides a collection of utility functions, included for backward compatibility with previous releases.
 * @deprecated Marking this instance as deprecated in favor of direct usage of the helper functions
 * as direct usage provides better tree-shaking and minification by avoiding the inclusion of the unused items
 * in your resulting code.
 */
var CoreUtils = {
    _canUseCookies: undefined,
    isTypeof: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isTypeof,
    isUndefined: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isUndefined,
    isNullOrUndefined: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined,
    hasOwnProperty: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.hasOwnProperty,
    isFunction: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isFunction,
    isObject: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isObject,
    isDate: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isDate,
    isArray: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isArray,
    isError: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isError,
    isString: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isString,
    isNumber: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isNumber,
    isBoolean: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isBoolean,
    toISOString: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.toISOString,
    arrForEach: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach,
    arrIndexOf: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf,
    arrMap: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrMap,
    arrReduce: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrReduce,
    strTrim: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.strTrim,
    objCreate: _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_4__.objCreateFn,
    objKeys: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.objKeys,
    objDefineAccessors: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.objDefineAccessors,
    addEventHandler: addEventHandler,
    dateNow: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.dateNow,
    isIE: _EnvUtils__WEBPACK_IMPORTED_MODULE_1__.isIE,
    disableCookies: disableCookies,
    newGuid: newGuid,
    perfNow: perfNow,
    newId: newId,
    randomValue: _RandomHelper__WEBPACK_IMPORTED_MODULE_3__.randomValue,
    random32: _RandomHelper__WEBPACK_IMPORTED_MODULE_3__.random32,
    mwcRandomSeed: _RandomHelper__WEBPACK_IMPORTED_MODULE_3__.mwcRandomSeed,
    mwcRandom32: _RandomHelper__WEBPACK_IMPORTED_MODULE_3__.mwcRandom32,
    generateW3CId: generateW3CId
};
var GuidRegex = /[xy]/g;
var EventHelper = {
    Attach: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.attachEvent,
    AttachEvent: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.attachEvent,
    Detach: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.detachEvent,
    DetachEvent: _HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.detachEvent
};
/**
 * Helper to support backward compatibility for users that use the legacy cookie handling functions and the use the internal
 * CoreUtils._canUseCookies global flag to enable/disable cookies usage.
 * Note: This has the following deliberate side-effects
 * - Creates the global (legacy) cookie manager if it does not already exist
 * - Attempts to add "listeners" to the CoreUtils._canUseCookies property to support the legacy usage
 * @param config
 * @param logger
 * @returns
 */
function _legacyCookieMgr(config, logger) {
    var cookieMgr = (0,_CookieMgr__WEBPACK_IMPORTED_MODULE_5__._gblCookieMgr)(config, logger);
    var legacyCanUseCookies = CoreUtils._canUseCookies;
    if (_cookieMgrs === null) {
        _cookieMgrs = [];
        _canUseCookies = legacyCanUseCookies;
        // Dynamically create get/set property accessors for backward compatibility for enabling / disabling cookies
        // this WILL NOT work for ES3 browsers (< IE8)
        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.objDefineAccessors)(CoreUtils, "_canUseCookies", function () {
            return _canUseCookies;
        }, function (value) {
            _canUseCookies = value;
            (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(_cookieMgrs, function (mgr) {
                mgr.setEnabled(value);
            });
        });
    }
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.arrIndexOf)(_cookieMgrs, cookieMgr) === -1) {
        _cookieMgrs.push(cookieMgr);
    }
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(legacyCanUseCookies)) {
        cookieMgr.setEnabled(legacyCanUseCookies);
    }
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(_canUseCookies)) {
        cookieMgr.setEnabled(_canUseCookies);
    }
    return cookieMgr;
}
/**
 * @deprecated - Use the core.getCookieMgr().disable()
 * Force the SDK not to store and read any data from cookies.
 */
function disableCookies() {
    _legacyCookieMgr().setEnabled(false);
}
/**
 * @deprecated - Use the core.getCookieMgr().isEnabled()
 * Helper method to tell if document.cookie object is available and whether it can be used.
 */
function canUseCookies(logger) {
    return _legacyCookieMgr(null, logger).isEnabled();
}
/**
 * @deprecated - Use the core.getCookieMgr().get()
 * helper method to access userId and sessionId cookie
 */
function getCookie(logger, name) {
    return _legacyCookieMgr(null, logger).get(name);
}
/**
 * @deprecated - Use the core.getCookieMgr().set()
 * helper method to set userId and sessionId cookie
 */
function setCookie(logger, name, value, domain) {
    _legacyCookieMgr(null, logger).set(name, value, null, domain);
}
/**
 * @deprecated - Use the core.getCookieMgr().del()
 * Deletes a cookie by setting it's expiration time in the past.
 * @param name - The name of the cookie to delete.
 */
function deleteCookie(logger, name) {
    return _legacyCookieMgr(null, logger).del(name);
}
//# sourceMappingURL=CoreUtils.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDebugExt": () => (/* binding */ getDebugExt),
/* harmony export */   "getDebugListener": () => (/* binding */ getDebugListener)
/* harmony export */ });
/* harmony import */ var _EnvUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EnvUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



var listenerFuncs = ["eventsSent", "eventsDiscarded", "eventsSendRequest", "perfEvent"];
var _aiNamespace = null;
var _debugListener;
function _listenerProxyFunc(name, config) {
    return function () {
        var args = arguments;
        var dbgExt = getDebugExt(config);
        if (dbgExt) {
            var listener = dbgExt.listener;
            if (listener && listener[name]) {
                listener[name].apply(listener, args);
            }
        }
    };
}
function _getExtensionNamespace() {
    // Cache the lookup of the global namespace object
    var target = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.getGlobalInst)("Microsoft");
    if (target) {
        _aiNamespace = target["ApplicationInsights"];
    }
    return _aiNamespace;
}
function getDebugExt(config) {
    var ns = _aiNamespace;
    if (!ns && config.disableDbgExt !== true) {
        ns = _aiNamespace || _getExtensionNamespace();
    }
    return ns ? ns["ChromeDbgExt"] : null;
}
function getDebugListener(config) {
    if (!_debugListener) {
        _debugListener = {};
        for (var lp = 0; lp < listenerFuncs.length; lp++) {
            _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);
        }
    }
    return _debugListener;
}
//# sourceMappingURL=DbgExtensionUtils.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DiagnosticLogger": () => (/* binding */ DiagnosticLogger),
/* harmony export */   "_InternalLogMessage": () => (/* binding */ _InternalLogMessage),
/* harmony export */   "safeGetLogger": () => (/* binding */ safeGetLogger)
/* harmony export */ });
/* harmony import */ var _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../JavaScriptSDK.Enums/LoggingEnums */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _EnvUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EnvUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _DbgExtensionUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DbgExtensionUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */








/**
 * For user non actionable traces use AI Internal prefix.
 */
var AiNonUserActionablePrefix = "AI (Internal): ";
/**
 * Prefix of the traces in portal.
 */
var AiUserActionablePrefix = "AI: ";
/**
 *  Session storage key for the prefix for the key indicating message type already logged
 */
var AIInternalMessagePrefix = "AITR_";
var strErrorToConsole = "errorToConsole";
var strWarnToConsole = "warnToConsole";
function _sanitizeDiagnosticText(text) {
    if (text) {
        return "\"" + text.replace(/\"/g, "") + "\"";
    }
    return "";
}
function _logToConsole(func, message) {
    var theConsole = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.getConsole)();
    if (!!theConsole) {
        var logFunc = "log";
        if (theConsole[func]) {
            logFunc = func;
        }
        if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isFunction)(theConsole[logFunc])) {
            theConsole[logFunc](message);
        }
    }
}
var _InternalLogMessage = /** @class */ (function () {
    function _InternalLogMessage(msgId, msg, isUserAct, properties) {
        if (isUserAct === void 0) { isUserAct = false; }
        var _self = this;
        _self.messageId = msgId;
        _self.message =
            (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) +
                msgId;
        var strProps = "";
        if ((0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.hasJSON)()) {
            strProps = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_0__.getJSON)().stringify(properties);
        }
        var diagnosticText = (msg ? " message:" + _sanitizeDiagnosticText(msg) : "") +
            (properties ? " props:" + _sanitizeDiagnosticText(strProps) : "");
        _self.message += diagnosticText;
    }
    _InternalLogMessage.dataType = "MessageData";
    return _InternalLogMessage;
}());

function safeGetLogger(core, config) {
    return (core || {}).logger || new DiagnosticLogger(config);
}
var DiagnosticLogger = /** @class */ (function () {
    function DiagnosticLogger(config) {
        this.identifier = "DiagnosticLogger";
        /**
         * The internal logging queue
         */
        this.queue = [];
        /**
         * Count of internal messages sent
         */
        var _messageCount = 0;
        /**
         * Holds information about what message types were already logged to console or sent to server.
         */
        var _messageLogged = {};
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__["default"])(DiagnosticLogger, this, function (_self) {
            if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(config)) {
                config = {};
            }
            _self.consoleLoggingLevel = function () { return _getConfigValue("loggingLevelConsole", 0); };
            _self.telemetryLoggingLevel = function () { return _getConfigValue("loggingLevelTelemetry", 1); };
            _self.maxInternalMessageLimit = function () { return _getConfigValue("maxMessageLimit", 25); };
            _self.enableDebugExceptions = function () { return _getConfigValue("enableDebugExceptions", false); };
            /**
             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.
             * @param severity {LoggingSeverity} - The severity of the log message
             * @param message {_InternalLogMessage} - The log message.
             */
            _self.throwInternal = function (severity, msgId, msg, properties, isUserAct) {
                if (isUserAct === void 0) { isUserAct = false; }
                var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);
                if (_self.enableDebugExceptions()) {
                    throw message;
                }
                else {
                    // Get the logging function and fallback to warnToConsole of for some reason errorToConsole doesn't exist
                    var logFunc = severity === _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity.CRITICAL ? strErrorToConsole : strWarnToConsole;
                    if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(message.message)) {
                        var logLevel = _self.consoleLoggingLevel();
                        if (isUserAct) {
                            // check if this message type was already logged to console for this page view and if so, don't log it again
                            var messageKey = +message.messageId;
                            if (!_messageLogged[messageKey] && logLevel >= severity) {
                                _self[logFunc](message.message);
                                _messageLogged[messageKey] = true;
                            }
                        }
                        else {
                            // Only log traces if the console Logging Level is >= the throwInternal severity level
                            if (logLevel >= severity) {
                                _self[logFunc](message.message);
                            }
                        }
                        _self.logInternalMessage(severity, message);
                    }
                    else {
                        _debugExtMsg("throw" + (severity === _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity.CRITICAL ? "Critical" : "Warning"), message);
                    }
                }
            };
            /**
             * This will write a warning to the console if possible
             * @param message {string} - The warning message
             */
            _self.warnToConsole = function (message) {
                _logToConsole("warn", message);
                _debugExtMsg("warning", message);
            };
            /**
             * This will write an error to the console if possible
             * @param message {string} - The error message
             */
            _self.errorToConsole = function (message) {
                _logToConsole("error", message);
                _debugExtMsg("error", message);
            };
            /**
             * Resets the internal message count
             */
            _self.resetInternalMessageCount = function () {
                _messageCount = 0;
                _messageLogged = {};
            };
            /**
             * Logs a message to the internal queue.
             * @param severity {LoggingSeverity} - The severity of the log message
             * @param message {_InternalLogMessage} - The message to log.
             */
            _self.logInternalMessage = function (severity, message) {
                if (_areInternalMessagesThrottled()) {
                    return;
                }
                // check if this message type was already logged for this session and if so, don't log it again
                var logMessage = true;
                var messageKey = AIInternalMessagePrefix + message.messageId;
                // if the session storage is not available, limit to only one message type per page view
                if (_messageLogged[messageKey]) {
                    logMessage = false;
                }
                else {
                    _messageLogged[messageKey] = true;
                }
                if (logMessage) {
                    // Push the event in the internal queue
                    if (severity <= _self.telemetryLoggingLevel()) {
                        _self.queue.push(message);
                        _messageCount++;
                        _debugExtMsg((severity === _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity.CRITICAL ? "error" : "warn"), message);
                    }
                    // When throttle limit reached, send a special event
                    if (_messageCount === _self.maxInternalMessageLimit()) {
                        var throttleLimitMessage = "Internal events throttle limit per PageView reached for this app.";
                        var throttleMessage = new _InternalLogMessage(_JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_3__._InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);
                        _self.queue.push(throttleMessage);
                        if (severity === _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity.CRITICAL) {
                            _self.errorToConsole(throttleLimitMessage);
                        }
                        else {
                            _self.warnToConsole(throttleLimitMessage);
                        }
                    }
                }
            };
            function _getConfigValue(name, defValue) {
                var value = config[name];
                if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(value)) {
                    return value;
                }
                return defValue;
            }
            function _areInternalMessagesThrottled() {
                return _messageCount >= _self.maxInternalMessageLimit();
            }
            function _debugExtMsg(name, data) {
                var dbgExt = (0,_DbgExtensionUtils__WEBPACK_IMPORTED_MODULE_4__.getDebugExt)(config);
                if (dbgExt && dbgExt.diagLog) {
                    dbgExt.diagLog(name, data);
                }
            }
        });
    }
// Removed Stub for DiagnosticLogger.prototype.enableDebugExceptions.
// Removed Stub for DiagnosticLogger.prototype.consoleLoggingLevel.
// Removed Stub for DiagnosticLogger.prototype.telemetryLoggingLevel.
// Removed Stub for DiagnosticLogger.prototype.maxInternalMessageLimit.
// Removed Stub for DiagnosticLogger.prototype.throwInternal.
// Removed Stub for DiagnosticLogger.prototype.warnToConsole.
// Removed Stub for DiagnosticLogger.prototype.errorToConsole.
// Removed Stub for DiagnosticLogger.prototype.resetInternalMessageCount.
// Removed Stub for DiagnosticLogger.prototype.logInternalMessage.
    return DiagnosticLogger;
}());

//# sourceMappingURL=DiagnosticLogger.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dumpObj": () => (/* binding */ dumpObj),
/* harmony export */   "getConsole": () => (/* binding */ getConsole),
/* harmony export */   "getCrypto": () => (/* binding */ getCrypto),
/* harmony export */   "getDocument": () => (/* binding */ getDocument),
/* harmony export */   "getGlobalInst": () => (/* binding */ getGlobalInst),
/* harmony export */   "getHistory": () => (/* binding */ getHistory),
/* harmony export */   "getIEVersion": () => (/* binding */ getIEVersion),
/* harmony export */   "getJSON": () => (/* binding */ getJSON),
/* harmony export */   "getLocation": () => (/* binding */ getLocation),
/* harmony export */   "getMsCrypto": () => (/* binding */ getMsCrypto),
/* harmony export */   "getNavigator": () => (/* binding */ getNavigator),
/* harmony export */   "getPerformance": () => (/* binding */ getPerformance),
/* harmony export */   "getWindow": () => (/* binding */ getWindow),
/* harmony export */   "hasDocument": () => (/* binding */ hasDocument),
/* harmony export */   "hasHistory": () => (/* binding */ hasHistory),
/* harmony export */   "hasJSON": () => (/* binding */ hasJSON),
/* harmony export */   "hasNavigator": () => (/* binding */ hasNavigator),
/* harmony export */   "hasWindow": () => (/* binding */ hasWindow),
/* harmony export */   "isBeaconsSupported": () => (/* binding */ isBeaconsSupported),
/* harmony export */   "isFetchSupported": () => (/* binding */ isFetchSupported),
/* harmony export */   "isIE": () => (/* binding */ isIE),
/* harmony export */   "isReactNative": () => (/* binding */ isReactNative),
/* harmony export */   "isSafari": () => (/* binding */ isSafari),
/* harmony export */   "isXhrSupported": () => (/* binding */ isXhrSupported),
/* harmony export */   "setEnableEnvMocks": () => (/* binding */ setEnableEnvMocks),
/* harmony export */   "useXDomainRequest": () => (/* binding */ useXDomainRequest)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





/**
 * This file exists to hold environment utilities that are required to check and
 * validate the current operating environment. Unless otherwise required, please
 * only use defined methods (functions) in this class so that users of these
 * functions/properties only need to include those that are used within their own modules.
 */
var strWindow = "window";
var strDocument = "document";
var strDocumentMode = "documentMode";
var strNavigator = "navigator";
var strHistory = "history";
var strLocation = "location";
var strConsole = "console";
var strPerformance = "performance";
var strJSON = "JSON";
var strCrypto = "crypto";
var strMsCrypto = "msCrypto";
var strReactNative = "ReactNative";
var strMsie = "msie";
var strTrident = "trident/";
var _isTrident = null;
var _navUserAgentCheck = null;
var _enableMocks = false;
var _useXDomainRequest = null;
var _beaconsSupported = null;
function _hasProperty(theClass, property) {
    var supported = false;
    if (theClass) {
        try {
            supported = property in theClass;
            if (!supported) {
                var proto = theClass[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimPrototype];
                if (proto) {
                    supported = property in proto;
                }
            }
        }
        catch (e) {
            // Do Nothing
        }
        if (!supported) {
            try {
                var tmp = new theClass();
                supported = !(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(tmp[property]);
            }
            catch (e) {
                // Do Nothing
            }
        }
    }
    return supported;
}
/**
 * Enable the lookup of test mock objects if requested
 * @param enabled
 */
function setEnableEnvMocks(enabled) {
    _enableMocks = enabled;
}
/**
 * Return the named global object if available, will return null if the object is not available.
 * @param name The globally named object
 */
function getGlobalInst(name) {
    var gbl = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
    if (gbl && gbl[name]) {
        return gbl[name];
    }
    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window
    if (name === strWindow && hasWindow()) {
        // tslint:disable-next-line: no-angle-bracket-type-assertion
        return window;
    }
    return null;
}
/**
 * Checks if window object is available, this is required as we support the API running without a
 * window /document (eg. Node server, electron webworkers) and if we attempt to assign a window
 * object to a local variable or pass as an argument an "Uncaught ReferenceError: window is not defined"
 * exception will be thrown.
 * Defined as a function to support lazy / late binding environments.
 */
function hasWindow() {
    return Boolean(typeof window === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject && window);
}
/**
 * Returns the global window object if it is present otherwise null.
 * This helper is used to access the window object without causing an exception
 * "Uncaught ReferenceError: window is not defined"
 */
function getWindow() {
    if (hasWindow()) {
        return window;
    }
    // Return the global instance or null
    return getGlobalInst(strWindow);
}
/**
 * Checks if document object is available, this is required as we support the API running without a
 * window /document (eg. Node server, electron webworkers) and if we attempt to assign a document
 * object to a local variable or pass as an argument an "Uncaught ReferenceError: document is not defined"
 * exception will be thrown.
 * Defined as a function to support lazy / late binding environments.
 */
function hasDocument() {
    return Boolean(typeof document === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject && document);
}
/**
 * Returns the global document object if it is present otherwise null.
 * This helper is used to access the document object without causing an exception
 * "Uncaught ReferenceError: document is not defined"
 */
function getDocument() {
    if (hasDocument()) {
        return document;
    }
    return getGlobalInst(strDocument);
}
/**
 * Checks if navigator object is available, this is required as we support the API running without a
 * window /document (eg. Node server, electron webworkers) and if we attempt to assign a navigator
 * object to a local variable or pass as an argument an "Uncaught ReferenceError: navigator is not defined"
 * exception will be thrown.
 * Defined as a function to support lazy / late binding environments.
 */
function hasNavigator() {
    return Boolean(typeof navigator === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject && navigator);
}
/**
 * Returns the global navigator object if it is present otherwise null.
 * This helper is used to access the navigator object without causing an exception
 * "Uncaught ReferenceError: navigator is not defined"
 */
function getNavigator() {
    if (hasNavigator()) {
        return navigator;
    }
    return getGlobalInst(strNavigator);
}
/**
 * Checks if history object is available, this is required as we support the API running without a
 * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history
 * object to a local variable or pass as an argument an "Uncaught ReferenceError: history is not defined"
 * exception will be thrown.
 * Defined as a function to support lazy / late binding environments.
 */
function hasHistory() {
    return Boolean(typeof history === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject && history);
}
/**
 * Returns the global history object if it is present otherwise null.
 * This helper is used to access the history object without causing an exception
 * "Uncaught ReferenceError: history is not defined"
 */
function getHistory() {
    if (hasHistory()) {
        return history;
    }
    return getGlobalInst(strHistory);
}
/**
 * Returns the global location object if it is present otherwise null.
 * This helper is used to access the location object without causing an exception
 * "Uncaught ReferenceError: location is not defined"
 */
function getLocation(checkForMock) {
    if (checkForMock && _enableMocks) {
        var mockLocation = getGlobalInst("__mockLocation");
        if (mockLocation) {
            return mockLocation;
        }
    }
    if (typeof location === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject && location) {
        return location;
    }
    return getGlobalInst(strLocation);
}
/**
 * Returns the global console object
 */
function getConsole() {
    if (typeof console !== _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined) {
        return console;
    }
    return getGlobalInst(strConsole);
}
/**
 * Returns the performance object if it is present otherwise null.
 * This helper is used to access the performance object from the current
 * global instance which could be window or globalThis for a web worker
 */
function getPerformance() {
    return getGlobalInst(strPerformance);
}
/**
 * Checks if JSON object is available, this is required as we support the API running without a
 * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history
 * object to a local variable or pass as an argument an "Uncaught ReferenceError: JSON is not defined"
 * exception will be thrown.
 * Defined as a function to support lazy / late binding environments.
 */
function hasJSON() {
    return Boolean((typeof JSON === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject && JSON) || getGlobalInst(strJSON) !== null);
}
/**
 * Returns the global JSON object if it is present otherwise null.
 * This helper is used to access the JSON object without causing an exception
 * "Uncaught ReferenceError: JSON is not defined"
 */
function getJSON() {
    if (hasJSON()) {
        return JSON || getGlobalInst(strJSON);
    }
    return null;
}
/**
 * Returns the crypto object if it is present otherwise null.
 * This helper is used to access the crypto object from the current
 * global instance which could be window or globalThis for a web worker
 */
function getCrypto() {
    return getGlobalInst(strCrypto);
}
/**
 * Returns the crypto object if it is present otherwise null.
 * This helper is used to access the crypto object from the current
 * global instance which could be window or globalThis for a web worker
 */
function getMsCrypto() {
    return getGlobalInst(strMsCrypto);
}
/**
 * Returns whether the environment is reporting that we are running in a React Native Environment
 */
function isReactNative() {
    // If running in React Native, navigator.product will be populated
    var nav = getNavigator();
    if (nav && nav.product) {
        return nav.product === strReactNative;
    }
    return false;
}
/**
 * Identifies whether the current environment appears to be IE
 */
function isIE() {
    var nav = getNavigator();
    if (nav && (nav.userAgent !== _navUserAgentCheck || _isTrident === null)) {
        // Added to support test mocking of the user agent
        _navUserAgentCheck = nav.userAgent;
        var userAgent = (_navUserAgentCheck || "").toLowerCase();
        _isTrident = ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, strMsie) || (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(userAgent, strTrident));
    }
    return _isTrident;
}
/**
 * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise
 */
function getIEVersion(userAgentStr) {
    if (userAgentStr === void 0) { userAgentStr = null; }
    if (!userAgentStr) {
        var navigator_1 = getNavigator() || {};
        userAgentStr = navigator_1 ? (navigator_1.userAgent || "").toLowerCase() : "";
    }
    var ua = (userAgentStr || "").toLowerCase();
    // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.
    if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(ua, strMsie)) {
        var doc = getDocument() || {};
        return Math.max(parseInt(ua.split(strMsie)[1]), (doc[strDocumentMode] || 0));
    }
    else if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.strContains)(ua, strTrident)) {
        var tridentVer = parseInt(ua.split(strTrident)[1]);
        if (tridentVer) {
            return tridentVer + 4;
        }
    }
    return null;
}
/**
 * Returns string representation of an object suitable for diagnostics logging.
 */
function dumpObj(object) {
    var objectTypeDump = Object[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimPrototype].toString.call(object);
    var propertyValueDump = "";
    if (objectTypeDump === "[object Error]") {
        propertyValueDump = "{ stack: '" + object.stack + "', message: '" + object.message + "', name: '" + object.name + "'";
    }
    else if (hasJSON()) {
        propertyValueDump = getJSON().stringify(object);
    }
    return objectTypeDump + propertyValueDump;
}
function isSafari(userAgentStr) {
    if (!userAgentStr || !(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.isString)(userAgentStr)) {
        var navigator_2 = getNavigator() || {};
        userAgentStr = navigator_2 ? (navigator_2.userAgent || "").toLowerCase() : "";
    }
    var ua = (userAgentStr || "").toLowerCase();
    return (ua.indexOf("safari") >= 0);
}
/**
 * Checks if HTML5 Beacons are supported in the current environment.
 * @returns True if supported, false otherwise.
 */
function isBeaconsSupported() {
    if (_beaconsSupported === null) {
        _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);
    }
    return _beaconsSupported;
}
/**
 * Checks if the Fetch API is supported in the current environment.
 * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported
 * @returns True if supported, otherwise false
 */
function isFetchSupported(withKeepAlive) {
    var isSupported = false;
    try {
        var fetchApi = getGlobalInst("fetch");
        isSupported = !!fetchApi;
        var request = getGlobalInst("Request");
        if (isSupported && withKeepAlive && request) {
            isSupported = _hasProperty(request, "keepalive");
        }
    }
    catch (e) {
        // Just Swallow any failure during availability checks
    }
    return isSupported;
}
function useXDomainRequest() {
    if (_useXDomainRequest === null) {
        _useXDomainRequest = (typeof XDomainRequest !== "undefined");
        if (_useXDomainRequest && isXhrSupported()) {
            _useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst("XMLHttpRequest"), "withCredentials");
        }
    }
    return _useXDomainRequest;
}
/**
 * Checks if XMLHttpRequest is supported
 * @returns True if supported, otherwise false
 */
function isXhrSupported() {
    var isSupported = false;
    try {
        var xmlHttpRequest = getGlobalInst("XMLHttpRequest");
        isSupported = !!xmlHttpRequest;
    }
    catch (e) {
        // Just Swallow any failure during availability checks
    }
    return isSupported;
}
//# sourceMappingURL=EnvUtils.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_getObjProto": () => (/* binding */ _getObjProto),
/* harmony export */   "_strEndsWithPoly": () => (/* binding */ _strEndsWithPoly),
/* harmony export */   "_strStartsWithPoly": () => (/* binding */ _strStartsWithPoly),
/* harmony export */   "_toISOStringPoly": () => (/* binding */ _toISOStringPoly),
/* harmony export */   "arrForEach": () => (/* binding */ arrForEach),
/* harmony export */   "arrIndexOf": () => (/* binding */ arrIndexOf),
/* harmony export */   "arrMap": () => (/* binding */ arrMap),
/* harmony export */   "arrReduce": () => (/* binding */ arrReduce),
/* harmony export */   "attachEvent": () => (/* binding */ attachEvent),
/* harmony export */   "createClassFromInterface": () => (/* binding */ createClassFromInterface),
/* harmony export */   "dateNow": () => (/* binding */ dateNow),
/* harmony export */   "detachEvent": () => (/* binding */ detachEvent),
/* harmony export */   "getExceptionName": () => (/* binding */ getExceptionName),
/* harmony export */   "getSetValue": () => (/* binding */ getSetValue),
/* harmony export */   "hasOwnProperty": () => (/* binding */ hasOwnProperty),
/* harmony export */   "isArray": () => (/* binding */ isArray),
/* harmony export */   "isBoolean": () => (/* binding */ isBoolean),
/* harmony export */   "isDate": () => (/* binding */ isDate),
/* harmony export */   "isError": () => (/* binding */ isError),
/* harmony export */   "isFunction": () => (/* binding */ isFunction),
/* harmony export */   "isNotNullOrUndefined": () => (/* binding */ isNotNullOrUndefined),
/* harmony export */   "isNotTruthy": () => (/* binding */ isNotTruthy),
/* harmony export */   "isNotUndefined": () => (/* binding */ isNotUndefined),
/* harmony export */   "isNullOrUndefined": () => (/* binding */ isNullOrUndefined),
/* harmony export */   "isNumber": () => (/* binding */ isNumber),
/* harmony export */   "isObject": () => (/* binding */ isObject),
/* harmony export */   "isPlainObject": () => (/* binding */ isPlainObject),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "isSymbol": () => (/* binding */ isSymbol),
/* harmony export */   "isTruthy": () => (/* binding */ isTruthy),
/* harmony export */   "isTypeof": () => (/* binding */ isTypeof),
/* harmony export */   "isUndefined": () => (/* binding */ isUndefined),
/* harmony export */   "normalizeJsName": () => (/* binding */ normalizeJsName),
/* harmony export */   "objDefineAccessors": () => (/* binding */ objDefineAccessors),
/* harmony export */   "objExtend": () => (/* binding */ objExtend),
/* harmony export */   "objForEachKey": () => (/* binding */ objForEachKey),
/* harmony export */   "objFreeze": () => (/* binding */ objFreeze),
/* harmony export */   "objKeys": () => (/* binding */ objKeys),
/* harmony export */   "objSeal": () => (/* binding */ objSeal),
/* harmony export */   "objToString": () => (/* binding */ objToString),
/* harmony export */   "optimizeObject": () => (/* binding */ optimizeObject),
/* harmony export */   "proxyAssign": () => (/* binding */ proxyAssign),
/* harmony export */   "setValue": () => (/* binding */ setValue),
/* harmony export */   "strContains": () => (/* binding */ strContains),
/* harmony export */   "strEndsWith": () => (/* binding */ strEndsWith),
/* harmony export */   "strStartsWith": () => (/* binding */ strStartsWith),
/* harmony export */   "strTrim": () => (/* binding */ strTrim),
/* harmony export */   "throwError": () => (/* binding */ throwError),
/* harmony export */   "toISOString": () => (/* binding */ toISOString)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



// RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly
// Added to help with minfication
var strOnPrefix = "on";
var strAttachEvent = "attachEvent";
var strAddEventHelper = "addEventListener";
var strDetachEvent = "detachEvent";
var strRemoveEventListener = "removeEventListener";
var strToISOString = "toISOString";
var cStrEndsWith = "endsWith";
var cStrStartsWith = "startsWith";
var strIndexOf = "indexOf";
var strMap = "map";
var strReduce = "reduce";
var cStrTrim = "trim";
var strToString = "toString";
/**
 * Constant string defined to support minimization
 * @ignore
 */
var str__Proto = "__proto__";
/**
 * Constant string defined to support minimization
 * @ignore
 */
var strConstructor = "constructor";
var _objDefineProperty = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjDefineProperty;
var _objFreeze = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjClass.freeze;
var _objSeal = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjClass.seal;
var _objKeys = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjClass.keys;
var StringProto = String[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimPrototype];
var _strTrim = StringProto[cStrTrim];
var _strEndsWith = StringProto[cStrEndsWith];
var _strStartsWith = StringProto[cStrStartsWith];
var DateProto = Date[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimPrototype];
var _dataToISOString = DateProto[strToISOString];
var _isArray = Array.isArray;
var _objToString = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjProto[strToString];
var _fnToString = _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty[strToString];
// Cache what this browser reports as the object function constructor (as a string)
var _objFunctionString = _fnToString.call(_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjClass);
var rCamelCase = /-([a-z])/g;
var rNormalizeInvalid = /([^\w\d_$])/g;
var rLeadingNumeric = /^(\d+[\w\d_$])/;
/**
 * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)
 * @ignore
 */
var _objGetPrototypeOf = Object["getPrototypeOf"];
/**
 * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.
 * @ignore
 */
function _getObjProto(target) {
    if (target) {
        // This method doesn't existing in older browsers (e.g. IE8)
        if (_objGetPrototypeOf) {
            return _objGetPrototypeOf(target);
        }
        // target[Constructor] May break if the constructor has been changed or removed
        var newProto = target[str__Proto] || target[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimPrototype] || target[strConstructor];
        if (newProto) {
            return newProto;
        }
    }
    return null;
}
function objToString(obj) {
    return _objToString.call(obj);
}
function isTypeof(value, theType) {
    return typeof value === theType;
}
function isUndefined(value) {
    return value === undefined || typeof value === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined;
}
function isNotUndefined(value) {
    return !isUndefined(value);
}
function isNullOrUndefined(value) {
    return (value === null || isUndefined(value));
}
function isNotNullOrUndefined(value) {
    return !isNullOrUndefined(value);
}
function hasOwnProperty(obj, prop) {
    return !!(obj && _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty.call(obj, prop));
}
function isObject(value) {
    // Changing to inline for performance
    return !!(value && typeof value === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject);
}
function isFunction(value) {
    // Changing to inline for performance
    return !!(value && typeof value === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimFunction);
}
/**
 * Binds the specified function to an event, so that the function gets called whenever the event fires on the object
 * @param obj Object to add the event too.
 * @param eventNameWithoutOn String that specifies any of the standard DHTML Events without "on" prefix
 * @param handlerRef Pointer that specifies the function to call when event fires
 * @param useCapture [Optional] Defaults to false
 * @returns True if the function was bound successfully to the event, otherwise false
 */
function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {
    if (useCapture === void 0) { useCapture = false; }
    var result = false;
    if (!isNullOrUndefined(obj)) {
        try {
            if (!isNullOrUndefined(obj[strAddEventHelper])) {
                // all browsers except IE before version 9
                obj[strAddEventHelper](eventNameWithoutOn, handlerRef, useCapture);
                result = true;
            }
            else if (!isNullOrUndefined(obj[strAttachEvent])) {
                // IE before version 9
                obj[strAttachEvent](strOnPrefix + eventNameWithoutOn, handlerRef);
                result = true;
            }
        }
        catch (e) {
            // Just Ignore any error so that we don't break any execution path
        }
    }
    return result;
}
/**
 * Removes an event handler for the specified event
 * @param Object to remove the event from
 * @param eventNameWithoutOn {string} - The name of the event
 * @param handlerRef {any} - The callback function that needs to be executed for the given event
 * @param useCapture [Optional] Defaults to false
 */
function detachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {
    if (useCapture === void 0) { useCapture = false; }
    if (!isNullOrUndefined(obj)) {
        try {
            if (!isNullOrUndefined(obj[strRemoveEventListener])) {
                obj[strRemoveEventListener](eventNameWithoutOn, handlerRef, useCapture);
            }
            else if (!isNullOrUndefined(obj[strDetachEvent])) {
                obj[strDetachEvent](strOnPrefix + eventNameWithoutOn, handlerRef);
            }
        }
        catch (e) {
            // Just Ignore any error so that we don't break any execution path
        }
    }
}
/**
 * Validates that the string name conforms to the JS IdentifierName specification and if not
 * normalizes the name so that it would. This method does not identify or change any keywords
 * meaning that if you pass in a known keyword the same value will be returned.
 * This is a simplified version
 * @param name The name to validate
 */
function normalizeJsName(name) {
    var value = name;
    if (value && isString(value)) {
        // CamelCase everything after the "-" and remove the dash
        value = value.replace(rCamelCase, function (_all, letter) {
            return letter.toUpperCase();
        });
        value = value.replace(rNormalizeInvalid, "_");
        value = value.replace(rLeadingNumeric, function (_all, match) {
            return "_" + match;
        });
    }
    return value;
}
/**
 * This is a helper function for the equivalent of arForEach(objKeys(target), callbackFn), this is a
 * performance optimization to avoid the creation of a new array for large objects
 * @param target The target object to find and process the keys
 * @param callbackfn The function to call with the details
 */
function objForEachKey(target, callbackfn) {
    if (target) {
        for (var prop in target) {
            if (_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty.call(target, prop)) {
                callbackfn.call(target, prop, target[prop]);
            }
        }
    }
}
/**
 * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.
 * @param value - The value to check whether it ends with the search value.
 * @param search - The characters to be searched for at the end of the value.
 * @returns true if the given search value is found at the end of the string, otherwise false.
 */
function strEndsWith(value, search) {
    var result = false;
    if (value && search && !(result = value === search)) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        result = _strEndsWith ? value[cStrEndsWith](search) : _strEndsWithPoly(value, search);
    }
    return result;
}
/**
 * The _strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.
 * @param value - The value to check whether it ends with the search value.
 * @param search - The characters to be searched for at the end of the value.
 * @returns true if the given search value is found at the end of the string, otherwise false.
 */
function _strEndsWithPoly(value, search) {
    var result = false;
    var searchLen = search ? search.length : 0;
    var valLen = value ? value.length : 0;
    if (searchLen && valLen && valLen >= searchLen && !(result = value === search)) {
        var pos = valLen - 1;
        for (var lp = searchLen - 1; lp >= 0; lp--) {
            if (value[pos] != search[lp]) {
                return false;
            }
            pos--;
        }
        result = true;
    }
    return result;
}
/**
 * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.
 * @param value - The value to check whether it ends with the search value.
 * @param checkValue - The characters to be searched for at the start of the value.
 * @returns true if the given search value is found at the start of the string, otherwise false.
 */
function strStartsWith(value, checkValue) {
    var result = false;
    if (value && checkValue && !(result = value === checkValue)) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        result = _strStartsWith ? value[cStrStartsWith](checkValue) : _strStartsWithPoly(value, checkValue);
    }
    return result;
}
/**
 * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.
 * @param value - The value to check whether it ends with the search value.
 * @param checkValue - The characters to be searched for at the start of the value.
 * @returns true if the given search value is found at the start of the string, otherwise false.
 */
function _strStartsWithPoly(value, checkValue) {
    // Using helper for performance and because string startsWith() is not available on IE
    var result = false;
    var chkLen = checkValue ? checkValue.length : 0;
    if (value && chkLen && value.length >= chkLen && !(result = value === checkValue)) {
        for (var lp = 0; lp < chkLen; lp++) {
            if (value[lp] !== checkValue[lp]) {
                return false;
            }
        }
        result = true;
    }
    return result;
}
/**
 * A simple wrapper (for minification support) to check if the value contains the search string.
 * @param value - The string value to check for the existence of the search value
 * @param search - The value search within the value
 */
function strContains(value, search) {
    if (value && search) {
        return value.indexOf(search) !== -1;
    }
    return false;
}
/**
 * Check if an object is of type Date
 */
function isDate(obj) {
    return !!(obj && _objToString.call(obj) === "[object Date]");
}
/**
 * Check if an object is of type Array
 */
var isArray = _isArray || _isArrayPoly;
function _isArrayPoly(obj) {
    return !!(obj && _objToString.call(obj) === "[object Array]");
}
/**
 * Check if an object is of type Error
 */
function isError(obj) {
    return !!(obj && _objToString.call(obj) === "[object Error]");
}
/**
 * Checks if the type of value is a string.
 * @param {any} value - Value to be checked.
 * @return {boolean} True if the value is a string, false otherwise.
 */
function isString(value) {
    // Changing to inline for performance
    return typeof value === "string";
}
/**
 * Checks if the type of value is a number.
 * @param {any} value - Value to be checked.
 * @return {boolean} True if the value is a number, false otherwise.
 */
function isNumber(value) {
    // Changing to inline for performance
    return typeof value === "number";
}
/**
 * Checks if the type of value is a boolean.
 * @param {any} value - Value to be checked.
 * @return {boolean} True if the value is a boolean, false otherwise.
 */
function isBoolean(value) {
    // Changing to inline for performance
    return typeof value === "boolean";
}
/**
 * Checks if the type of value is a Symbol.
 * This only returns a boolean as returning value is Symbol will cause issues for older TypeScript consumers
 * @param {any} value - Value to be checked.
 * @return {boolean} True if the value is a Symbol, false otherwise.
 */
function isSymbol(value) {
    return typeof value === "symbol";
}
/**
 * Checks if the type of the value is a normal plain object (not a null or data)
 * @param value
 */
function isPlainObject(value) {
    var result = false;
    if (value && typeof value === "object") {
        // Inlining _objGetPrototypeOf for performance to avoid an additional function call
        var proto = _objGetPrototypeOf ? _objGetPrototypeOf(value) : _getObjProto(value);
        if (!proto) {
            // No prototype found so this is a plain Object eg. 'Object.create(null)'
            result = true;
        }
        else {
            // Objects that have a prototype are plain only if they were created using the Object global (native) function
            if (proto[strConstructor] && _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty.call(proto, strConstructor)) {
                proto = proto[strConstructor];
            }
            result = typeof proto === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimFunction && _fnToString.call(proto) === _objFunctionString;
        }
    }
    return result;
}
/**
 * Convert a date to I.S.O. format in IE8
 */
function toISOString(date) {
    if (date) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        return _dataToISOString ? date[strToISOString]() : _toISOStringPoly(date);
    }
}
/**
 * Convert a date to I.S.O. format in IE8
 */
function _toISOStringPoly(date) {
    if (date && date.getUTCFullYear) {
        var pad = function (num) {
            var r = String(num);
            if (r.length === 1) {
                r = "0" + r;
            }
            return r;
        };
        return date.getUTCFullYear()
            + "-" + pad(date.getUTCMonth() + 1)
            + "-" + pad(date.getUTCDate())
            + "T" + pad(date.getUTCHours())
            + ":" + pad(date.getUTCMinutes())
            + ":" + pad(date.getUTCSeconds())
            + "." + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
            + "Z";
    }
}
/**
 * Performs the specified action for each element in an array. This helper exists to avoid adding a polyfil for older browsers
 * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype
 * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would
 * cause a testing requirement to test with and without the implementations
 * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. It can return -1 to break out of the loop
 * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
 */
function arrForEach(arr, callbackfn, thisArg) {
    var len = arr.length;
    try {
        for (var idx = 0; idx < len; idx++) {
            if (idx in arr) {
                if (callbackfn.call(thisArg || arr, arr[idx], idx, arr) === -1) {
                    break;
                }
            }
        }
    }
    catch (e) {
        // This can happen with some native browser objects, but should not happen for the type we are checking for
    }
}
/**
 * Returns the index of the first occurrence of a value in an array. This helper exists to avoid adding a polyfil for older browsers
 * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype
 * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would
 * cause a testing requirement to test with and without the implementations
 * @param searchElement The value to locate in the array.
 * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
 */
function arrIndexOf(arr, searchElement, fromIndex) {
    if (arr) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        if (arr[strIndexOf]) {
            return arr[strIndexOf](searchElement, fromIndex);
        }
        var len = arr.length;
        var from = fromIndex || 0;
        try {
            for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) {
                if (lp in arr && arr[lp] === searchElement) {
                    return lp;
                }
            }
        }
        catch (e) {
            // This can happen with some native browser objects, but should not happen for the type we are checking for
        }
    }
    return -1;
}
/**
 * Calls a defined callback function on each element of an array, and returns an array that contains the results. This helper exists
 * to avoid adding a polyfil for older browsers that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page
 * checks for presence/absence of the prototype implementation. Note: For consistency this will not use the Array.prototype.xxxx
 * implementation if it exists as this would cause a testing requirement to test with and without the implementations
 * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
 * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
 */
function arrMap(arr, callbackfn, thisArg) {
    var results;
    if (arr) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        if (arr[strMap]) {
            return arr[strMap](callbackfn, thisArg);
        }
        var len = arr.length;
        var _this = thisArg || arr;
        results = new Array(len);
        try {
            for (var lp = 0; lp < len; lp++) {
                if (lp in arr) {
                    results[lp] = callbackfn.call(_this, arr[lp], arr);
                }
            }
        }
        catch (e) {
            // This can happen with some native browser objects, but should not happen for the type we are checking for
        }
    }
    return results;
}
/**
 * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is
 * provided as an argument in the next call to the callback function. This helper exists to avoid adding a polyfil for older browsers that do not define
 * Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype implementation. Note: For consistency
 * this will not use the Array.prototype.xxxx implementation if it exists as this would cause a testing requirement to test with and without the implementations
 * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
 * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
 */
function arrReduce(arr, callbackfn, initialValue) {
    var value;
    if (arr) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        if (arr[strReduce]) {
            return arr[strReduce](callbackfn, initialValue);
        }
        var len = arr.length;
        var lp = 0;
        // Specifically checking the number of passed arguments as the value could be anything
        if (arguments.length >= 3) {
            value = arguments[2];
        }
        else {
            while (lp < len && !(lp in arr)) {
                lp++;
            }
            value = arr[lp++];
        }
        while (lp < len) {
            if (lp in arr) {
                value = callbackfn(value, arr[lp], lp, arr);
            }
            lp++;
        }
    }
    return value;
}
/**
 * helper method to trim strings (IE8 does not implement String.prototype.trim)
 */
function strTrim(str) {
    if (str) {
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        str = (_strTrim && str[cStrTrim]) ? str[cStrTrim]() : (str.replace ? str.replace(/^\s+|\s+$/g, "") : str);
    }
    return str;
}
var _objKeysHasDontEnumBug = !({ toString: null }).propertyIsEnumerable("toString");
var _objKeysDontEnums = [
    "toString",
    "toLocaleString",
    "valueOf",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "constructor"
];
/**
 * Returns the names of the enumerable string properties and methods of an object. This helper exists to avoid adding a polyfil for older browsers
 * that do not define Object.keys eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.
 * Note: For consistency this will not use the Object.keys implementation if it exists as this would cause a testing requirement to test with and without the implementations
 * @param obj Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
 */
function objKeys(obj) {
    var objType = typeof obj;
    if (objType !== _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimFunction && (objType !== _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.strShimObject || obj === null)) {
        (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.throwTypeError)("objKeys called on non-object");
    }
    // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
    if (!_objKeysHasDontEnumBug && _objKeys) {
        return _objKeys(obj);
    }
    var result = [];
    for (var prop in obj) {
        if (obj && _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty.call(obj, prop)) {
            result.push(prop);
        }
    }
    if (_objKeysHasDontEnumBug) {
        var dontEnumsLength = _objKeysDontEnums.length;
        for (var lp = 0; lp < dontEnumsLength; lp++) {
            if (obj && _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty.call(obj, _objKeysDontEnums[lp])) {
                result.push(_objKeysDontEnums[lp]);
            }
        }
    }
    return result;
}
/**
 * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with
 * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded
 * and executed in an ES3 container, providing basic IE8 compatibility.
 * @param target The object on which to define the property.
 * @param prop The name of the property to be defined or modified.
 * @param getProp The getter function to wire against the getter.
 * @param setProp The setter function to wire against the setter.
 * @returns True if it was able to create the accessors otherwise false
 */
function objDefineAccessors(target, prop, getProp, setProp) {
    if (_objDefineProperty) {
        try {
            var descriptor = {
                enumerable: true,
                configurable: true
            };
            if (getProp) {
                descriptor.get = getProp;
            }
            if (setProp) {
                descriptor.set = setProp;
            }
            _objDefineProperty(target, prop, descriptor);
            return true;
        }
        catch (e) {
            // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw
            // We will just ignore this here.
        }
    }
    return false;
}
function _doNothing(value) {
    return value;
}
var objFreeze = _objFreeze || _doNothing;
var objSeal = _objSeal || _doNothing;
/**
 * Return the current time via the Date now() function (if available) and falls back to (new Date()).getTime() if now() is unavailable (IE8 or less)
 * https://caniuse.com/#search=Date.now
 */
function dateNow() {
    var dt = Date;
    return dt.now ? dt.now() : new dt().getTime();
}
/**
 * Returns the name of object if it's an Error. Otherwise, returns empty string.
 */
function getExceptionName(object) {
    if (isError(object)) {
        return object.name;
    }
    return "";
}
/**
 * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk
 * function will only be called if the new value is no equal to the original value.
 * @param target - The target object
 * @param field - The key of the target
 * @param value - The value to set
 * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set
 * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)
 * @returns The existing or new value, depending what was set
 */
function setValue(target, field, value, valChk, srcChk) {
    var theValue = value;
    if (target) {
        theValue = target[field];
        if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {
            theValue = value;
            target[field] = theValue;
        }
    }
    return theValue;
}
/**
 * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it
 * @param target - The target object to return or set the default value
 * @param field - The key for the field to set on the target
 * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added
 */
function getSetValue(target, field, defValue) {
    var theValue;
    if (target) {
        theValue = target[field];
        if (!theValue && isNullOrUndefined(theValue)) {
            // Supports having the default as null
            theValue = !isUndefined(defValue) ? defValue : {};
            target[field] = theValue;
        }
    }
    else {
        // Expanded for performance so we only check defValue if required
        theValue = !isUndefined(defValue) ? defValue : {};
    }
    return theValue;
}
function isNotTruthy(value) {
    return !value;
}
function isTruthy(value) {
    return !!value;
}
function throwError(message) {
    throw new Error(message);
}
/**
 * Effectively assigns all enumerable properties (not just own properties) and functions (including inherited prototype) from
 * the source object to the target, it attempts to use proxy getters / setters (if possible) and proxy functions to avoid potential
 * implementation issues by assigning prototype functions as instance ones
 *
 * This method is the primary method used to "update" the snippet proxy with the ultimate implementations.
 *
 * Special ES3 Notes:
 * Updates (setting) of direct property values on the target or indirectly on the source object WILL NOT WORK PROPERLY, updates to the
 * properties of "referenced" object will work (target.context.newValue = 10 => will be reflected in the source.context as it's the
 * same object). ES3 Failures: assigning target.myProp = 3 -> Won't change source.myProp = 3, likewise the reverse would also fail.
 * @param target - The target object to be assigned with the source properties and functions
 * @param source - The source object which will be assigned / called by setting / calling the targets proxies
 * @param chkSet - An optional callback to determine whether a specific property/function should be proxied
 * @memberof Initialization
 */
function proxyAssign(target, source, chkSet) {
    if (target && source && target !== source && isObject(target) && isObject(source)) {
        var _loop_1 = function (field) {
            if (isString(field)) {
                var value = source[field];
                if (isFunction(value)) {
                    if (!chkSet || chkSet(field, true, source, target)) {
                        // Create a proxy function rather than just copying the (possible) prototype to the new object as an instance function
                        target[field] = (function (funcName) {
                            return function () {
                                // Capture the original arguments passed to the method
                                var originalArguments = arguments;
                                return source[funcName].apply(source, originalArguments);
                            };
                        })(field);
                    }
                }
                else if (!chkSet || chkSet(field, false, source, target)) {
                    if (hasOwnProperty(target, field)) {
                        // Remove any previous instance property
                        delete target[field];
                    }
                    if (!objDefineAccessors(target, field, function () {
                        return source[field];
                    }, function (theValue) {
                        source[field] = theValue;
                    })) {
                        // Unable to create an accessor, so just assign the values as a fallback
                        // -- this will (mostly) work for objects
                        // -- but will fail for accessing primitives (if the source changes it) and all types of "setters" as the source won't be modified
                        target[field] = value;
                    }
                }
            }
        };
        // effectively apply/proxy full source to the target instance
        for (var field in source) {
            _loop_1(field);
        }
    }
    return target;
}
/**
 * Simpler helper to create a dynamic class that implements the interface and populates the values with the defaults.
 * Only instance properties (hasOwnProperty) values are copied from the defaults to the new instance
 * @param defaults Simple helper
 */
function createClassFromInterface(defaults) {
    return /** @class */ (function () {
        function class_1() {
            var _this_1 = this;
            if (defaults) {
                objForEachKey(defaults, function (field, value) {
                    _this_1[field] = value;
                });
            }
        }
        return class_1;
    }());
}
/**
 * A helper function to assist with JIT performance for objects that have properties added / removed dynamically
 * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this
 * function after you have finished "updating" the object, calling this within loops reduces or defeats the benefits.
 * This helps when iterating using for..in, objKeys() and objForEach()
 * @param theObject - The object to be optimized if possible
 */
function optimizeObject(theObject) {
    // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties
    // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent
    if (theObject && _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjAssign) {
        theObject = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjClass)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjAssign)({}, theObject));
    }
    return theObject;
}
/**
 * Pass in the objects to merge as arguments, this will only "merge" (extend) properties that are owned by the object.
 * It will NOT merge inherited or non-enumerable properties.
 * @param obj1 - object to merge.  Set this argument to 'true' for a deep extend.
 * @param obj2 - object to merge.
 * @param obj3 - object to merge.
 * @param obj4 - object to merge.
 * @param obj5 - object to merge.
 * @returns The extended first object.
 */
function objExtend(obj, obj2, obj3, obj4, obj5, obj6) {
    // Variables
    var theArgs = arguments;
    var extended = theArgs[0] || {};
    var argLen = theArgs.length;
    var deep = false;
    var idx = 1;
    // Check for "Deep" flag
    if (argLen > 0 && isBoolean(extended)) {
        deep = extended;
        extended = theArgs[idx] || {};
        idx++;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (!isObject(extended)) {
        extended = {};
    }
    // Loop through each remaining object and conduct a merge
    for (; idx < argLen; idx++) {
        var arg = theArgs[idx];
        var isArgArray = isArray(arg);
        var isArgObj = isObject(arg);
        for (var prop in arg) {
            var propOk = (isArgArray && (prop in arg)) || (isArgObj && (_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.ObjHasOwnProperty.call(arg, prop)));
            if (!propOk) {
                continue;
            }
            var newValue = arg[prop];
            var isNewArray = void 0;
            // If deep merge and property is an object, merge properties
            if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {
                // Grab the current value of the extended object
                var clone = extended[prop];
                if (isNewArray) {
                    if (!isArray(clone)) {
                        // We can't "merge" an array with a non-array so overwrite the original
                        clone = [];
                    }
                }
                else if (!isPlainObject(clone)) {
                    // We can't "merge" an object with a non-object
                    clone = {};
                }
                // Never move the original objects always clone them
                newValue = objExtend(deep, clone, newValue);
            }
            // Assign the new (or previous) value (unless undefined)
            if (newValue !== undefined) {
                extended[prop] = newValue;
            }
        }
    }
    return extended;
}
//# sourceMappingURL=HelperFuncs.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/InstrumentHooks.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/InstrumentHooks.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstrumentFunc": () => (/* binding */ InstrumentFunc),
/* harmony export */   "InstrumentFuncs": () => (/* binding */ InstrumentFuncs),
/* harmony export */   "InstrumentProto": () => (/* binding */ InstrumentProto),
/* harmony export */   "InstrumentProtos": () => (/* binding */ InstrumentProtos)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var aiInstrumentHooks = "_aiHooks";
var cbNames = [
    "req", "rsp", "hkErr", "fnErr"
];
/** @ignore */
function _arrLoop(arr, fn) {
    if (arr) {
        for (var lp = 0; lp < arr.length; lp++) {
            if (fn(arr[lp], lp)) {
                break;
            }
        }
    }
}
/** @ignore */
function _doCallbacks(hooks, callDetails, cbArgs, hookCtx, type) {
    if (type >= 0 /* Request */ && type <= 2 /* HookError */) {
        _arrLoop(hooks, function (hook, idx) {
            var cbks = hook.cbks;
            var cb = cbks[cbNames[type]];
            if (cb) {
                // Set the specific hook context implementation using a lazy creation pattern
                callDetails.ctx = function () {
                    var ctx = hookCtx[idx] = (hookCtx[idx] || {});
                    return ctx;
                };
                try {
                    cb.apply(callDetails.inst, cbArgs);
                }
                catch (err) {
                    var orgEx = callDetails.err;
                    try {
                        // Report Hook error via the callback
                        var hookErrorCb = cbks[cbNames[2 /* HookError */]];
                        if (hookErrorCb) {
                            callDetails.err = err;
                            hookErrorCb.apply(callDetails.inst, cbArgs);
                        }
                    }
                    catch (e) {
                        // Not much we can do here -- swallowing the exception to avoid crashing the hosting app
                    }
                    finally {
                        // restore the original exception (if any)
                        callDetails.err = orgEx;
                    }
                }
            }
        });
    }
}
/** @ignore */
function _createFunctionHook(aiHook) {
    // Define a temporary method that queues-up a the real method call
    return function () {
        var funcThis = this;
        // Capture the original arguments passed to the method
        var orgArgs = arguments;
        var hooks = aiHook.h;
        var funcArgs = {
            name: aiHook.n,
            inst: funcThis,
            ctx: null,
            set: _replaceArg
        };
        var hookCtx = [];
        var cbArgs = _createArgs([funcArgs], orgArgs);
        function _createArgs(target, theArgs) {
            _arrLoop(theArgs, function (arg) {
                target.push(arg);
            });
            return target;
        }
        function _replaceArg(idx, value) {
            orgArgs = _createArgs([], orgArgs);
            orgArgs[idx] = value;
            cbArgs = _createArgs([funcArgs], orgArgs);
        }
        // Call the pre-request hooks
        _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 0 /* Request */);
        // Call the original function was called
        var theFunc = aiHook.f;
        try {
            funcArgs.rslt = theFunc.apply(funcThis, orgArgs);
        }
        catch (err) {
            // Report the request callback
            funcArgs.err = err;
            _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 3 /* FunctionError */);
            // rethrow the original exception so anyone listening for it can catch the exception
            throw err;
        }
        // Call the post-request hooks
        _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 1 /* Response */);
        return funcArgs.rslt;
    };
}
/** @ignore */
function _getOwner(target, name, checkPrototype) {
    var owner = null;
    if (target) {
        if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(target, name)) {
            owner = target;
        }
        else if (checkPrototype) {
            owner = _getOwner((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__._getObjProto)(target), name, false);
        }
    }
    return owner;
}
/**
 * Intercept the named prototype functions for the target class / object
 * @param target - The target object
 * @param funcName - The function name
 * @param callbacks - The callbacks to configure and call whenever the function is called
 */
function InstrumentProto(target, funcName, callbacks) {
    if (target) {
        return InstrumentFunc(target[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.strShimPrototype], funcName, callbacks, false);
    }
    return null;
}
/**
 * Intercept the named prototype functions for the target class / object
 * @param target - The target object
 * @param funcNames - The function names to intercept and call
 * @param callbacks - The callbacks to configure and call whenever the function is called
 */
function InstrumentProtos(target, funcNames, callbacks) {
    if (target) {
        return InstrumentFuncs(target[_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.strShimPrototype], funcNames, callbacks, false);
    }
    return null;
}
/**
 * Intercept the named prototype functions for the target class / object
 * @param target - The target object
 * @param funcName - The function name
 * @param callbacks - The callbacks to configure and call whenever the function is called
 * @param checkPrototype - If the function doesn't exist on the target should it attempt to hook the prototype function
 */
function InstrumentFunc(target, funcName, callbacks, checkPrototype) {
    if (checkPrototype === void 0) { checkPrototype = true; }
    if (target && funcName && callbacks) {
        var owner = _getOwner(target, funcName, checkPrototype);
        if (owner) {
            var fn = owner[funcName];
            if (typeof fn === _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_1__.strShimFunction) {
                var aiHook_1 = fn[aiInstrumentHooks];
                if (!aiHook_1) {
                    // Only hook the function once
                    aiHook_1 = {
                        i: 0,
                        n: funcName,
                        f: fn,
                        h: []
                    };
                    // Override (hook) the original function
                    var newFunc = _createFunctionHook(aiHook_1);
                    newFunc[aiInstrumentHooks] = aiHook_1; // Tag and store the function hooks
                    owner[funcName] = newFunc;
                }
                var theHook = {
                    // tslint:disable:object-literal-shorthand
                    id: aiHook_1.i,
                    cbks: callbacks,
                    rm: function () {
                        // DO NOT Use () => { shorthand for the function as the this gets replaced
                        // with the outer this and not the this for theHook instance.
                        var id = this.id;
                        _arrLoop(aiHook_1.h, function (hook, idx) {
                            if (hook.id === id) {
                                aiHook_1.h.splice(idx, 1);
                                return 1;
                            }
                        });
                    }
                    // tslint:enable:object-literal-shorthand
                };
                aiHook_1.i++;
                aiHook_1.h.push(theHook);
                return theHook;
            }
        }
    }
    return null;
}
/**
 * Intercept the named functions for the target class / object
 * @param target - The target object
 * @param funcNames - The function names to intercept and call
 * @param callbacks - The callbacks to configure and call whenever the function is called
 * @param checkPrototype - If the function doesn't exist on the target should it attempt to hook the prototype function
 */
function InstrumentFuncs(target, funcNames, callbacks, checkPrototype) {
    if (checkPrototype === void 0) { checkPrototype = true; }
    var hooks = null;
    _arrLoop(funcNames, function (funcName) {
        var hook = InstrumentFunc(target, funcName, callbacks, checkPrototype);
        if (hook) {
            if (!hooks) {
                hooks = [];
            }
            hooks.push(hook);
        }
    });
    return hooks;
}
//# sourceMappingURL=InstrumentHooks.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationManager": () => (/* binding */ NotificationManager)
/* harmony export */ });
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


/**
 * Class to manage sending notifications to all the listeners.
 */
var NotificationManager = /** @class */ (function () {
    function NotificationManager(config) {
        this.listeners = [];
        var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_0__["default"])(NotificationManager, this, function (_self) {
            _self.addNotificationListener = function (listener) {
                _self.listeners.push(listener);
            };
            /**
             * Removes all instances of the listener.
             * @param {INotificationListener} listener - AWTNotificationListener to remove.
             */
            _self.removeNotificationListener = function (listener) {
                var index = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrIndexOf)(_self.listeners, listener);
                while (index > -1) {
                    _self.listeners.splice(index, 1);
                    index = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrIndexOf)(_self.listeners, listener);
                }
            };
            /**
             * Notification for events sent.
             * @param {ITelemetryItem[]} events - The array of events that have been sent.
             */
            _self.eventsSent = function (events) {
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_self.listeners, function (listener) {
                    if (listener && listener.eventsSent) {
                        setTimeout(function () { return listener.eventsSent(events); }, 0);
                    }
                });
            };
            /**
             * Notification for events being discarded.
             * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.
             * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason
             * constant should be used to check the different values.
             */
            _self.eventsDiscarded = function (events, reason) {
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_self.listeners, function (listener) {
                    if (listener && listener.eventsDiscarded) {
                        setTimeout(function () { return listener.eventsDiscarded(events, reason); }, 0);
                    }
                });
            };
            /**
             * [Optional] A function called when the events have been requested to be sent to the sever.
             * @param {number} sendReason - The reason why the event batch is being sent.
             * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.
             */
            _self.eventsSendRequest = function (sendReason, isAsync) {
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_self.listeners, function (listener) {
                    if (listener && listener.eventsSendRequest) {
                        if (isAsync) {
                            setTimeout(function () { return listener.eventsSendRequest(sendReason, isAsync); }, 0);
                        }
                        else {
                            try {
                                listener.eventsSendRequest(sendReason, isAsync);
                            }
                            catch (e) {
                                // Catch errors to ensure we don't block sending the requests
                            }
                        }
                    }
                });
            };
            _self.perfEvent = function (perfEvent) {
                if (perfEvent) {
                    // Send all events or only parent events
                    if (perfEvtsSendAll || !perfEvent.isChildEvt()) {
                        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_self.listeners, function (listener) {
                            if (listener && listener.perfEvent) {
                                if (perfEvent.isAsync) {
                                    setTimeout(function () { return listener.perfEvent(perfEvent); }, 0);
                                }
                                else {
                                    try {
                                        listener.perfEvent(perfEvent);
                                    }
                                    catch (e) {
                                        // Catch errors to ensure we don't block sending the requests
                                    }
                                }
                            }
                        });
                    }
                }
            };
        });
    }
// Removed Stub for NotificationManager.prototype.addNotificationListener.
// Removed Stub for NotificationManager.prototype.removeNotificationListener.
// Removed Stub for NotificationManager.prototype.eventsSent.
// Removed Stub for NotificationManager.prototype.eventsDiscarded.
// Removed Stub for NotificationManager.prototype.eventsSendRequest.
    return NotificationManager;
}());

//# sourceMappingURL=NotificationManager.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PerfEvent": () => (/* binding */ PerfEvent),
/* harmony export */   "PerfManager": () => (/* binding */ PerfManager),
/* harmony export */   "doPerf": () => (/* binding */ doPerf),
/* harmony export */   "getGblPerfMgr": () => (/* binding */ getGblPerfMgr),
/* harmony export */   "setGblPerfMgr": () => (/* binding */ setGblPerfMgr)
/* harmony export */ });
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var strExecutionContextKey = "ctx";
var _defaultPerfManager = null;
var PerfEvent = /** @class */ (function () {
    function PerfEvent(name, payloadDetails, isAsync) {
        var _self = this;
        var accessorDefined = false;
        _self.start = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.dateNow)();
        _self.name = name;
        _self.isAsync = isAsync;
        _self.isChildEvt = function () { return false; };
        if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(payloadDetails)) {
            // Create an accessor to minimize the potential performance impact of executing the payloadDetails callback
            var theDetails_1;
            accessorDefined = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.objDefineAccessors)(_self, "payload", function () {
                // Delay the execution of the payloadDetails until needed
                if (!theDetails_1 && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(payloadDetails)) {
                    theDetails_1 = payloadDetails();
                    // clear it out now so the referenced objects can be garbage collected
                    payloadDetails = null;
                }
                return theDetails_1;
            });
        }
        _self.getCtx = function (key) {
            if (key) {
                // The parent and child links are located directly on the object (for better viewing in the DebugPlugin)
                if (key === PerfEvent.ParentContextKey || key === PerfEvent.ChildrenContextKey) {
                    return _self[key];
                }
                return (_self[strExecutionContextKey] || {})[key];
            }
            return null;
        };
        _self.setCtx = function (key, value) {
            if (key) {
                // Put the parent and child links directly on the object (for better viewing in the DebugPlugin)
                if (key === PerfEvent.ParentContextKey) {
                    // Simple assumption, if we are setting a parent then we must be a child
                    if (!_self[key]) {
                        _self.isChildEvt = function () { return true; };
                    }
                    _self[key] = value;
                }
                else if (key === PerfEvent.ChildrenContextKey) {
                    _self[key] = value;
                }
                else {
                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
                    ctx[key] = value;
                }
            }
        };
        _self.complete = function () {
            var childTime = 0;
            var childEvts = _self.getCtx(PerfEvent.ChildrenContextKey);
            if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isArray)(childEvts)) {
                for (var lp = 0; lp < childEvts.length; lp++) {
                    var childEvt = childEvts[lp];
                    if (childEvt) {
                        childTime += childEvt.time;
                    }
                }
            }
            _self.time = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.dateNow)() - _self.start;
            _self.exTime = _self.time - childTime;
            _self.complete = function () { };
            if (!accessorDefined && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(payloadDetails)) {
                // If we couldn't define the property set during complete -- to minimize the perf impact until after the time
                _self.payload = payloadDetails();
            }
        };
    }
    PerfEvent.ParentContextKey = "parent";
    PerfEvent.ChildrenContextKey = "childEvts";
    return PerfEvent;
}());

var PerfManager = /** @class */ (function () {
    function PerfManager(manager) {
        /**
         * General bucket used for execution context set and retrieved via setCtx() and getCtx.
         * Defined as private so it can be visualized via the DebugPlugin
         */
        this.ctx = {};
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__["default"])(PerfManager, this, function (_self) {
            _self.create = function (src, payloadDetails, isAsync) {
                // TODO (@MSNev): at some point we will want to add additional configuration to "select" which events to instrument
                // for now this is just a simple do everything.
                return new PerfEvent(src, payloadDetails, isAsync);
            };
            _self.fire = function (perfEvent) {
                if (perfEvent) {
                    perfEvent.complete();
                    if (manager && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(manager.perfEvent)) {
                        manager.perfEvent(perfEvent);
                    }
                }
            };
            _self.setCtx = function (key, value) {
                if (key) {
                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
                    ctx[key] = value;
                }
            };
            _self.getCtx = function (key) {
                return (_self[strExecutionContextKey] || {})[key];
            };
        });
    }
// Removed Stub for PerfManager.prototype.create.
// Removed Stub for PerfManager.prototype.fire.
// Removed Stub for PerfManager.prototype.setCtx.
// Removed Stub for PerfManager.prototype.getCtx.
    return PerfManager;
}());

var doPerfActiveKey = "CoreUtils.doPerf";
/**
 * Helper function to wrap a function with a perf event
 * @param mgrSource - The Performance Manager or a Performance provider source (may be null)
 * @param getSource - The callback to create the source name for the event (if perf monitoring is enabled)
 * @param func - The function to call and measure
 * @param details - A function to return the payload details
 * @param isAsync - Is the event / function being call asynchronously or synchronously
 */
function doPerf(mgrSource, getSource, func, details, isAsync) {
    if (mgrSource) {
        var perfMgr = mgrSource;
        if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(perfMgr["getPerfMgr"])) {
            // Looks like a perf manager provider object
            perfMgr = perfMgr["getPerfMgr"]();
        }
        if (perfMgr) {
            var perfEvt = void 0;
            var currentActive = perfMgr.getCtx(doPerfActiveKey);
            try {
                perfEvt = perfMgr.create(getSource(), details, isAsync);
                if (perfEvt) {
                    if (currentActive && perfEvt.setCtx) {
                        perfEvt.setCtx(PerfEvent.ParentContextKey, currentActive);
                        if (currentActive.getCtx && currentActive.setCtx) {
                            var children = currentActive.getCtx(PerfEvent.ChildrenContextKey);
                            if (!children) {
                                children = [];
                                currentActive.setCtx(PerfEvent.ChildrenContextKey, children);
                            }
                            children.push(perfEvt);
                        }
                    }
                    // Set this event as the active event now
                    perfMgr.setCtx(doPerfActiveKey, perfEvt);
                    return func(perfEvt);
                }
            }
            catch (ex) {
                if (perfEvt && perfEvt.setCtx) {
                    perfEvt.setCtx("exception", ex);
                }
            }
            finally {
                // fire the perf event
                if (perfEvt) {
                    perfMgr.fire(perfEvt);
                }
                // Reset the active event to the previous value
                perfMgr.setCtx(doPerfActiveKey, currentActive);
            }
        }
    }
    return func();
}
/**
 * Set the global performance manager to use when there is no core instance or it has not been initialized yet.
 * @param perfManager - The IPerfManager instance to use when no performance manager is supplied.
 */
function setGblPerfMgr(perfManager) {
    _defaultPerfManager = perfManager;
}
/**
 * Get the current global performance manager that will be used with no performance manager is supplied.
 * @returns - The current default manager
 */
function getGblPerfMgr() {
    return _defaultPerfManager;
}
//# sourceMappingURL=PerfManager.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProcessTelemetryContext": () => (/* binding */ ProcessTelemetryContext)
/* harmony export */ });
/* harmony import */ var _DiagnosticLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DiagnosticLogger */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _TelemetryPluginChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TelemetryPluginChain */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryPluginChain.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */






/**
 * Creates the instance execution chain for the plugins
 */
function _createProxyChain(plugins, itemCtx) {
    var proxies = [];
    if (plugins && plugins.length > 0) {
        // Create the proxies and wire up the next plugin chain
        var lastProxy = null;
        for (var idx = 0; idx < plugins.length; idx++) {
            var thePlugin = plugins[idx];
            if (thePlugin && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(thePlugin.processTelemetry)) {
                // Only add plugins that are processors
                var newProxy = new _TelemetryPluginChain__WEBPACK_IMPORTED_MODULE_1__.TelemetryPluginChain(thePlugin, itemCtx);
                proxies.push(newProxy);
                if (lastProxy) {
                    // Set this new proxy as the next for the previous one
                    lastProxy.setNext(newProxy);
                }
                lastProxy = newProxy;
            }
        }
    }
    return proxies.length > 0 ? proxies[0] : null;
}
function _copyProxyChain(proxy, itemCtx, startAt) {
    var plugins = [];
    var add = startAt ? false : true;
    if (proxy) {
        while (proxy) {
            var thePlugin = proxy.getPlugin();
            if (add || thePlugin === startAt) {
                add = true;
                plugins.push(thePlugin);
            }
            proxy = proxy.getNext();
        }
    }
    if (!add) {
        plugins.push(startAt);
    }
    return _createProxyChain(plugins, itemCtx);
}
function _copyPluginChain(srcPlugins, itemCtx, startAt) {
    var plugins = srcPlugins;
    var add = false;
    if (startAt && srcPlugins) {
        plugins = [];
        (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.arrForEach)(srcPlugins, function (thePlugin) {
            if (add || thePlugin === startAt) {
                add = true;
                plugins.push(thePlugin);
            }
        });
    }
    if (startAt && !add) {
        if (!plugins) {
            plugins = [];
        }
        plugins.push(startAt);
    }
    return _createProxyChain(plugins, itemCtx);
}
var ProcessTelemetryContext = /** @class */ (function () {
    /**
     * Creates a new Telemetry Item context with the current config, core and plugin execution chain
     * @param plugins - The plugin instances that will be executed
     * @param config - The current config
     * @param core - The current core instance
     */
    function ProcessTelemetryContext(plugins, config, core, startAt) {
        var _self = this;
        var _nextProxy = null; // Null == No next plugin
        // There is no next element (null) vs not defined (undefined)
        if (startAt !== null) {
            if (plugins && (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(plugins.getPlugin)) {
                // We have a proxy chain object
                _nextProxy = _copyProxyChain(plugins, _self, startAt || plugins.getPlugin());
            }
            else {
                // We just have an array
                if (startAt) {
                    _nextProxy = _copyPluginChain(plugins, _self, startAt);
                }
                else if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(startAt)) {
                    // Undefined means copy the existing chain
                    _nextProxy = _createProxyChain(plugins, _self);
                }
            }
        }
        _self.core = function () {
            return core;
        };
        _self.diagLog = function () {
            return (0,_DiagnosticLogger__WEBPACK_IMPORTED_MODULE_2__.safeGetLogger)(core, config);
        };
        _self.getCfg = function () {
            return config;
        };
        _self.getExtCfg = function (identifier, defaultValue) {
            if (defaultValue === void 0) { defaultValue = {}; }
            var theConfig;
            if (config) {
                var extConfig = config.extensionConfig;
                if (extConfig && identifier) {
                    theConfig = extConfig[identifier];
                }
            }
            return (theConfig ? theConfig : defaultValue);
        };
        _self.getConfig = function (identifier, field, defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            var theValue;
            var extConfig = _self.getExtCfg(identifier, null);
            if (extConfig && !(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(extConfig[field])) {
                theValue = extConfig[field];
            }
            else if (config && !(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(config[field])) {
                theValue = config[field];
            }
            return !(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(theValue) ? theValue : defaultValue;
        };
        _self.hasNext = function () {
            return _nextProxy != null;
        };
        _self.getNext = function () {
            return _nextProxy;
        };
        _self.setNext = function (nextPlugin) {
            _nextProxy = nextPlugin;
        };
        _self.processNext = function (env) {
            var nextPlugin = _nextProxy;
            if (nextPlugin) {
                // Automatically move to the next plugin
                _nextProxy = nextPlugin.getNext();
                nextPlugin.processTelemetry(env, _self);
            }
        };
        _self.createNew = function (plugins, startAt) {
            if (plugins === void 0) { plugins = null; }
            return new ProcessTelemetryContext(plugins || _nextProxy, config, core, startAt);
        };
    }
    return ProcessTelemetryContext;
}());

//# sourceMappingURL=ProcessTelemetryContext.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mwcRandom32": () => (/* binding */ mwcRandom32),
/* harmony export */   "mwcRandomSeed": () => (/* binding */ mwcRandomSeed),
/* harmony export */   "random32": () => (/* binding */ random32),
/* harmony export */   "randomValue": () => (/* binding */ randomValue)
/* harmony export */ });
/* harmony import */ var _EnvUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnvUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var UInt32Mask = 0x100000000;
var MaxUInt32 = 0xffffffff;
// MWC based Random generator (for IE)
var _mwcSeeded = false;
var _mwcW = 123456789;
var _mwcZ = 987654321;
// Takes any integer
function _mwcSeed(seedValue) {
    if (seedValue < 0) {
        // Make sure we end up with a positive number and not -ve one.
        seedValue >>>= 0;
    }
    _mwcW = (123456789 + seedValue) & MaxUInt32;
    _mwcZ = (987654321 - seedValue) & MaxUInt32;
    _mwcSeeded = true;
}
function _autoSeedMwc() {
    // Simple initialization using default Math.random() - So we inherit any entropy from the browser
    // and bitwise XOR with the current milliseconds
    try {
        var now = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.dateNow)() & 0x7fffffff;
        _mwcSeed(((Math.random() * UInt32Mask) ^ now) + now);
    }
    catch (e) {
        // Don't crash if something goes wrong
    }
}
/**
 * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.
 * So maxValue(16) will produce a number from 0..16 (range of 17)
 * @param maxValue
 */
function randomValue(maxValue) {
    if (maxValue > 0) {
        return Math.floor((random32() / MaxUInt32) * (maxValue + 1)) >>> 0;
    }
    return 0;
}
/**
 * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.
 * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)
 */
function random32(signed) {
    var value;
    var c = (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getCrypto)() || (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.getMsCrypto)();
    if (c && c.getRandomValues) {
        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)
        value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;
    }
    else if ((0,_EnvUtils__WEBPACK_IMPORTED_MODULE_1__.isIE)()) {
        // For IE 6, 7, 8 (especially on XP) Math.random is not very random
        if (!_mwcSeeded) {
            // Set the seed for the Mwc algorithm
            _autoSeedMwc();
        }
        // Don't use Math.random for IE
        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)
        value = mwcRandom32() & MaxUInt32;
    }
    else {
        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)
        value = Math.floor((UInt32Mask * Math.random()) | 0);
    }
    if (!signed) {
        // Make sure we end up with a positive number and not -ve one.
        value >>>= 0;
    }
    return value;
}
/**
 * Seed the MWC random number generator with the specified seed or a random value
 * @param value - optional the number to used as the seed, if undefined, null or zero a random value will be chosen
 */
function mwcRandomSeed(value) {
    if (!value) {
        _autoSeedMwc();
    }
    else {
        _mwcSeed(value);
    }
}
/**
 * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)
 * instead of Math.random() defaults to un-signed.
 * Used as a replacement random generator for IE to avoid issues with older IE instances.
 * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)
 */
function mwcRandom32(signed) {
    _mwcZ = (36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16)) & MaxUInt32;
    _mwcW = (18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16)) & MaxUInt32;
    var value = (((_mwcZ << 16) + (_mwcW & 0xFFFF)) >>> 0) & MaxUInt32 | 0;
    if (!signed) {
        // Make sure we end up with a positive number and not -ve one.
        value >>>= 0;
    }
    return value;
}
//# sourceMappingURL=RandomHelper.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initializePlugins": () => (/* binding */ initializePlugins),
/* harmony export */   "sortPlugins": () => (/* binding */ sortPlugins)
/* harmony export */ });
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var processTelemetry = "processTelemetry";
var priority = "priority";
var setNextPlugin = "setNextPlugin";
var isInitialized = "isInitialized";
/**
 * Initialize the queue of plugins
 * @param plugins - The array of plugins to initialize and setting of the next plugin
 * @param config The current config for the instance
 * @param core THe current core instance
 * @param extensions The extensions
 */
function initializePlugins(processContext, extensions) {
    // Set the next plugin and identified the uninitialized plugins
    var initPlugins = [];
    var lastPlugin = null;
    var proxy = processContext.getNext();
    while (proxy) {
        var thePlugin = proxy.getPlugin();
        if (thePlugin) {
            if (lastPlugin &&
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(lastPlugin[setNextPlugin]) &&
                (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(thePlugin[processTelemetry])) {
                // Set this plugin as the next for the previous one
                lastPlugin[setNextPlugin](thePlugin);
            }
            if (!(0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(thePlugin[isInitialized]) || !thePlugin[isInitialized]()) {
                initPlugins.push(thePlugin);
            }
            lastPlugin = thePlugin;
            proxy = proxy.getNext();
        }
    }
    // Now initiatilize the plugins
    (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.arrForEach)(initPlugins, function (thePlugin) {
        thePlugin.initialize(processContext.getCfg(), processContext.core(), extensions, processContext.getNext());
    });
}
function sortPlugins(plugins) {
    // Sort by priority
    return plugins.sort(function (extA, extB) {
        var result = 0;
        var bHasProcess = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(extB[processTelemetry]);
        if ((0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(extA[processTelemetry])) {
            result = bHasProcess ? extA[priority] - extB[priority] : 1;
        }
        else if (bHasProcess) {
            result = -1;
        }
        return result;
    });
    // sort complete
}
//# sourceMappingURL=TelemetryHelpers.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryPluginChain.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryPluginChain.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TelemetryPluginChain": () => (/* binding */ TelemetryPluginChain)
/* harmony export */ });
/* harmony import */ var _PerfManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PerfManager */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js");
/* harmony import */ var _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../JavaScriptSDK.Enums/LoggingEnums */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _HelperFuncs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HelperFuncs */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _EnvUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EnvUtils */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/*
 * Application Insights JavaScript SDK - Core, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */







var TelemetryPluginChain = /** @class */ (function () {
    function TelemetryPluginChain(plugin, defItemCtx) {
        var _self = this;
        var _nextProxy = null;
        var _hasProcessTelemetry = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(plugin.processTelemetry);
        var _hasSetNext = (0,_HelperFuncs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(plugin.setNextPlugin);
        _self._hasRun = false;
        _self.getPlugin = function () {
            return plugin;
        };
        _self.getNext = function () {
            return _nextProxy;
        };
        _self.setNext = function (nextPlugin) {
            _nextProxy = nextPlugin;
        };
        _self.processTelemetry = function (env, itemCtx) {
            if (!itemCtx) {
                // Looks like a plugin didn't pass the (optional) context, so restore to the default
                itemCtx = defItemCtx;
            }
            var identifier = plugin ? plugin.identifier : "TelemetryPluginChain";
            (0,_PerfManager__WEBPACK_IMPORTED_MODULE_1__.doPerf)(itemCtx ? itemCtx.core() : null, function () { return identifier + ":processTelemetry"; }, function () {
                if (plugin && _hasProcessTelemetry) {
                    _self._hasRun = true;
                    try {
                        // Ensure that we keep the context in sync (for processNext()), just in case a plugin
                        // doesn't calls processTelemetry() instead of itemContext.processNext() or some
                        // other form of error occurred
                        itemCtx.setNext(_nextProxy);
                        if (_hasSetNext) {
                            // Backward compatibility setting the next plugin on the instance
                            plugin.setNextPlugin(_nextProxy);
                        }
                        // Set a flag on the next plugin so we know if it was attempted to be executed
                        _nextProxy && (_nextProxy._hasRun = false);
                        plugin.processTelemetry(env, itemCtx);
                    }
                    catch (error) {
                        var hasRun = _nextProxy && _nextProxy._hasRun;
                        if (!_nextProxy || !hasRun) {
                            // Either we have no next plugin or the current one did not attempt to call the next plugin
                            // Which means the current one is the root of the failure so log/report this failure
                            itemCtx.diagLog().throwInternal(_JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_2__.LoggingSeverity.CRITICAL, _JavaScriptSDK_Enums_LoggingEnums__WEBPACK_IMPORTED_MODULE_2__._InternalMessageId.PluginException, "Plugin [" + plugin.identifier + "] failed during processTelemetry - " + (0,_EnvUtils__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(error));
                        }
                        if (_nextProxy && !hasRun) {
                            // As part of the failure the current plugin did not attempt to call the next plugin in the cahin
                            // So rather than leave the pipeline dead in the water we call the next plugin
                            _nextProxy.processTelemetry(env, itemCtx);
                        }
                    }
                }
                else if (_nextProxy) {
                    _self._hasRun = true;
                    // The underlying plugin is either not defined or does not have a processTelemetry implementation
                    // so we still want the next plugin to be executed.
                    _nextProxy.processTelemetry(env, itemCtx);
                }
            }, function () { return ({ item: env }); }, !(env.sync));
        };
    }
    return TelemetryPluginChain;
}());

//# sourceMappingURL=TelemetryPluginChain.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/TraceParent.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/TraceParent.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Traceparent": () => (/* binding */ Traceparent)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/*
 * Application Insights JavaScript SDK - Dependencies Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */

var Traceparent = /** @class */ (function () {
    function Traceparent(traceId, spanId) {
        var self = this;
        self.traceFlag = Traceparent.DEFAULT_TRACE_FLAG;
        self.version = Traceparent.DEFAULT_VERSION;
        if (traceId && Traceparent.isValidTraceId(traceId)) {
            self.traceId = traceId;
        }
        else {
            self.traceId = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.generateW3CId)();
        }
        if (spanId && Traceparent.isValidSpanId(spanId)) {
            self.spanId = spanId;
        }
        else {
            self.spanId = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.generateW3CId)().substr(0, 16);
        }
    }
    Traceparent.isValidTraceId = function (id) {
        return id.match(/^[0-9a-f]{32}$/) && id !== "00000000000000000000000000000000";
    };
    Traceparent.isValidSpanId = function (id) {
        return id.match(/^[0-9a-f]{16}$/) && id !== "0000000000000000";
    };
    Traceparent.prototype.toString = function () {
        var self = this;
        return "".concat(self.version, "-").concat(self.traceId, "-").concat(self.spanId, "-").concat(self.traceFlag);
    };
    Traceparent.DEFAULT_TRACE_FLAG = "01";
    Traceparent.DEFAULT_VERSION = "00";
    return Traceparent;
}());

//# sourceMappingURL=TraceParent.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajax.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajax.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AjaxMonitor": () => (/* binding */ AjaxMonitor)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/TelemetryItemCreator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/InstrumentHooks.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js");
/* harmony import */ var _ajaxRecord__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ajaxRecord */ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajaxRecord.js");
/* harmony import */ var _TraceParent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TraceParent */ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/TraceParent.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Dependencies Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */








var AJAX_MONITOR_PREFIX = "ai.ajxmn.";
var strDiagLog = "diagLog";
var strAjaxData = "ajaxData";
var strThrowInternal = "throwInternal";
var strFetch = "fetch";
// Using a global value so that to handle same iKey with multiple app insights instances (mostly for testing)
var _markCount = 0;
/** @Ignore */
function _supportsFetch() {
    var _global = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
    if (!_global ||
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(_global.Request) ||
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(_global.Request[_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.strShimPrototype]) ||
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(_global[strFetch])) {
        return null;
    }
    return _global[strFetch];
}
/**
 * Determines whether ajax monitoring can be enabled on this document
 * @returns True if Ajax monitoring is supported on this page, otherwise false
 * @ignore
 */
function _supportsAjaxMonitoring(ajaxMonitorInstance) {
    var result = false;
    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isXhrSupported)()) {
        var proto = XMLHttpRequest[_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.strShimPrototype];
        result = !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(proto) &&
            !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(proto.open) && // eslint-disable-line security/detect-non-literal-fs-filename -- false positive
            !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(proto.send) &&
            !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(proto.abort);
    }
    var ieVer = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getIEVersion)();
    if (ieVer && ieVer < 9) {
        result = false;
    }
    if (result) {
        // Disable if the XmlHttpRequest can't be extended or hooked
        try {
            var xhr = new XMLHttpRequest();
            xhr[strAjaxData] = {};
            // Check that we can update the prototype
            var theOpen = XMLHttpRequest[_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.strShimPrototype].open;
            XMLHttpRequest[_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.strShimPrototype].open = theOpen;
        }
        catch (e) {
            // We can't decorate the xhr object so disable monitoring
            result = false;
            _throwInternalCritical(ajaxMonitorInstance, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxOpen, "Failed to enable XMLHttpRequest monitoring, extension is not supported", {
                exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e)
            });
        }
    }
    return result;
}
/** @Ignore */
function _getFailedAjaxDiagnosticsMessage(xhr) {
    var result = "";
    try {
        if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(xhr) &&
            !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(xhr[strAjaxData]) &&
            !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(xhr[strAjaxData].requestUrl)) {
            result += "(url: '" + xhr[strAjaxData].requestUrl + "')";
        }
    }
    catch (e) {
        // eslint-disable-next-line no-empty
    }
    return result;
}
/** @ignore */
function _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
    ajaxMonitorInstance[strDiagLog]()[strThrowInternal](_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.CRITICAL, msgId, message, properties, isUserAct);
}
/** @ignore */
function _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
    ajaxMonitorInstance[strDiagLog]()[strThrowInternal](_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.LoggingSeverity.WARNING, msgId, message, properties, isUserAct);
}
/** @Ignore */
function _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {
    // tslint:disable-next-line
    return function (args) {
        _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, {
            ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(args.inst),
            exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(args.err)
        });
    };
}
function _indexOf(value, match) {
    if (value && match) {
        return value.indexOf(match);
    }
    return -1;
}
var AjaxMonitor = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_5__.__extendsFn)(AjaxMonitor, _super);
    function AjaxMonitor() {
        var _this = _super.call(this) || this;
        _this.identifier = AjaxMonitor.identifier;
        _this.priority = 120;
        var strTrackDependencyDataInternal = "trackDependencyDataInternal"; // Using string to help with minification
        var location = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getLocation)();
        var _fetchInitialized = false; // fetch monitoring initialized
        var _xhrInitialized = false; // XHR monitoring initialized
        var _currentWindowHost = location && location.host && location.host.toLowerCase();
        var _config = AjaxMonitor.getEmptyConfig();
        var _enableRequestHeaderTracking = false;
        var _enableAjaxErrorStatusText = false;
        var _trackAjaxAttempts = 0;
        var _context;
        var _isUsingW3CHeaders;
        var _isUsingAIHeaders;
        var _markPrefix;
        var _enableAjaxPerfTracking = false;
        var _maxAjaxCallsPerView = 0;
        var _enableResponseHeaderTracking = false;
        var _hooks = [];
        var _disabledUrls = {};
        var _excludeRequestFromAutoTrackingPatterns;
        var _addRequestContext;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_6__["default"])(AjaxMonitor, _this, function (_self, base) {
            _self.initialize = function (config, core, extensions, pluginChain) {
                if (!_self.isInitialized()) {
                    base.initialize(config, core, extensions, pluginChain);
                    var ctx_1 = _self._getTelCtx();
                    var defaultConfig = AjaxMonitor.getDefaultConfig();
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.objForEachKey)(defaultConfig, function (field, value) {
                        _config[field] = ctx_1.getConfig(AjaxMonitor.identifier, field, value);
                    });
                    var distributedTracingMode = _config.distributedTracingMode;
                    _enableRequestHeaderTracking = _config.enableRequestHeaderTracking;
                    _enableAjaxErrorStatusText = _config.enableAjaxErrorStatusText;
                    _enableAjaxPerfTracking = _config.enableAjaxPerfTracking;
                    _maxAjaxCallsPerView = _config.maxAjaxCallsPerView;
                    _enableResponseHeaderTracking = _config.enableResponseHeaderTracking;
                    _excludeRequestFromAutoTrackingPatterns = _config.excludeRequestFromAutoTrackingPatterns;
                    _addRequestContext = _config.addRequestContext;
                    _isUsingAIHeaders = distributedTracingMode === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.AI || distributedTracingMode === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.AI_AND_W3C;
                    _isUsingW3CHeaders = distributedTracingMode === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.AI_AND_W3C || distributedTracingMode === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.W3C;
                    if (_enableAjaxPerfTracking) {
                        var iKey = config.instrumentationKey || "unkwn";
                        if (iKey.length > 5) {
                            _markPrefix = AJAX_MONITOR_PREFIX + iKey.substring(iKey.length - 5) + ".";
                        }
                        else {
                            _markPrefix = AJAX_MONITOR_PREFIX + iKey + ".";
                        }
                    }
                    if (_config.disableAjaxTracking === false) {
                        _instrumentXhr();
                    }
                    _instrumentFetch();
                    if (extensions.length > 0 && extensions) {
                        var propExt = void 0, extIx = 0;
                        while (!propExt && extIx < extensions.length) {
                            if (extensions[extIx] && extensions[extIx].identifier === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.PropertiesPluginIdentifier) {
                                propExt = extensions[extIx];
                            }
                            extIx++;
                        }
                        if (propExt) {
                            _context = propExt.context; // we could move IPropertiesPlugin to common as well
                        }
                    }
                }
            };
            _self.teardown = function () {
                // Remove all instrumentation hooks
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_hooks, function (fn) {
                    fn.rm();
                });
                _hooks = [];
                _fetchInitialized = false;
                _xhrInitialized = false;
                _self.setInitialized(false);
            };
            _self.trackDependencyData = function (dependency, properties) {
                _self[strTrackDependencyDataInternal](dependency, properties);
            };
            _self.includeCorrelationHeaders = function (ajaxData, input, init, xhr) {
                // Test Hook to allow the overriding of the location host
                var currentWindowHost = _self["_currentWindowHost"] || _currentWindowHost;
                if (input) { // Fetch
                    if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.CorrelationIdHelper.canIncludeCorrelationHeader(_config, ajaxData.getAbsoluteUrl(), currentWindowHost)) {
                        if (!init) {
                            init = {};
                        }
                        // init headers override original request headers
                        // so, if they exist use only them, otherwise use request's because they should have been applied in the first place
                        // not using original request headers will result in them being lost
                        init.headers = new Headers(init.headers || (input instanceof Request ? (input.headers || {}) : {}));
                        if (_isUsingAIHeaders) {
                            var id = "|" + ajaxData.traceID + "." + ajaxData.spanID;
                            init.headers.set(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestIdHeader, id);
                            if (_enableRequestHeaderTracking) {
                                ajaxData.requestHeaders[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestIdHeader] = id;
                            }
                        }
                        var appId = _config.appId || (_context && _context.appId());
                        if (appId) {
                            init.headers.set(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeader, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextAppIdFormat + appId);
                            if (_enableRequestHeaderTracking) {
                                ajaxData.requestHeaders[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeader] = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextAppIdFormat + appId;
                            }
                        }
                        if (_isUsingW3CHeaders) {
                            var traceparent = new _TraceParent__WEBPACK_IMPORTED_MODULE_11__.Traceparent(ajaxData.traceID, ajaxData.spanID);
                            init.headers.set(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.traceParentHeader, traceparent.toString());
                            if (_enableRequestHeaderTracking) {
                                ajaxData.requestHeaders[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.traceParentHeader] = traceparent.toString();
                            }
                        }
                    }
                    return init;
                }
                else if (xhr) { // XHR
                    if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.CorrelationIdHelper.canIncludeCorrelationHeader(_config, ajaxData.getAbsoluteUrl(), currentWindowHost)) {
                        if (_isUsingAIHeaders) {
                            var id = "|" + ajaxData.traceID + "." + ajaxData.spanID;
                            xhr.setRequestHeader(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestIdHeader, id);
                            if (_enableRequestHeaderTracking) {
                                ajaxData.requestHeaders[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestIdHeader] = id;
                            }
                        }
                        var appId = _config.appId || (_context && _context.appId());
                        if (appId) {
                            xhr.setRequestHeader(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeader, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextAppIdFormat + appId);
                            if (_enableRequestHeaderTracking) {
                                ajaxData.requestHeaders[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeader] = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextAppIdFormat + appId;
                            }
                        }
                        if (_isUsingW3CHeaders) {
                            var traceparent = new _TraceParent__WEBPACK_IMPORTED_MODULE_11__.Traceparent(ajaxData.traceID, ajaxData.spanID);
                            xhr.setRequestHeader(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.traceParentHeader, traceparent.toString());
                            if (_enableRequestHeaderTracking) {
                                ajaxData.requestHeaders[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.traceParentHeader] = traceparent.toString();
                            }
                        }
                    }
                    return xhr;
                }
                return undefined;
            };
            _self[strTrackDependencyDataInternal] = function (dependency, properties, systemProperties) {
                if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {
                    // Hack since expected format in w3c mode is |abc.def.
                    // Non-w3c format is |abc.def
                    // @todo Remove if better solution is available, e.g. handle in portal
                    if ((_config.distributedTracingMode === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.W3C
                        || _config.distributedTracingMode === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.AI_AND_W3C)
                        && typeof dependency.id === "string" && dependency.id[dependency.id.length - 1] !== ".") {
                        dependency.id += ".";
                    }
                    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(dependency.startTime)) {
                        dependency.startTime = new Date();
                    }
                    var item = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.TelemetryItemCreator.create(dependency, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.RemoteDependencyData.dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);
                    _self.core.track(item);
                }
                else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {
                    _throwInternalCritical(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.MaxAjaxPerPVExceeded, "Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.", true);
                }
                ++_trackAjaxAttempts;
            };
            // discard the header if it's defined as ignoreHeaders in ICorrelationConfig
            function _canIncludeHeaders(header) {
                var rlt = true;
                if (header || _config.ignoreHeaders) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_config.ignoreHeaders, (function (key) {
                        if (key.toLowerCase() === header.toLowerCase()) {
                            rlt = false;
                            return -1;
                        }
                    }));
                }
                return rlt;
            }
            // Fetch Stuff
            function _instrumentFetch() {
                var fetch = _supportsFetch();
                if (!fetch) {
                    return;
                }
                var global = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
                var isPolyfill = fetch.polyfill;
                if (_config.disableFetchTracking === false) {
                    _hooks.push((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_14__.InstrumentFunc)(global, strFetch, {
                        // Add request hook
                        req: function (callDetails, input, init) {
                            var fetchData;
                            if (_fetchInitialized &&
                                !_isDisabledRequest(null, input, init) &&
                                // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates
                                !(isPolyfill && _xhrInitialized)) {
                                var ctx = callDetails.ctx();
                                fetchData = _createFetchRecord(input, init);
                                var newInit = _self.includeCorrelationHeaders(fetchData, input, init);
                                if (newInit !== init) {
                                    callDetails.set(1, newInit);
                                }
                                ctx.data = fetchData;
                            }
                        },
                        rsp: function (callDetails, input) {
                            var fetchData = callDetails.ctx().data;
                            if (fetchData) {
                                // Replace the result with the new promise from this code
                                callDetails.rslt = callDetails.rslt.then(function (response) {
                                    _reportFetchMetrics(callDetails, (response || {}).status, input, response, fetchData, function () {
                                        var ajaxResponse = {
                                            statusText: response.statusText,
                                            headerMap: null,
                                            correlationContext: _getFetchCorrelationContext(response)
                                        };
                                        if (_enableResponseHeaderTracking) {
                                            var responseHeaderMap_1 = {};
                                            response.headers.forEach(function (value, name) {
                                                if (_canIncludeHeaders(name)) {
                                                    responseHeaderMap_1[name] = value;
                                                }
                                            });
                                            ajaxResponse.headerMap = responseHeaderMap_1;
                                        }
                                        return ajaxResponse;
                                    });
                                    return response;
                                })["catch"](function (reason) {
                                    _reportFetchMetrics(callDetails, 0, input, null, fetchData, null, { error: reason.message });
                                    throw reason;
                                });
                            }
                        },
                        // Create an error callback to report any hook errors
                        hkErr: _createErrorCallbackFunc(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxOpen, "Failed to monitor Window.fetch, monitoring data for this fetch call may be incorrect.")
                    }));
                    _fetchInitialized = true;
                }
                else if (isPolyfill) {
                    // If fetch is a polyfill we need to capture the request to ensure that we correctly track
                    // disabled request URLS (i.e. internal urls) to ensure we don't end up in a constant loop
                    // of reporting ourselves, for example React Native uses a polyfill for fetch
                    // Note: Polyfill implementations that don't support the "poyyfill" tag are not supported
                    // the workaround is to add a polyfill property to your fetch implementation before initializing
                    // App Insights
                    _hooks.push((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_14__.InstrumentFunc)(global, strFetch, {
                        req: function (callDetails, input, init) {
                            // Just call so that we record any disabled URL
                            _isDisabledRequest(null, input, init);
                        }
                    }));
                }
                if (isPolyfill) {
                    // retag the instrumented fetch with the same polyfill settings this is mostly for testing
                    // But also supports multiple App Insights usages
                    global[strFetch].polyfill = isPolyfill;
                }
            }
            function _hookProto(target, funcName, callbacks) {
                _hooks.push((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_14__.InstrumentProto)(target, funcName, callbacks));
            }
            function _instrumentXhr() {
                if (_supportsAjaxMonitoring(_self) && !_xhrInitialized) {
                    // Instrument open
                    _hookProto(XMLHttpRequest, "open", {
                        req: function (args, method, url, async) {
                            var xhr = args.inst;
                            var ajaxData = xhr[strAjaxData];
                            if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, true)) {
                                if (!ajaxData || !ajaxData.xhrMonitoringState.openDone) {
                                    // Only create a single ajaxData (even when multiple AI instances are running)
                                    _openHandler(xhr, method, url, async);
                                }
                                // always attach to the on ready state change (required for handling multiple instances)
                                _attachToOnReadyStateChange(xhr);
                            }
                        },
                        hkErr: _createErrorCallbackFunc(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxOpen, "Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.")
                    });
                    // Instrument send
                    _hookProto(XMLHttpRequest, "send", {
                        req: function (args, context) {
                            var xhr = args.inst;
                            var ajaxData = xhr[strAjaxData];
                            if (_isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState.sendDone) {
                                _createMarkId("xhr", ajaxData);
                                ajaxData.requestSentTime = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.dateTimeUtilsNow)();
                                _self.includeCorrelationHeaders(ajaxData, undefined, undefined, xhr);
                                ajaxData.xhrMonitoringState.sendDone = true;
                            }
                        },
                        hkErr: _createErrorCallbackFunc(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxSend, "Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.")
                    });
                    // Instrument abort
                    _hookProto(XMLHttpRequest, "abort", {
                        req: function (args) {
                            var xhr = args.inst;
                            var ajaxData = xhr[strAjaxData];
                            if (_isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState.abortDone) {
                                ajaxData.aborted = 1;
                                ajaxData.xhrMonitoringState.abortDone = true;
                            }
                        },
                        hkErr: _createErrorCallbackFunc(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxAbort, "Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.")
                    });
                    // Instrument setRequestHeader
                    if (_enableRequestHeaderTracking) {
                        _hookProto(XMLHttpRequest, "setRequestHeader", {
                            req: function (args, header, value) {
                                var xhr = args.inst;
                                if (_isMonitoredXhrInstance(xhr) && _canIncludeHeaders(header)) {
                                    xhr[strAjaxData].requestHeaders[header] = value;
                                }
                            },
                            hkErr: _createErrorCallbackFunc(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxSetRequestHeader, "Failed to monitor XMLHttpRequest.setRequestHeader, monitoring data for this ajax call may be incorrect.")
                        });
                    }
                    _xhrInitialized = true;
                }
            }
            function _isDisabledRequest(xhr, request, init) {
                var isDisabled = false;
                var theUrl = ((!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isString)(request) ? (request || {}).url || "" : request) || "").toLowerCase();
                // check excludeRequestFromAutoTrackingPatterns before stripping off any query string
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(_excludeRequestFromAutoTrackingPatterns, function (regex) {
                    var theRegex = regex;
                    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isString)(regex)) {
                        theRegex = new RegExp(regex);
                    }
                    if (!isDisabled) {
                        isDisabled = theRegex.test(theUrl);
                    }
                });
                // if request url matches with exclude regex pattern, return true and no need to check for headers
                if (isDisabled) {
                    return isDisabled;
                }
                var idx = _indexOf(theUrl, "?");
                var idx2 = _indexOf(theUrl, "#");
                if (idx === -1 || (idx2 !== -1 && idx2 < idx)) {
                    idx = idx2;
                }
                if (idx !== -1) {
                    // Strip off any Query string
                    theUrl = theUrl.substring(0, idx);
                }
                // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector
                if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(xhr)) {
                    // Look on the XMLHttpRequest of the URL string value
                    isDisabled = xhr[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.DisabledPropertyName] === true || theUrl[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.DisabledPropertyName] === true;
                }
                else if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(request)) { // fetch
                    // Look for DisabledPropertyName in either Request or RequestInit
                    isDisabled = (typeof request === "object" ? request[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.DisabledPropertyName] === true : false) ||
                        (init ? init[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.DisabledPropertyName] === true : false);
                }
                // Also add extra check just in case the XHR or fetch objects where not decorated with the DisableProperty due to sealing or freezing
                if (!isDisabled && theUrl && (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.isInternalApplicationInsightsEndpoint)(theUrl)) {
                    isDisabled = true;
                }
                if (isDisabled) {
                    // Add the disabled url if not present
                    if (!_disabledUrls[theUrl]) {
                        _disabledUrls[theUrl] = 1;
                    }
                }
                else {
                    // Check to see if the url is listed as disabled
                    if (_disabledUrls[theUrl]) {
                        isDisabled = true;
                    }
                }
                return isDisabled;
            }
            /// <summary>Verifies that particalar instance of XMLHttpRequest needs to be monitored</summary>
            /// <param name="excludeAjaxDataValidation">Optional parameter. True if ajaxData must be excluded from verification</param>
            /// <returns type="bool">True if instance needs to be monitored, otherwise false</returns>
            function _isMonitoredXhrInstance(xhr, excludeAjaxDataValidation) {
                var ajaxValidation = true;
                var initialized = _xhrInitialized;
                if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(xhr)) {
                    ajaxValidation = excludeAjaxDataValidation === true || !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(xhr[strAjaxData]);
                }
                // checking to see that all interested functions on xhr were instrumented
                return initialized
                    // checking on ajaxData to see that it was not removed in user code
                    && ajaxValidation;
            }
            function _openHandler(xhr, method, url, async) {
                var traceID = (_context && _context.telemetryTrace && _context.telemetryTrace.traceID) || (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_16__.generateW3CId)();
                var spanID = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_16__.generateW3CId)().substr(0, 16);
                var ajaxData = new _ajaxRecord__WEBPACK_IMPORTED_MODULE_17__.ajaxRecord(traceID, spanID, _self[strDiagLog]());
                ajaxData.method = method;
                ajaxData.requestUrl = url;
                ajaxData.xhrMonitoringState.openDone = true;
                ajaxData.requestHeaders = {};
                ajaxData.async = async;
                ajaxData.errorStatusText = _enableAjaxErrorStatusText;
                xhr[strAjaxData] = ajaxData;
            }
            function _attachToOnReadyStateChange(xhr) {
                xhr[strAjaxData].xhrMonitoringState.stateChangeAttached = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.attachEvent)(xhr, "readystatechange", function () {
                    try {
                        if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr)) {
                            _onAjaxComplete(xhr);
                        }
                    }
                    catch (e) {
                        var exceptionText = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e);
                        // ignore messages with c00c023f, as this a known IE9 XHR abort issue
                        if (!exceptionText || _indexOf(exceptionText.toLowerCase(), "c00c023f") === -1) {
                            _throwInternalCritical(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxRSC, "Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.", {
                                ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),
                                exception: exceptionText
                            });
                        }
                    }
                });
            }
            function _getResponseText(xhr) {
                try {
                    var responseType = xhr.responseType;
                    if (responseType === "" || responseType === "text") {
                        // As per the specification responseText is only valid if the type is an empty string or "text"
                        return xhr.responseText;
                    }
                }
                catch (e) {
                    // This shouldn't happen because of the above check -- but just in case, so just ignore
                }
                return null;
            }
            function _onAjaxComplete(xhr) {
                var ajaxData = xhr[strAjaxData];
                ajaxData.responseFinishedTime = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.dateTimeUtilsNow)();
                ajaxData.status = xhr.status;
                function _reportXhrError(e, failedProps) {
                    var errorProps = failedProps || {};
                    errorProps["ajaxDiagnosticsMessage"] = _getFailedAjaxDiagnosticsMessage(xhr);
                    if (e) {
                        errorProps["exception"] = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e);
                    }
                    _throwInternalWarning(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxDur, "Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.", errorProps);
                }
                _findPerfResourceEntry("xmlhttprequest", ajaxData, function () {
                    try {
                        var dependency = ajaxData.CreateTrackItem("Ajax", _enableRequestHeaderTracking, function () {
                            var ajaxResponse = {
                                statusText: xhr.statusText,
                                headerMap: null,
                                correlationContext: _getAjaxCorrelationContext(xhr),
                                type: xhr.responseType,
                                responseText: _getResponseText(xhr),
                                response: xhr.response
                            };
                            if (_enableResponseHeaderTracking) {
                                var headers = xhr.getAllResponseHeaders();
                                if (headers) {
                                    // xhr.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string or null
                                    // the regex converts the header string into an array of individual headers
                                    var arr = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.strTrim)(headers).split(/[\r\n]+/);
                                    var responseHeaderMap_2 = {};
                                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.arrForEach)(arr, function (line) {
                                        var parts = line.split(": ");
                                        var header = parts.shift();
                                        var value = parts.join(": ");
                                        if (_canIncludeHeaders(header)) {
                                            responseHeaderMap_2[header] = value;
                                        }
                                    });
                                    ajaxResponse.headerMap = responseHeaderMap_2;
                                }
                            }
                            return ajaxResponse;
                        });
                        var properties = void 0;
                        try {
                            if (!!_addRequestContext) {
                                properties = _addRequestContext({ status: xhr.status, xhr: xhr });
                            }
                        }
                        catch (e) {
                            _throwInternalWarning(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedAddingCustomDefinedRequestContext, "Failed to add custom defined request context as configured call back may missing a null check.");
                        }
                        if (dependency) {
                            if (properties !== undefined) {
                                dependency.properties = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_5__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_5__.__assignFn)({}, dependency.properties), properties);
                            }
                            _self[strTrackDependencyDataInternal](dependency);
                        }
                        else {
                            _reportXhrError(null, {
                                requestSentTime: ajaxData.requestSentTime,
                                responseFinishedTime: ajaxData.responseFinishedTime
                            });
                        }
                    }
                    finally {
                        // cleanup telemetry data
                        try {
                            xhr[strAjaxData] = null;
                        }
                        catch (e) {
                            // May throw in environments that prevent extension or freeze xhr
                        }
                    }
                }, function (e) {
                    _reportXhrError(e, null);
                });
            }
            function _getAjaxCorrelationContext(xhr) {
                try {
                    var responseHeadersString = xhr.getAllResponseHeaders();
                    if (responseHeadersString !== null) {
                        var index = _indexOf(responseHeadersString.toLowerCase(), _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeaderLowerCase);
                        if (index !== -1) {
                            var responseHeader = xhr.getResponseHeader(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeader);
                            return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.CorrelationIdHelper.getCorrelationContext(responseHeader);
                        }
                    }
                }
                catch (e) {
                    _throwInternalWarning(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.", {
                        ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),
                        exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e)
                    });
                }
            }
            function _createMarkId(type, ajaxData) {
                if (ajaxData.requestUrl && _markPrefix && _enableAjaxPerfTracking) {
                    var performance_1 = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)();
                    if (performance_1 && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(performance_1.mark)) {
                        _markCount++;
                        var markId = _markPrefix + type + "#" + _markCount;
                        performance_1.mark(markId);
                        var entries = performance_1.getEntriesByName(markId);
                        if (entries && entries.length === 1) {
                            ajaxData.perfMark = entries[0];
                        }
                    }
                }
            }
            function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {
                var perfMark = ajaxData.perfMark;
                var performance = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getPerformance)();
                var maxAttempts = _config.maxAjaxPerfLookupAttempts;
                var retryDelay = _config.ajaxPerfLookupDelay;
                var requestUrl = ajaxData.requestUrl;
                var attempt = 0;
                (function locateResourceTiming() {
                    try {
                        if (performance && perfMark) {
                            attempt++;
                            var perfTiming = null;
                            var entries = performance.getEntries();
                            for (var lp = entries.length - 1; lp >= 0; lp--) {
                                var entry = entries[lp];
                                if (entry) {
                                    if (entry.entryType === "resource") {
                                        if (entry.initiatorType === initiatorType &&
                                            (_indexOf(entry.name, requestUrl) !== -1 || _indexOf(requestUrl, entry.name) !== -1)) {
                                            perfTiming = entry;
                                        }
                                    }
                                    else if (entry.entryType === "mark" && entry.name === perfMark.name) {
                                        // We hit the start event
                                        ajaxData.perfTiming = perfTiming;
                                        break;
                                    }
                                    if (entry.startTime < perfMark.startTime - 1000) {
                                        // Fallback to try and reduce the time spent looking for the perf entry
                                        break;
                                    }
                                }
                            }
                        }
                        if (!perfMark || // - we don't have a perfMark or
                            ajaxData.perfTiming || // - we have not found the perf entry or
                            attempt >= maxAttempts || // - we have tried too many attempts or
                            ajaxData.async === false) { // - this is a sync request
                            if (perfMark && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(performance.clearMarks)) {
                                // Remove the mark so we don't fill up the performance resources too much
                                performance.clearMarks(perfMark.name);
                            }
                            ajaxData.perfAttempts = attempt;
                            // just continue and report the track event
                            trackCallback();
                        }
                        else {
                            // We need to wait for the browser to populate the window.performance entry
                            // This needs to be at least 1ms as waiting <= 1 (on firefox) is not enough time for fetch or xhr,
                            // this is a scheduling issue for the browser implementation
                            setTimeout(locateResourceTiming, retryDelay);
                        }
                    }
                    catch (e) {
                        reportError(e);
                    }
                })();
            }
            function _createFetchRecord(input, init) {
                var traceID = (_context && _context.telemetryTrace && _context.telemetryTrace.traceID) || (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_16__.generateW3CId)();
                var spanID = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_16__.generateW3CId)().substr(0, 16);
                var ajaxData = new _ajaxRecord__WEBPACK_IMPORTED_MODULE_17__.ajaxRecord(traceID, spanID, _self[strDiagLog]());
                ajaxData.requestSentTime = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.dateTimeUtilsNow)();
                ajaxData.errorStatusText = _enableAjaxErrorStatusText;
                if (input instanceof Request) {
                    ajaxData.requestUrl = input ? input.url : "";
                }
                else {
                    ajaxData.requestUrl = input;
                }
                var method = "GET";
                if (init && init.method) {
                    method = init.method;
                }
                else if (input && input instanceof Request) {
                    method = input.method;
                }
                ajaxData.method = method;
                var requestHeaders = {};
                if (_enableRequestHeaderTracking) {
                    var headers = new Headers((init ? init.headers : 0) || (input instanceof Request ? (input.headers || {}) : {}));
                    headers.forEach(function (value, key) {
                        if (_canIncludeHeaders(key)) {
                            requestHeaders[key] = value;
                        }
                    });
                }
                ajaxData.requestHeaders = requestHeaders;
                _createMarkId("fetch", ajaxData);
                return ajaxData;
            }
            function _getFailedFetchDiagnosticsMessage(input) {
                var result = "";
                try {
                    if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(input)) {
                        if (typeof (input) === "string") {
                            result += "(url: '".concat(input, "')");
                        }
                        else {
                            result += "(url: '".concat(input.url, "')");
                        }
                    }
                }
                catch (e) {
                    _throwInternalCritical(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxOpen, "Failed to grab failed fetch diagnostics message", { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e) });
                }
                return result;
            }
            function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {
                if (!ajaxData) {
                    return;
                }
                function _reportFetchError(msgId, e, failedProps) {
                    var errorProps = failedProps || {};
                    errorProps["fetchDiagnosticsMessage"] = _getFailedFetchDiagnosticsMessage(input);
                    if (e) {
                        errorProps["exception"] = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e);
                    }
                    _throwInternalWarning(_self, msgId, "Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.", errorProps);
                }
                ajaxData.responseFinishedTime = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.dateTimeUtilsNow)();
                ajaxData.status = status;
                _findPerfResourceEntry("fetch", ajaxData, function () {
                    var dependency = ajaxData.CreateTrackItem("Fetch", _enableRequestHeaderTracking, getResponse);
                    var properties;
                    try {
                        if (!!_addRequestContext) {
                            properties = _addRequestContext({ status: status, request: input, response: response });
                        }
                    }
                    catch (e) {
                        _throwInternalWarning(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedAddingCustomDefinedRequestContext, "Failed to add custom defined request context as configured call back may missing a null check.");
                    }
                    if (dependency) {
                        if (properties !== undefined) {
                            dependency.properties = (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_5__.__assignFn)((0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_5__.__assignFn)({}, dependency.properties), properties);
                        }
                        _self[strTrackDependencyDataInternal](dependency);
                    }
                    else {
                        _reportFetchError(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxDur, null, {
                            requestSentTime: ajaxData.requestSentTime,
                            responseFinishedTime: ajaxData.responseFinishedTime
                        });
                    }
                }, function (e) {
                    _reportFetchError(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, e, null);
                });
            }
            function _getFetchCorrelationContext(response) {
                if (response && response.headers) {
                    try {
                        var responseHeader = response.headers.get(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.RequestHeaders.requestContextHeader);
                        return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.CorrelationIdHelper.getCorrelationContext(responseHeader);
                    }
                    catch (e) {
                        _throwInternalWarning(_self, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__._InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.", {
                            fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response),
                            exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dumpObj)(e)
                        });
                    }
                }
            }
        });
        return _this;
    }
    AjaxMonitor.getDefaultConfig = function () {
        var config = {
            maxAjaxCallsPerView: 500,
            disableAjaxTracking: false,
            disableFetchTracking: true,
            excludeRequestFromAutoTrackingPatterns: undefined,
            disableCorrelationHeaders: false,
            distributedTracingMode: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.DistributedTracingModes.AI_AND_W3C,
            correlationHeaderExcludedDomains: [
                "*.blob.core.windows.net",
                "*.blob.core.chinacloudapi.cn",
                "*.blob.core.cloudapi.de",
                "*.blob.core.usgovcloudapi.net"
            ],
            correlationHeaderDomains: undefined,
            correlationHeaderExcludePatterns: undefined,
            appId: undefined,
            enableCorsCorrelation: false,
            enableRequestHeaderTracking: false,
            enableResponseHeaderTracking: false,
            enableAjaxErrorStatusText: false,
            enableAjaxPerfTracking: false,
            maxAjaxPerfLookupAttempts: 3,
            ajaxPerfLookupDelay: 25,
            ignoreHeaders: [
                "Authorization",
                "X-API-Key",
                "WWW-Authenticate"
            ],
            addRequestContext: undefined
        };
        return config;
    };
    AjaxMonitor.getEmptyConfig = function () {
        var emptyConfig = this.getDefaultConfig();
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.objForEachKey)(emptyConfig, function (value) {
            emptyConfig[value] = undefined;
        });
        return emptyConfig;
    };
// Removed Stub for AjaxMonitor.prototype.initialize.
// Removed Stub for AjaxMonitor.prototype.teardown.
    AjaxMonitor.prototype.processTelemetry = function (item, itemCtx) {
        this.processNext(item, itemCtx);
    };
// Removed Stub for AjaxMonitor.prototype.trackDependencyData.
// Removed Stub for AjaxMonitor.prototype.includeCorrelationHeaders.
// Removed Stub for AjaxMonitor.prototype.trackDependencyDataInternal.
    AjaxMonitor.identifier = "AjaxDependencyPlugin";
    return AjaxMonitor;
}(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_18__.BaseTelemetryPlugin));

//# sourceMappingURL=ajax.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajaxRecord.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajaxRecord.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XHRMonitoringState": () => (/* binding */ XHRMonitoringState),
/* harmony export */   "ajaxRecord": () => (/* binding */ ajaxRecord)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/UrlHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*
 * Application Insights JavaScript SDK - Dependencies Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





var strProperties = "properties";
/** @ignore */
function _calcPerfDuration(resourceEntry, start, end) {
    var result = 0;
    var from = resourceEntry[start];
    var to = resourceEntry[end];
    if (from && to) {
        result = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(from, to);
    }
    return result;
}
/** @ignore */
function _setPerfDuration(props, name, resourceEntry, start, end) {
    var result = 0;
    var value = _calcPerfDuration(resourceEntry, start, end);
    if (value) {
        result = _setPerfValue(props, name, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.msToTimeSpan)(value));
    }
    return result;
}
/** @ignore */
function _setPerfValue(props, name, value) {
    var strPerf = "ajaxPerf";
    var result = 0;
    if (props && name && value) {
        var perfData = props[strPerf] = (props[strPerf] || {});
        perfData[name] = value;
        result = 1;
    }
    return result;
}
/** @ignore */
function _populatePerfData(ajaxData, dependency) {
    /*
    * https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API
    *  | -startTime
    *  | -redirectStart
    *  |            | -redirectEnd
    *  |            | | -fetchStart
    *  |            | |   | -domainLookupStart
    *  |            | |   |                |- domainLookupEnd
    *  |            | |   |                | | -connectStart
    *  |            | |   |                | |  | -secureConnectionStart
    *  |            | |   |                | |  |        | -connectEnd
    *  |            | |   |                | |  |        | | -requestStart
    *  |            | |   |                | |  |        | |           | | -responseStart
    *  |            | |   |                | |  |        | |           | |            | | -responseEnd
    *  +------------+-+---+----------------+-+--+--------+-+-----------+-+------------+-+
    *  |--redirect--| |---|--domainLookup--| |--connect--| |--request--| |--response--| |
    *  |-------------------networkConnect----------------|
    *  |                                                   |---------sentRequest--------|
    *  |------------------------------------perfTotal-----------------------------------|
    */
    var resourceEntry = ajaxData.perfTiming;
    var props = dependency[strProperties] || {};
    var propsSet = 0;
    var strName = "name";
    var strStart = "Start";
    var strEnd = "End";
    var strDomainLookup = "domainLookup";
    var strConnect = "connect";
    var strRedirect = "redirect";
    var strRequest = "request";
    var strResponse = "response";
    var strDuration = "duration";
    var strStartTime = "startTime";
    var strDomainLookupStart = strDomainLookup + strStart;
    var strDomainLookupEnd = strDomainLookup + strEnd;
    var strConnectStart = strConnect + strStart;
    var strConnectEnd = strConnect + strEnd;
    var strRequestStart = strRequest + strStart;
    var strRequestEnd = strRequest + strEnd;
    var strResponseStart = strResponse + strStart;
    var strResponseEnd = strResponse + strEnd;
    var strRedirectStart = strRedirect + strStart;
    var strRedirectEnd = strRedirect = strEnd;
    var strTransferSize = "transferSize";
    var strEncodedBodySize = "encodedBodySize";
    var strDecodedBodySize = "decodedBodySize";
    var strServerTiming = "serverTiming";
    if (resourceEntry) {
        // redirect
        propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd);
        // domainLookup
        propsSet |= _setPerfDuration(props, strDomainLookup, resourceEntry, strDomainLookupStart, strDomainLookupEnd);
        // connect
        propsSet |= _setPerfDuration(props, strConnect, resourceEntry, strConnectStart, strConnectEnd);
        // request
        propsSet |= _setPerfDuration(props, strRequest, resourceEntry, strRequestStart, strRequestEnd);
        // response
        propsSet |= _setPerfDuration(props, strResponse, resourceEntry, strResponseStart, strResponseEnd);
        // Network connection time
        propsSet |= _setPerfDuration(props, "networkConnect", resourceEntry, strStartTime, strConnectEnd);
        // Sent Request
        propsSet |= _setPerfDuration(props, "sentRequest", resourceEntry, strRequestStart, strResponseEnd);
        // PerfTotal / Duration
        var duration = resourceEntry[strDuration];
        if (!duration) {
            duration = _calcPerfDuration(resourceEntry, strStartTime, strResponseEnd) || 0;
        }
        propsSet |= _setPerfValue(props, strDuration, duration);
        propsSet |= _setPerfValue(props, "perfTotal", duration);
        var serverTiming = resourceEntry[strServerTiming];
        if (serverTiming) {
            var server_1 = {};
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.arrForEach)(serverTiming, function (value, idx) {
                var name = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.normalizeJsName)(value[strName] || "" + idx);
                var newValue = server_1[name] || {};
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.objForEachKey)(value, function (key, val) {
                    if (key !== strName && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isString)(val) || (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val)) {
                        if (newValue[key]) {
                            val = newValue[key] + ";" + val;
                        }
                        if (val || !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.isString)(val)) {
                            // Only set the value if it has a value and it's not an empty string
                            newValue[key] = val;
                        }
                    }
                });
                server_1[name] = newValue;
            });
            propsSet |= _setPerfValue(props, strServerTiming, server_1);
        }
        propsSet |= _setPerfValue(props, strTransferSize, resourceEntry[strTransferSize]);
        propsSet |= _setPerfValue(props, strEncodedBodySize, resourceEntry[strEncodedBodySize]);
        propsSet |= _setPerfValue(props, strDecodedBodySize, resourceEntry[strDecodedBodySize]);
    }
    else {
        if (ajaxData.perfMark) {
            propsSet |= _setPerfValue(props, "missing", ajaxData.perfAttempts);
        }
    }
    if (propsSet) {
        dependency[strProperties] = props;
    }
}
var XHRMonitoringState = /** @class */ (function () {
    function XHRMonitoringState() {
        var self = this;
        self.openDone = false;
        self.setRequestHeaderDone = false;
        self.sendDone = false;
        self.abortDone = false;
        // <summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>
        self.stateChangeAttached = false;
    }
    return XHRMonitoringState;
}());

var ajaxRecord = /** @class */ (function () {
    function ajaxRecord(traceID, spanID, logger) {
        var self = this;
        var _logger = logger;
        var strResponseText = "responseText";
        // Assigning the initial/default values within the constructor to avoid typescript from creating a bunch of
        // this.XXXX = null
        self.perfMark = null;
        self.completed = false;
        self.requestHeadersSize = null;
        self.requestHeaders = null;
        self.responseReceivingDuration = null;
        self.callbackDuration = null;
        self.ajaxTotalDuration = null;
        self.aborted = 0;
        self.pageUrl = null;
        self.requestUrl = null;
        self.requestSize = 0;
        self.method = null;
        self.status = null;
        self.requestSentTime = null;
        self.responseStartedTime = null;
        self.responseFinishedTime = null;
        self.callbackFinishedTime = null;
        self.endTime = null;
        self.xhrMonitoringState = new XHRMonitoringState();
        self.clientFailure = 0;
        self.traceID = traceID;
        self.spanID = spanID;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_3__["default"])(ajaxRecord, self, function (self) {
            self.getAbsoluteUrl = function () {
                return self.requestUrl ? (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.urlGetAbsoluteUrl)(self.requestUrl) : null;
            };
            self.getPathName = function () {
                return self.requestUrl ? (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__.dataSanitizeUrl)(_logger, (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.urlGetCompleteUrl)(self.method, self.requestUrl)) : null;
            };
            self.CreateTrackItem = function (ajaxType, enableRequestHeaderTracking, getResponse) {
                var _a;
                // round to 3 decimal points
                self.ajaxTotalDuration = Math.round((0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.dateTimeUtilsDuration)(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;
                if (self.ajaxTotalDuration < 0) {
                    return null;
                }
                var dependency = (_a = {
                        id: "|" + self.traceID + "." + self.spanID,
                        target: self.getAbsoluteUrl(),
                        name: self.getPathName(),
                        type: ajaxType,
                        startTime: null,
                        duration: self.ajaxTotalDuration,
                        success: (+(self.status)) >= 200 && (+(self.status)) < 400,
                        responseCode: (+(self.status)),
                        method: self.method
                    },
                    _a[strProperties] = { HttpMethod: self.method },
                    _a);
                if (self.requestSentTime) {
                    // Set the correct dependency start time
                    dependency.startTime = new Date();
                    dependency.startTime.setTime(self.requestSentTime);
                }
                // Add Ajax perf details if available
                _populatePerfData(self, dependency);
                if (enableRequestHeaderTracking) {
                    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.objKeys)(self.requestHeaders).length > 0) {
                        dependency[strProperties] = dependency[strProperties] || {};
                        dependency[strProperties].requestHeaders = self.requestHeaders;
                    }
                }
                if (getResponse) {
                    var response = getResponse();
                    if (response) {
                        // enrich dependency target with correlation context from the server
                        var correlationContext = response.correlationContext;
                        if (correlationContext) {
                            dependency.correlationContext = /* dependency.target + " | " + */ correlationContext;
                        }
                        if (response.headerMap) {
                            if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.objKeys)(response.headerMap).length > 0) {
                                dependency[strProperties] = dependency[strProperties] || {};
                                dependency[strProperties].responseHeaders = response.headerMap;
                            }
                        }
                        if (self.errorStatusText && self.status >= 400) {
                            var responseType = response.type;
                            dependency[strProperties] = dependency[strProperties] || {};
                            if (responseType === "" || responseType === "text") {
                                dependency[strProperties][strResponseText] = response[strResponseText] ? response.statusText + " - " + response[strResponseText] : response.statusText;
                            }
                            if (responseType === "json") {
                                dependency[strProperties][strResponseText] = response.response ? response.statusText + " - " + JSON.stringify(response.response) : response.statusText;
                            }
                        }
                    }
                }
                return dependency;
            };
        });
    }
// Removed Stub for ajaxRecord.prototype.getAbsoluteUrl.
// Removed Stub for ajaxRecord.prototype.getPathName.
// Removed Stub for ajaxRecord.prototype.CreateTrackItem.
    return ajaxRecord;
}());

//# sourceMappingURL=ajaxRecord.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Application.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Application.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Application": () => (/* binding */ Application)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var Application = /** @class */ (function () {
    function Application() {
    }
    return Application;
}());

//# sourceMappingURL=Application.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Device.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Device.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Device": () => (/* binding */ Device)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var Device = /** @class */ (function () {
    /**
     * Constructs a new instance of the Device class
     */
    function Device() {
        // don't attempt to fingerprint browsers
        this.id = "browser";
        // Device type is a dimension in our data platform
        // Setting it to 'Browser' allows to separate client and server dependencies/exceptions
        this.deviceClass = "Browser";
    }
    return Device;
}());

//# sourceMappingURL=Device.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Internal.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Internal.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Internal": () => (/* binding */ Internal)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var Version = "2.7.4";
var Internal = /** @class */ (function () {
    /**
     * Constructs a new instance of the internal telemetry data class.
     */
    function Internal(config) {
        this.sdkVersion = (config.sdkExtension && config.sdkExtension() ? config.sdkExtension() + "_" : "") + "javascript:" + Version;
    }
    return Internal;
}());

//# sourceMappingURL=Internal.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Location.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Location.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Location": () => (/* binding */ Location)
/* harmony export */ });
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var Location = /** @class */ (function () {
    function Location() {
    }
    return Location;
}());

//# sourceMappingURL=Location.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Session.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Session.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Session": () => (/* binding */ Session),
/* harmony export */   "_SessionManager": () => (/* binding */ _SessionManager)
/* harmony export */ });
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





var cookieNameConst = "ai_session";
var Session = /** @class */ (function () {
    function Session() {
    }
    return Session;
}());

var _SessionManager = /** @class */ (function () {
    function _SessionManager(config, core) {
        var self = this;
        var _storageNamePrefix;
        var _cookieUpdatedTimestamp;
        var _logger = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.safeGetLogger)(core);
        var _cookieManager = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.safeGetCookieMgr)(core);
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__["default"])(_SessionManager, self, function (_self) {
            if (!config) {
                config = {};
            }
            if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(config.sessionExpirationMs)) {
                config.sessionExpirationMs = function () { return _SessionManager.acquisitionSpan; };
            }
            if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(config.sessionRenewalMs)) {
                config.sessionRenewalMs = function () { return _SessionManager.renewalSpan; };
            }
            _self.config = config;
            // sessionCookiePostfix takes the preference if it is configured, otherwise takes namePrefix if configured.
            var sessionCookiePostfix = (_self.config.sessionCookiePostfix && _self.config.sessionCookiePostfix()) ?
                _self.config.sessionCookiePostfix() :
                ((_self.config.namePrefix && _self.config.namePrefix()) ? _self.config.namePrefix() : "");
            _storageNamePrefix = function () { return cookieNameConst + sessionCookiePostfix; };
            _self.automaticSession = new Session();
            _self.update = function () {
                // Always using Date getTime() as there is a bug in older IE instances that causes the performance timings to have the hi-bit set eg 0x800000000 causing
                // the number to be incorrect.
                var nowMs = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.dateNow)();
                var isExpired = false;
                var session = _self.automaticSession;
                if (!session.id) {
                    isExpired = !_initializeAutomaticSession(session, nowMs);
                }
                var sessionExpirationMs = _self.config.sessionExpirationMs();
                if (!isExpired && sessionExpirationMs > 0) {
                    var sessionRenewalMs = _self.config.sessionRenewalMs();
                    var timeSinceAcqMs = nowMs - session.acquisitionDate;
                    var timeSinceRenewalMs = nowMs - session.renewalDate;
                    isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0; // expired if the acquisition or last renewal are in the future
                    isExpired = isExpired || timeSinceAcqMs > sessionExpirationMs; // expired if the time since acquisition is more than session Expiration
                    isExpired = isExpired || timeSinceRenewalMs > sessionRenewalMs; // expired if the time since last renewal is more than renewal period
                }
                // renew if acquisitionSpan or renewalSpan has elapsed
                if (isExpired) {
                    // update automaticSession so session state has correct id
                    _renew(nowMs);
                }
                else {
                    // do not update the cookie more often than cookieUpdateInterval
                    if (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {
                        _setCookie(session, nowMs);
                    }
                }
            };
            /**
             *  Record the current state of the automatic session and store it in our cookie string format
             *  into the browser's local storage. This is used to restore the session data when the cookie
             *  expires.
             */
            _self.backup = function () {
                var session = _self.automaticSession;
                _setStorage(session.id, session.acquisitionDate, session.renewalDate);
            };
            /**
             * Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to
             * initialize the automatic session.
             * @returns true if values set otherwise false
             */
            function _initializeAutomaticSession(session, now) {
                var isValid = false;
                var cookieValue = _cookieManager.get(_storageNamePrefix());
                if (cookieValue && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isFunction)(cookieValue.split)) {
                    isValid = _initializeAutomaticSessionWithData(session, cookieValue);
                }
                else {
                    // There's no cookie, but we might have session data in local storage
                    // This can happen if the session expired or the user actively deleted the cookie
                    // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.
                    // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.
                    var storageValue = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.utlGetLocalStorage)(_logger, _storageNamePrefix());
                    if (storageValue) {
                        isValid = _initializeAutomaticSessionWithData(session, storageValue);
                    }
                }
                return isValid || !!session.id;
            }
            /**
             * Extract id, acquisitionDate, and renewalDate from an ai_session payload string and
             * use this data to initialize automaticSession.
             *
             * @param {string} sessionData - The string stored in an ai_session cookie or local storage backup
             * @returns true if values set otherwise false
             */
            function _initializeAutomaticSessionWithData(session, sessionData) {
                var isValid = false;
                var sessionReset = ", session will be reset";
                var tokens = sessionData.split("|");
                if (tokens.length >= 2) {
                    try {
                        var acqMs = +tokens[1] || 0;
                        var renewalMs = +tokens[2] || 0;
                        if (isNaN(acqMs) || acqMs <= 0) {
                            _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__._InternalMessageId.SessionRenewalDateIsZero, "AI session acquisition date is 0" + sessionReset);
                        }
                        else if (isNaN(renewalMs) || renewalMs <= 0) {
                            _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__._InternalMessageId.SessionRenewalDateIsZero, "AI session renewal date is 0" + sessionReset);
                        }
                        else if (tokens[0]) {
                            // Everything looks valid so set the values
                            session.id = tokens[0];
                            session.acquisitionDate = acqMs;
                            session.renewalDate = renewalMs;
                            isValid = true;
                        }
                    }
                    catch (e) {
                        _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__._InternalMessageId.ErrorParsingAISessionCookie, "Error parsing ai_session value [" + (sessionData || "") + "]" + sessionReset + " - " + (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getExceptionName)(e), { exception: (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.dumpObj)(e) });
                    }
                }
                return isValid;
            }
            function _renew(nowMs) {
                var theConfig = (_self.config || {});
                var getNewId = (theConfig.getNewId ? theConfig.getNewId() : null) || _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.newId;
                _self.automaticSession.id = getNewId(theConfig.idLength ? theConfig.idLength() : 22);
                _self.automaticSession.acquisitionDate = nowMs;
                _setCookie(_self.automaticSession, nowMs);
                // If this browser does not support local storage, fire an internal log to keep track of it at this point
                if (!(0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.utlCanUseLocalStorage)()) {
                    _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__._InternalMessageId.BrowserDoesNotSupportLocalStorage, "Browser does not support local storage. Session durations will be inaccurate.");
                }
            }
            function _setCookie(session, nowMs) {
                var acq = session.acquisitionDate;
                session.renewalDate = nowMs;
                var config = _self.config;
                var renewalPeriodMs = config.sessionRenewalMs();
                // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner
                // Expiring the cookie will cause the session to expire even if the user isn't on the page
                var acqTimeLeftMs = (acq + config.sessionExpirationMs()) - nowMs;
                var cookie = [session.id, acq, nowMs];
                var maxAgeSec = 0;
                if (acqTimeLeftMs < renewalPeriodMs) {
                    maxAgeSec = acqTimeLeftMs / 1000;
                }
                else {
                    maxAgeSec = renewalPeriodMs / 1000;
                }
                var cookieDomain = config.cookieDomain ? config.cookieDomain() : null;
                // if sessionExpirationMs is set to 0, it means the expiry is set to 0 for this session cookie
                // A cookie with 0 expiry in the session cookie will never expire for that browser session.  If the browser is closed the cookie expires.
                // Depending on the browser, another instance does not inherit this cookie, however, another tab will
                _cookieManager.set(_storageNamePrefix(), cookie.join("|"), config.sessionExpirationMs() > 0 ? maxAgeSec : null, cookieDomain);
                _cookieUpdatedTimestamp = nowMs;
            }
            function _setStorage(guid, acq, renewal) {
                // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires
                // Browsers that don't support local storage won't be able to end sessions cleanly from the client
                // The server will notice this and end the sessions itself, with loss of accurate session duration
                (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.utlSetLocalStorage)(_logger, _storageNamePrefix(), [guid, acq, renewal].join("|"));
            }
        });
    }
// Removed Stub for _SessionManager.prototype.update.
// Removed Stub for _SessionManager.prototype.backup.
    _SessionManager.acquisitionSpan = 86400000; // 24 hours in ms
    _SessionManager.renewalSpan = 1800000; // 30 minutes in ms
    _SessionManager.cookieUpdateInterval = 60000; // 1 minute in ms
    return _SessionManager;
}());

//# sourceMappingURL=Session.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/TelemetryTrace.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/TelemetryTrace.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TelemetryTrace": () => (/* binding */ TelemetryTrace)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




var TelemetryTrace = /** @class */ (function () {
    function TelemetryTrace(id, parentId, name, logger) {
        var _self = this;
        _self.traceID = id || (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.generateW3CId)();
        _self.parentID = parentId;
        _self.name = name;
        var location = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.getLocation)();
        if (!name && location && location.pathname) {
            _self.name = location.pathname;
        }
        _self.name = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.dataSanitizeString)(logger, _self.name);
    }
    return TelemetryTrace;
}());

//# sourceMappingURL=TelemetryTrace.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/User.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/User.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "User": () => (/* binding */ User)
/* harmony export */ });
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/StorageHelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





function _validateUserInput(id) {
    // Validate:
    // 1. Id is a non-empty string.
    // 2. It does not contain special characters for cookies.
    if (typeof id !== "string" ||
        !id ||
        id.match(/,|;|=| |\|/)) {
        return false;
    }
    return true;
}
var User = /** @class */ (function () {
    function User(config, core) {
        /**
         * A flag indicating whether this represents a new user
         */
        this.isNewUser = false;
        /**
         * A flag indicating whether the user cookie has been set
         */
        this.isUserCookieSet = false;
        var _logger = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.safeGetLogger)(core);
        var _cookieManager = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.safeGetCookieMgr)(core);
        var _storageNamePrefix;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__["default"])(User, this, function (_self) {
            _self.config = config;
            var userCookiePostfix = (_self.config.userCookiePostfix && _self.config.userCookiePostfix()) ? _self.config.userCookiePostfix() : "";
            _storageNamePrefix = function () { return User.userCookieName + userCookiePostfix; };
            // get userId or create new one if none exists
            var cookie = _cookieManager.get(_storageNamePrefix());
            if (cookie) {
                _self.isNewUser = false;
                var params = cookie.split(User.cookieSeparator);
                if (params.length > 0) {
                    _self.id = params[0];
                    // we already have a cookie
                    _self.isUserCookieSet = !!_self.id;
                }
            }
            function _generateNewId() {
                var theConfig = (config || {});
                var getNewId = (theConfig.getNewId ? theConfig.getNewId() : null) || _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.newId;
                var id = getNewId(theConfig.idLength ? config.idLength() : 22);
                return id;
            }
            function _generateNewCookie(userId) {
                var acqStr = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.toISOString)(new Date());
                _self.accountAcquisitionDate = acqStr;
                _self.isNewUser = true;
                var newCookie = [userId, acqStr];
                return newCookie;
            }
            function _setUserCookie(cookie) {
                // without expiration, cookies expire at the end of the session
                // set it to 365 days from now
                // 365 * 24 * 60 * 60 = 31536000
                var oneYear = 31536000;
                _self.isUserCookieSet = _cookieManager.set(_storageNamePrefix(), cookie, oneYear);
            }
            if (!_self.id) {
                _self.id = _generateNewId();
                var newCookie = _generateNewCookie(_self.id);
                _setUserCookie(newCookie.join(User.cookieSeparator));
                // If we have an config.namePrefix() + ai_session in local storage this means the user actively removed our cookies.
                // We should respect their wishes and clear ourselves from local storage
                var name_1 = config.namePrefix && config.namePrefix() ? config.namePrefix() + "ai_session" : "ai_session";
                (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__.utlRemoveStorage)(_logger, name_1);
            }
            // We still take the account id from the ctor param for backward compatibility.
            // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.
            _self.accountId = config.accountId ? config.accountId() : undefined;
            // Get the auth user id and account id from the cookie if exists
            // Cookie is in the pattern: <authenticatedId>|<accountId>
            var authCookie = _cookieManager.get(User.authUserCookieName);
            if (authCookie) {
                authCookie = decodeURI(authCookie);
                var authCookieString = authCookie.split(User.cookieSeparator);
                if (authCookieString[0]) {
                    _self.authenticatedId = authCookieString[0];
                }
                if (authCookieString.length > 1 && authCookieString[1]) {
                    _self.accountId = authCookieString[1];
                }
            }
            _self.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {
                if (storeInCookie === void 0) { storeInCookie = false; }
                // Validate inputs to ensure no cookie control characters.
                var isInvalidInput = !_validateUserInput(authenticatedUserId) || (accountId && !_validateUserInput(accountId));
                if (isInvalidInput) {
                    _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.LoggingSeverity.WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__._InternalMessageId.SetAuthContextFailedAccountName, "Setting auth user context failed. " +
                        "User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.", true);
                    return;
                }
                // Create cookie string.
                _self.authenticatedId = authenticatedUserId;
                var authCookie = _self.authenticatedId;
                if (accountId) {
                    _self.accountId = accountId;
                    authCookie = [_self.authenticatedId, _self.accountId].join(User.cookieSeparator);
                }
                if (storeInCookie) {
                    // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).
                    // Encoding the cookie to handle unexpected unicode characters.
                    _cookieManager.set(User.authUserCookieName, encodeURI(authCookie));
                }
            };
            /**
             * Clears the authenticated user id and the account id from the user context.
             * @returns {}
             */
            _self.clearAuthenticatedUserContext = function () {
                _self.authenticatedId = null;
                _self.accountId = null;
                _cookieManager.del(User.authUserCookieName);
            };
            _self.update = function (userId) {
                // Optimizations to avoid setting and processing the cookie when not needed
                if (_self.id !== userId || !_self.isUserCookieSet) {
                    var user_id = userId ? userId : _generateNewId();
                    var user_cookie = _generateNewCookie(user_id);
                    _setUserCookie(user_cookie.join(User.cookieSeparator));
                }
            };
        });
    }
// Removed Stub for User.prototype.setAuthenticatedUserContext.
// Removed Stub for User.prototype.clearAuthenticatedUserContext.
// Removed Stub for User.prototype.update.
    User.cookieSeparator = "|";
    User.userCookieName = "ai_user";
    User.authUserCookieName = "ai_authUser";
    return User;
}());

//# sourceMappingURL=User.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/PropertiesPlugin.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/PropertiesPlugin.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-shims */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js");
/* harmony import */ var _TelemetryContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TelemetryContext */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/TelemetryContext.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
 * PropertiesPlugin.ts
 * @copyright Microsoft 2018
 */





var PropertiesPlugin = /** @class */ (function (_super) {
    (0,_microsoft_applicationinsights_shims__WEBPACK_IMPORTED_MODULE_0__.__extendsFn)(PropertiesPlugin, _super);
    function PropertiesPlugin() {
        var _this = _super.call(this) || this;
        _this.priority = 110;
        _this.identifier = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.PropertiesPluginIdentifier;
        var _breezeChannel; // optional. If exists, grab appId from it
        var _extensionConfig;
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__["default"])(PropertiesPlugin, _this, function (_self, _base) {
            _self.initialize = function (config, core, extensions, pluginChain) {
                _base.initialize(config, core, extensions, pluginChain);
                var ctx = _self._getTelCtx();
                var identifier = _self.identifier;
                var defaultConfig = PropertiesPlugin.getDefaultConfig();
                _extensionConfig = _extensionConfig || {};
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.objForEachKey)(defaultConfig, function (field, value) {
                    _extensionConfig[field] = function () { return ctx.getConfig(identifier, field, value()); };
                });
                _self.context = new _TelemetryContext__WEBPACK_IMPORTED_MODULE_4__.TelemetryContext(core, _extensionConfig);
                _breezeChannel = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__.getExtensionByName)(extensions, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.BreezeChannelIdentifier);
                _self.context.appId = function () { return _breezeChannel ? _breezeChannel["_appId"] : null; };
                // Test hook to allow accessing the internal values -- explicitly not defined as an available property on the class
                _self["_extConfig"] = _extensionConfig;
            };
            /**
             * Add Part A fields to the event
             * @param event The event that needs to be processed
             */
            _self.processTelemetry = function (event, itemCtx) {
                if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(event)) {
                    // TODO(barustum): throw an internal event once we have support for internal logging
                }
                else {
                    itemCtx = _self._getTelCtx(itemCtx);
                    // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.
                    if (event.name === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__.PageView.envelopeType) {
                        itemCtx.diagLog().resetInternalMessageCount();
                    }
                    var theContext = (_self.context || {});
                    if (theContext.session) {
                        // If customer did not provide custom session id update the session manager
                        if (typeof _self.context.session.id !== "string" && theContext.sessionManager) {
                            theContext.sessionManager.update();
                        }
                    }
                    var userCtx = theContext.user;
                    if (userCtx && !userCtx.isUserCookieSet) {
                        userCtx.update(theContext.user.id);
                    }
                    _processTelemetryInternal(event, itemCtx);
                    if (userCtx && userCtx.isNewUser) {
                        userCtx.isNewUser = false;
                        var message = new _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__._InternalLogMessage(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__._InternalMessageId.SendBrowserInfoOnUserInit, (((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_9__.getNavigator)() || {}).userAgent || ""));
                        itemCtx.diagLog().logInternalMessage(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__.LoggingSeverity.CRITICAL, message);
                    }
                    _self.processNext(event, itemCtx);
                }
            };
            function _processTelemetryInternal(evt, itemCtx) {
                // Set Part A fields
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getSetValue)(evt, "tags", []);
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.getSetValue)(evt, "ext", {});
                var ctx = _self.context;
                ctx.applySessionContext(evt, itemCtx);
                ctx.applyApplicationContext(evt, itemCtx);
                ctx.applyDeviceContext(evt, itemCtx);
                ctx.applyOperationContext(evt, itemCtx);
                ctx.applyUserContext(evt, itemCtx);
                ctx.applyOperatingSystemContxt(evt, itemCtx);
                ctx.applyWebContext(evt, itemCtx);
                ctx.applyLocationContext(evt, itemCtx); // legacy tags
                ctx.applyInternalContext(evt, itemCtx); // legacy tags
                ctx.cleanUp(evt, itemCtx);
            }
        });
        return _this;
    }
    PropertiesPlugin.getDefaultConfig = function () {
        var defaultConfig = {
            instrumentationKey: function () { return undefined; },
            accountId: function () { return null; },
            sessionRenewalMs: function () { return 30 * 60 * 1000; },
            samplingPercentage: function () { return 100; },
            sessionExpirationMs: function () { return 24 * 60 * 60 * 1000; },
            cookieDomain: function () { return null; },
            sdkExtension: function () { return null; },
            isBrowserLinkTrackingEnabled: function () { return false; },
            appId: function () { return null; },
            getSessionId: function () { return null; },
            namePrefix: function () { return undefined; },
            sessionCookiePostfix: function () { return undefined; },
            userCookiePostfix: function () { return undefined; },
            idLength: function () { return 22; },
            getNewId: function () { return null; }
        };
        return defaultConfig;
    };
// Removed Stub for PropertiesPlugin.prototype.initialize.
// Removed Stub for PropertiesPlugin.prototype.processTelemetry.
    return PropertiesPlugin;
}(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_10__.BaseTelemetryPlugin));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PropertiesPlugin);
//# sourceMappingURL=PropertiesPlugin.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/TelemetryContext.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/TelemetryContext.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TelemetryContext": () => (/* binding */ TelemetryContext)
/* harmony export */ });
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js");
/* harmony import */ var _Context_Session__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Context/Session */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Session.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/PartAExtensions.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _Context_Application__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Context/Application */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Application.js");
/* harmony import */ var _Context_Device__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Context/Device */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Device.js");
/* harmony import */ var _Context_Internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Context/Internal */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Internal.js");
/* harmony import */ var _Context_User__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Context/User */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/User.js");
/* harmony import */ var _Context_Location__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Context/Location */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/Location.js");
/* harmony import */ var _Context_TelemetryTrace__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Context/TelemetryTrace */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/Context/TelemetryTrace.js");
/*
 * Application Insights JavaScript SDK - Properties Plugin, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
 * TelemetryContext.ts
 * @copyright Microsoft 2018
 */










var strExt = "ext";
var strTags = "tags";
function _removeEmpty(target, name) {
    if (target && target[name] && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.objKeys)(target[name]).length === 0) {
        delete target[name];
    }
}
var TelemetryContext = /** @class */ (function () {
    function TelemetryContext(core, defaultConfig) {
        var _this = this;
        var logger = core.logger;
        this.appId = function () { return null; };
        this.getSessionId = function () { return null; };
        (0,_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_1__["default"])(TelemetryContext, this, function (_self) {
            _self.application = new _Context_Application__WEBPACK_IMPORTED_MODULE_2__.Application();
            _self.internal = new _Context_Internal__WEBPACK_IMPORTED_MODULE_3__.Internal(defaultConfig);
            if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.hasWindow)()) {
                _self.sessionManager = new _Context_Session__WEBPACK_IMPORTED_MODULE_5__._SessionManager(defaultConfig, core);
                _self.device = new _Context_Device__WEBPACK_IMPORTED_MODULE_6__.Device();
                _self.location = new _Context_Location__WEBPACK_IMPORTED_MODULE_7__.Location();
                _self.user = new _Context_User__WEBPACK_IMPORTED_MODULE_8__.User(defaultConfig, core);
                _self.telemetryTrace = new _Context_TelemetryTrace__WEBPACK_IMPORTED_MODULE_9__.TelemetryTrace(undefined, undefined, undefined, logger);
                _self.session = new _Context_Session__WEBPACK_IMPORTED_MODULE_5__.Session();
            }
            _self.getSessionId = function () {
                var session = _self.session;
                var sesId = null;
                // If customer set session info, apply their context; otherwise apply context automatically generated
                if (session && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(session.id)) {
                    sesId = session.id;
                }
                else {
                    // Gets the automatic session if it exists or an empty object
                    var autoSession = (_self.sessionManager || {}).automaticSession;
                    sesId = autoSession && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString)(autoSession.id) ? autoSession.id : null;
                }
                return sesId;
            };
            _self.applySessionContext = function (evt, itemCtx) {
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt.ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.AppExt), "sesId", _self.getSessionId(), _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
            };
            _self.applyOperatingSystemContxt = function (evt, itemCtx) {
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(evt.ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.OSExt, _self.os);
            };
            _self.applyApplicationContext = function (evt, itemCtx) {
                var application = _self.application;
                if (application) {
                    // evt.ext.app
                    var tags = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strTags);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.applicationVersion, application.ver, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.applicationBuild, application.build, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                }
            };
            _self.applyDeviceContext = function (evt, itemCtx) {
                var device = _self.device;
                if (device) {
                    // evt.ext.device
                    var extDevice = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strExt), _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.DeviceExt);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extDevice, "localId", device.id, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extDevice, "ip", device.ip, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extDevice, "model", device.model, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extDevice, "deviceClass", device.deviceClass, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                }
            };
            _self.applyInternalContext = function (evt, itemCtx) {
                var internal = _self.internal;
                if (internal) {
                    var tags = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strTags);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.internalAgentVersion, internal.agentVersion, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString); // not mapped in CS 4.0
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.internalSdkVersion, internal.sdkVersion, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    if (evt.baseType === _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_11__._InternalLogMessage.dataType || evt.baseType === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.PageView.dataType) {
                        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.internalSnippet, internal.snippetVer, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.internalSdkSrc, internal.sdkSrc, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    }
                }
            };
            _self.applyLocationContext = function (evt, itemCtx) {
                var location = _this.location;
                if (location) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strTags, []), _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.locationIp, location.ip, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                }
            };
            _self.applyOperationContext = function (evt, itemCtx) {
                var telemetryTrace = _self.telemetryTrace;
                if (telemetryTrace) {
                    var extTrace = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strExt), _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.TraceExt, { traceID: undefined, parentID: undefined });
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extTrace, "traceID", telemetryTrace.traceID, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extTrace, "name", telemetryTrace.name, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extTrace, "parentID", telemetryTrace.parentID, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                }
            };
            _self.applyWebContext = function (evt, itemCtx) {
                var web = _this.web;
                if (web) {
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strExt), _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.WebExt, web);
                }
            };
            _self.applyUserContext = function (evt, itemCtx) {
                var user = _self.user;
                if (user) {
                    var tags = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strTags, []);
                    // stays in tags
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(tags, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.CtxTagKeys.userAccountId, user.accountId, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    // CS 4.0
                    var extUser = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.getSetValue)(evt, strExt), _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.UserExt);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extUser, "id", user.id, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                    (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.setValue)(extUser, "authId", user.authenticatedId, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__.isString);
                }
            };
            _self.cleanUp = function (evt, itemCtx) {
                var ext = evt.ext;
                if (ext) {
                    _removeEmpty(ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.DeviceExt);
                    _removeEmpty(ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.UserExt);
                    _removeEmpty(ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.WebExt);
                    _removeEmpty(ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.OSExt);
                    _removeEmpty(ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.AppExt);
                    _removeEmpty(ext, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Extensions.TraceExt);
                }
            };
        });
    }
// Removed Stub for TelemetryContext.prototype.applySessionContext.
// Removed Stub for TelemetryContext.prototype.applyOperatingSystemContxt.
// Removed Stub for TelemetryContext.prototype.applyApplicationContext.
// Removed Stub for TelemetryContext.prototype.applyDeviceContext.
// Removed Stub for TelemetryContext.prototype.applyInternalContext.
// Removed Stub for TelemetryContext.prototype.applyLocationContext.
// Removed Stub for TelemetryContext.prototype.applyOperationContext.
// Removed Stub for TelemetryContext.prototype.applyWebContext.
// Removed Stub for TelemetryContext.prototype.applyUserContext.
// Removed Stub for TelemetryContext.prototype.cleanUp.
    return TelemetryContext;
}());

//# sourceMappingURL=TelemetryContext.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjAssign": () => (/* binding */ ObjAssign),
/* harmony export */   "ObjClass": () => (/* binding */ ObjClass),
/* harmony export */   "ObjCreate": () => (/* binding */ ObjCreate),
/* harmony export */   "ObjDefineProperty": () => (/* binding */ ObjDefineProperty),
/* harmony export */   "ObjHasOwnProperty": () => (/* binding */ ObjHasOwnProperty),
/* harmony export */   "ObjProto": () => (/* binding */ ObjProto),
/* harmony export */   "strDefault": () => (/* binding */ strDefault),
/* harmony export */   "strShimFunction": () => (/* binding */ strShimFunction),
/* harmony export */   "strShimHasOwnProperty": () => (/* binding */ strShimHasOwnProperty),
/* harmony export */   "strShimObject": () => (/* binding */ strShimObject),
/* harmony export */   "strShimPrototype": () => (/* binding */ strShimPrototype),
/* harmony export */   "strShimUndefined": () => (/* binding */ strShimUndefined)
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var strShimFunction = "function";
var strShimObject = "object";
var strShimUndefined = "undefined";
var strShimPrototype = "prototype";
var strShimHasOwnProperty = "hasOwnProperty";
var strDefault = "default";
var ObjClass = Object;
var ObjProto = ObjClass[strShimPrototype];
var ObjAssign = ObjClass["assign"];
var ObjCreate = ObjClass["create"];
var ObjDefineProperty = ObjClass["defineProperty"];
var ObjHasOwnProperty = ObjProto[strShimHasOwnProperty];
//# sourceMappingURL=Constants.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getGlobal": () => (/* binding */ getGlobal),
/* harmony export */   "objCreateFn": () => (/* binding */ objCreateFn),
/* harmony export */   "throwTypeError": () => (/* binding */ throwTypeError)
/* harmony export */ });
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var _cachedGlobal = null;
/**
 * Returns the current global scope object, for a normal web page this will be the current
 * window, for a Web Worker this will be current worker global scope via "self". The internal
 * implementation returns the first available instance object in the following order
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS standard)
 * - <null> (When all else fails)
 * While the return type is a Window for the normal case, not all environments will support all
 * of the properties or functions.
 */
function getGlobal(useCached) {
    if (useCached === void 0) { useCached = true; }
    if (!_cachedGlobal || !useCached) {
        if (typeof globalThis !== _Constants__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined && globalThis) {
            _cachedGlobal = globalThis;
        }
        if (typeof self !== _Constants__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined && self) {
            _cachedGlobal = self;
        }
        if (typeof window !== _Constants__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined && window) {
            _cachedGlobal = window;
        }
        if (typeof __webpack_require__.g !== _Constants__WEBPACK_IMPORTED_MODULE_0__.strShimUndefined && __webpack_require__.g) {
            _cachedGlobal = __webpack_require__.g;
        }
    }
    return _cachedGlobal;
}
function throwTypeError(message) {
    throw new TypeError(message);
}
/**
 * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil
 * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.
 * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations
 * @param obj Object to use as a prototype. May be null
 */
function objCreateFn(obj) {
    var func = _Constants__WEBPACK_IMPORTED_MODULE_0__.ObjCreate;
    // Use build in Object.create
    if (func) {
        // Use Object create method if it exists
        return func(obj);
    }
    if (obj == null) {
        return {};
    }
    var type = typeof obj;
    if (type !== _Constants__WEBPACK_IMPORTED_MODULE_0__.strShimObject && type !== _Constants__WEBPACK_IMPORTED_MODULE_0__.strShimFunction) {
        throwTypeError("Object prototype may only be an Object:" + obj);
    }
    function tmpFunc() { }
    tmpFunc[_Constants__WEBPACK_IMPORTED_MODULE_0__.strShimPrototype] = obj;
    return new tmpFunc();
}
//# sourceMappingURL=Helpers.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReflectObj": () => (/* binding */ ReflectObj),
/* harmony export */   "SymbolObj": () => (/* binding */ SymbolObj),
/* harmony export */   "__assignFn": () => (/* binding */ __assignFn),
/* harmony export */   "__createBindingFn": () => (/* binding */ __createBindingFn),
/* harmony export */   "__decorateFn": () => (/* binding */ __decorateFn),
/* harmony export */   "__exportStarFn": () => (/* binding */ __exportStarFn),
/* harmony export */   "__extendsFn": () => (/* binding */ __extendsFn),
/* harmony export */   "__hasReflect": () => (/* binding */ __hasReflect),
/* harmony export */   "__hasSymbol": () => (/* binding */ __hasSymbol),
/* harmony export */   "__importDefaultFn": () => (/* binding */ __importDefaultFn),
/* harmony export */   "__importStarFn": () => (/* binding */ __importStarFn),
/* harmony export */   "__makeTemplateObjectFn": () => (/* binding */ __makeTemplateObjectFn),
/* harmony export */   "__metadataFn": () => (/* binding */ __metadataFn),
/* harmony export */   "__objAssignFnImpl": () => (/* binding */ __objAssignFnImpl),
/* harmony export */   "__paramFn": () => (/* binding */ __paramFn),
/* harmony export */   "__readFn": () => (/* binding */ __readFn),
/* harmony export */   "__restFn": () => (/* binding */ __restFn),
/* harmony export */   "__spreadArrayFn": () => (/* binding */ __spreadArrayFn),
/* harmony export */   "__spreadArraysFn": () => (/* binding */ __spreadArraysFn),
/* harmony export */   "__valuesFn": () => (/* binding */ __valuesFn)
/* harmony export */ });
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Constants */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js");
/* harmony import */ var _Helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Helpers */ "./node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


// Most of these functions have been directly shamelessly "lifted" from the https://github.com/@microsoft/tslib and
// modified to be ES3 compatible and applying several minification and tree-shaking techniques so that Application Insights
// can successfully use TypeScript "importHelpers" which imports tslib during compilation but it will use these at runtime
// Which is also why all of the functions have not been included as Application Insights currently doesn't use or require
// them.
var SymbolObj = ((0,_Helpers__WEBPACK_IMPORTED_MODULE_0__.getGlobal)() || {})["Symbol"];
var ReflectObj = ((0,_Helpers__WEBPACK_IMPORTED_MODULE_0__.getGlobal)() || {})["Reflect"];
var __hasSymbol = !!SymbolObj;
var __hasReflect = !!ReflectObj;
var strDecorate = "decorate";
var strMetadata = "metadata";
var strGetOwnPropertySymbols = "getOwnPropertySymbols";
var strIterator = "iterator";
var __objAssignFnImpl = function (t) {
    // tslint:disable-next-line: ban-comma-operator
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjProto[_Constants__WEBPACK_IMPORTED_MODULE_1__.strShimHasOwnProperty].call(s, p)) {
                t[p] = s[p];
            }
        }
    }
    return t;
};
var __assignFn = _Constants__WEBPACK_IMPORTED_MODULE_1__.ObjAssign || __objAssignFnImpl;
// tslint:disable-next-line: only-arrow-functions
var extendStaticsFn = function (d, b) {
    extendStaticsFn = _Constants__WEBPACK_IMPORTED_MODULE_1__.ObjClass.setPrototypeOf ||
        // tslint:disable-next-line: only-arrow-functions
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        // tslint:disable-next-line: only-arrow-functions
        function (d, b) {
            for (var p in b) {
                if (b[_Constants__WEBPACK_IMPORTED_MODULE_1__.strShimHasOwnProperty](p)) {
                    d[p] = b[p];
                }
            }
        };
    return extendStaticsFn(d, b);
};
function __extendsFn(d, b) {
    if (typeof b !== _Constants__WEBPACK_IMPORTED_MODULE_1__.strShimFunction && b !== null) {
        (0,_Helpers__WEBPACK_IMPORTED_MODULE_0__.throwTypeError)("Class extends value " + String(b) + " is not a constructor or null");
    }
    extendStaticsFn(d, b);
    function __() { this.constructor = d; }
    // tslint:disable-next-line: ban-comma-operator
    d[_Constants__WEBPACK_IMPORTED_MODULE_1__.strShimPrototype] = b === null ? (0,_Helpers__WEBPACK_IMPORTED_MODULE_0__.objCreateFn)(b) : (__[_Constants__WEBPACK_IMPORTED_MODULE_1__.strShimPrototype] = b[_Constants__WEBPACK_IMPORTED_MODULE_1__.strShimPrototype], new __());
}
function __restFn(s, e) {
    var t = {};
    for (var k in s) {
        if (_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjHasOwnProperty.call(s, k) && e.indexOf(k) < 0) {
            t[k] = s[k];
        }
    }
    if (s != null && typeof _Constants__WEBPACK_IMPORTED_MODULE_1__.ObjClass[strGetOwnPropertySymbols] === _Constants__WEBPACK_IMPORTED_MODULE_1__.strShimFunction) {
        for (var i = 0, p = _Constants__WEBPACK_IMPORTED_MODULE_1__.ObjClass[strGetOwnPropertySymbols](s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && _Constants__WEBPACK_IMPORTED_MODULE_1__.ObjProto.propertyIsEnumerable.call(s, p[i])) {
                t[p[i]] = s[p[i]];
            }
        }
    }
    return t;
}
function __decorateFn(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = _Constants__WEBPACK_IMPORTED_MODULE_1__.ObjClass.getOwnPropertyDescriptor(target, key) : desc, d;
    if (__hasReflect && typeof ReflectObj[strDecorate] === _Constants__WEBPACK_IMPORTED_MODULE_1__.strShimFunction) {
        r = ReflectObj[strDecorate](decorators, target, key, desc);
    }
    else {
        for (var i = decorators.length - 1; i >= 0; i--) {
            // eslint-disable-next-line no-cond-assign
            if (d = decorators[i]) {
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            }
        }
    }
    // tslint:disable-next-line:ban-comma-operator
    return c > 3 && r && (0,_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjDefineProperty)(target, key, r), r;
}
function __paramFn(paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadataFn(metadataKey, metadataValue) {
    if (__hasReflect && ReflectObj[strMetadata] === _Constants__WEBPACK_IMPORTED_MODULE_1__.strShimFunction) {
        return ReflectObj[strMetadata](metadataKey, metadataValue);
    }
}
function __exportStarFn(m, o) {
    for (var p in m) {
        if (p !== _Constants__WEBPACK_IMPORTED_MODULE_1__.strDefault && !_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjHasOwnProperty.call(o, p)) {
            __createBindingFn(o, m, p);
        }
    }
}
function __createBindingFn(o, m, k, k2) {
    if (k2 === undefined) {
        k2 = k;
    }
    if (_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjCreate) {
        (0,_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjDefineProperty)(o, k2, {
            enumerable: true,
            get: function () {
                return m[k];
            }
        });
    }
    else {
        o[k2] = m[k];
    }
}
function __valuesFn(o) {
    var s = typeof SymbolObj === _Constants__WEBPACK_IMPORTED_MODULE_1__.strShimFunction && SymbolObj[strIterator], m = s && o[s], i = 0;
    if (m) {
        return m.call(o);
    }
    if (o && typeof o.length === "number") {
        return {
            next: function () {
                if (o && i >= o.length) {
                    o = void 0;
                }
                return { value: o && o[i++], done: !o };
            }
        };
    }
    (0,_Helpers__WEBPACK_IMPORTED_MODULE_0__.throwTypeError)(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __readFn(o, n) {
    var m = typeof SymbolObj === _Constants__WEBPACK_IMPORTED_MODULE_1__.strShimFunction && o[SymbolObj[strIterator]];
    if (!m) {
        return o;
    }
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    }
    catch (error) {
        e = {
            error: error
        };
    }
    finally {
        try {
            // tslint:disable-next-line:no-conditional-assignment
            if (r && !r.done && (m = i["return"])) {
                m.call(i);
            }
        }
        finally {
            if (e) {
                // eslint-disable-next-line no-unsafe-finally
                throw e.error;
            }
        }
    }
    return ar;
}
/** @deprecated */
function __spreadArraysFn() {
    var theArgs = arguments;
    // Calculate new total size
    for (var s = 0, i = 0, il = theArgs.length; i < il; i++) {
        s += theArgs[i].length;
    }
    // Create new full array
    for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = theArgs[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
        }
    }
    return r;
}
function __spreadArrayFn(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
    }
    return to;
}
function __makeTemplateObjectFn(cooked, raw) {
    if (_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjDefineProperty) {
        (0,_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjDefineProperty)(cooked, "raw", { value: raw });
    }
    else {
        cooked.raw = raw;
    }
    return cooked;
}
function __importStarFn(mod) {
    if (mod && mod.__esModule) {
        return mod;
    }
    var result = {};
    if (mod != null) {
        for (var k in mod) {
            if (k !== _Constants__WEBPACK_IMPORTED_MODULE_1__.strDefault && Object.prototype.hasOwnProperty.call(mod, k)) {
                __createBindingFn(result, mod, k);
            }
        }
    }
    // Set default module
    if (_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjCreate) {
        (0,_Constants__WEBPACK_IMPORTED_MODULE_1__.ObjDefineProperty)(result, _Constants__WEBPACK_IMPORTED_MODULE_1__.strDefault, { enumerable: true, value: mod });
    }
    else {
        result[_Constants__WEBPACK_IMPORTED_MODULE_1__.strDefault] = mod;
    }
    return result;
}
function __importDefaultFn(mod) {
    return (mod && mod.__esModule) ? mod : { strDefault: mod };
}
//# sourceMappingURL=TsLibShims.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApplicationInsightsContainer": () => (/* binding */ ApplicationInsightsContainer)
/* harmony export */ });
/* harmony import */ var _ApplicationInsightsDeprecated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApplicationInsightsDeprecated */ "./node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsDeprecated.js");
/* harmony import */ var _Initialization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Initialization */ "./node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/*
 * Application Insights JavaScript SDK - Web, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



var ApplicationInsightsContainer = /** @class */ (function () {
    function ApplicationInsightsContainer() {
    }
    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {
        var initialization = new _Initialization__WEBPACK_IMPORTED_MODULE_0__.Initialization(snippet);
        var legacyMode = version !== 2.0 ? true : false;
        // Side effect is to create, initialize and listen to the CoreUtils._canUseCookies changes
        // Called here to support backward compatibility
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__._legacyCookieMgr)();
        // Two target scenarios:
        // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work
        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding
        // and all api signatures are expected to map to new SDK. Note new snippet specifies version
        if (version === 2.0) {
            initialization.updateSnippetDefinitions(snippet);
            initialization.loadAppInsights(legacyMode);
            return initialization; // default behavior with new snippet
        }
        else {
            var legacy = new _ApplicationInsightsDeprecated__WEBPACK_IMPORTED_MODULE_2__.AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint
            legacy.updateSnippetDefinitions(snippet);
            initialization.loadAppInsights(legacyMode);
            return legacy;
        }
    };
    return ApplicationInsightsContainer;
}());

//# sourceMappingURL=ApplicationInsightsContainer.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsDeprecated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsDeprecated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppInsightsDeprecated": () => (/* binding */ AppInsightsDeprecated)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/*
 * Application Insights JavaScript SDK - Web, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// This is an exclude list of properties that should not be updated during initialization
// They include a combination of private and internal property names
var _ignoreUpdateSnippetProperties = [
    "snippet", "getDefaultConfig", "_hasLegacyInitializers", "_queue", "_processLegacyInitializers"
];
// ToDo: fix properties and measurements once updates are done to common
var AppInsightsDeprecated = /** @class */ (function () {
    function AppInsightsDeprecated(snippet, appInsightsNew) {
        this._hasLegacyInitializers = false;
        this._queue = [];
        this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config);
        this.appInsightsNew = appInsightsNew;
        this.context = { addTelemetryInitializer: this.addTelemetryInitializers.bind(this) };
    }
    AppInsightsDeprecated.getDefaultConfig = function (config) {
        if (!config) {
            config = {};
        }
        // set default values
        config.endpointUrl = config.endpointUrl || "https://dc.services.visualstudio.com/v2/track";
        config.sessionRenewalMs = 30 * 60 * 1000;
        config.sessionExpirationMs = 24 * 60 * 60 * 1000;
        config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb
        config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;
        config.enableDebug = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.enableDebug);
        config.disableExceptionTracking = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.disableExceptionTracking);
        config.disableTelemetry = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.disableTelemetry);
        config.verboseLogging = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.verboseLogging);
        config.emitLineDelimitedJson = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.emitLineDelimitedJson);
        config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;
        config.autoTrackPageVisitTime = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.autoTrackPageVisitTime);
        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {
            config.samplingPercentage = 100;
        }
        config.disableAjaxTracking = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.disableAjaxTracking);
        config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;
        config.isBeaconApiDisabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.isBeaconApiDisabled, true);
        config.disableCorrelationHeaders = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.disableCorrelationHeaders);
        config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [
            "*.blob.core.windows.net",
            "*.blob.core.chinacloudapi.cn",
            "*.blob.core.cloudapi.de",
            "*.blob.core.usgovcloudapi.net"
        ];
        config.disableFlushOnBeforeUnload = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.disableFlushOnBeforeUnload);
        config.disableFlushOnUnload = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload);
        config.enableSessionStorageBuffer = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.enableSessionStorageBuffer, true);
        config.isRetryDisabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.isRetryDisabled);
        config.isCookieUseDisabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.isCookieUseDisabled);
        config.isStorageUseDisabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.isStorageUseDisabled);
        config.isBrowserLinkTrackingEnabled = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.isBrowserLinkTrackingEnabled);
        config.enableCorsCorrelation = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.stringToBoolOrDefault)(config.enableCorsCorrelation);
        return config;
    };
    /**
     * The array of telemetry initializers to call before sending each telemetry item.
     */
    AppInsightsDeprecated.prototype.addTelemetryInitializers = function (callBack) {
        var _this = this;
        // Add initializer to current processing only if there is any old telemetry initializer
        if (!this._hasLegacyInitializers) {
            this.appInsightsNew.addTelemetryInitializer(function (item) {
                _this._processLegacyInitializers(item); // setup call back for each legacy processor
            });
            this._hasLegacyInitializers = true;
        }
        this._queue.push(callBack);
    };
    /**
     * Get the current cookie manager for this instance
     */
    AppInsightsDeprecated.prototype.getCookieMgr = function () {
        return this.appInsightsNew.getCookieMgr();
    };
    AppInsightsDeprecated.prototype.startTrackPage = function (name) {
        this.appInsightsNew.startTrackPage(name);
    };
    AppInsightsDeprecated.prototype.stopTrackPage = function (name, url, properties, measurements) {
        this.appInsightsNew.stopTrackPage(name, url, properties); // update
    };
    AppInsightsDeprecated.prototype.trackPageView = function (name, url, properties, measurements, duration) {
        var telemetry = {
            name: name,
            uri: url,
            properties: properties,
            measurements: measurements
        };
        // fix for props, measurements, duration
        this.appInsightsNew.trackPageView(telemetry);
    };
    AppInsightsDeprecated.prototype.trackEvent = function (name, properties, measurements) {
        this.appInsightsNew.trackEvent({ name: name });
    };
    AppInsightsDeprecated.prototype.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {
        this.appInsightsNew.trackDependencyData({
            id: id,
            target: absoluteUrl,
            type: pathName,
            duration: totalTime,
            properties: { HttpMethod: method },
            success: success,
            responseCode: resultCode
        });
    };
    AppInsightsDeprecated.prototype.trackException = function (exception, handledAt, properties, measurements, severityLevel) {
        this.appInsightsNew.trackException({
            exception: exception
        });
    };
    AppInsightsDeprecated.prototype.trackMetric = function (name, average, sampleCount, min, max, properties) {
        this.appInsightsNew.trackMetric({ name: name, average: average, sampleCount: sampleCount, min: min, max: max });
    };
    AppInsightsDeprecated.prototype.trackTrace = function (message, properties, severityLevel) {
        this.appInsightsNew.trackTrace({ message: message, severityLevel: severityLevel });
    };
    AppInsightsDeprecated.prototype.flush = function (async) {
        this.appInsightsNew.flush(async);
    };
    AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {
        this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);
    };
    AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function () {
        this.appInsightsNew.context.user.clearAuthenticatedUserContext();
    };
    AppInsightsDeprecated.prototype._onerror = function (message, url, lineNumber, columnNumber, error) {
        this.appInsightsNew._onerror({ message: message, url: url, lineNumber: lineNumber, columnNumber: columnNumber, error: error });
    };
    AppInsightsDeprecated.prototype.startTrackEvent = function (name) {
        this.appInsightsNew.startTrackEvent(name);
    };
    AppInsightsDeprecated.prototype.stopTrackEvent = function (name, properties, measurements) {
        this.appInsightsNew.stopTrackEvent(name, properties, measurements);
    };
    AppInsightsDeprecated.prototype.downloadAndSetup = function (config) {
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.throwError)("downloadAndSetup not implemented in web SKU");
    };
    AppInsightsDeprecated.prototype.updateSnippetDefinitions = function (snippet) {
        // apply full appInsights to the global instance
        // Note: This must be called before loadAppInsights is called
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__.proxyAssign)(snippet, this, function (name) {
            // Not excluding names prefixed with "_" as we need to proxy some functions like _onError
            return name && _ignoreUpdateSnippetProperties.indexOf(name) === -1;
        });
    };
    // note: these are split into methods to enable unit tests
    AppInsightsDeprecated.prototype.loadAppInsights = function () {
        // initialize global instance of appInsights
        // var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);
        var _this = this;
        // implement legacy version of trackPageView for 0.10<
        if (this.config["iKey"]) {
            var originalTrackPageView_1 = this.trackPageView;
            this.trackPageView = function (pagePath, properties, measurements) {
                originalTrackPageView_1.apply(_this, [null, pagePath, properties, measurements]);
            };
        }
        // implement legacy pageView interface if it is present in the snippet
        var legacyPageView = "logPageView";
        if (typeof this.snippet[legacyPageView] === "function") {
            this[legacyPageView] = function (pagePath, properties, measurements) {
                _this.trackPageView(null, pagePath, properties, measurements);
            };
        }
        // implement legacy event interface if it is present in the snippet
        var legacyEvent = "logEvent";
        if (typeof this.snippet[legacyEvent] === "function") {
            this[legacyEvent] = function (name, props, measurements) {
                _this.trackEvent(name, props, measurements);
            };
        }
        return this;
    };
    AppInsightsDeprecated.prototype._processLegacyInitializers = function (item) {
        // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call
        item.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.ProcessLegacy] = this._queue;
        return item;
    };
    return AppInsightsDeprecated;
}());

//# sourceMappingURL=ApplicationInsightsDeprecated.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Initialization": () => (/* binding */ Initialization),
/* harmony export */   "Telemetry": () => (/* binding */ Telemetry)
/* harmony export */ });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @microsoft/applicationinsights-analytics-js */ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js");
/* harmony import */ var _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @microsoft/applicationinsights-channel-js */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js");
/* harmony import */ var _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @microsoft/applicationinsights-properties-js */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/PropertiesPlugin.js");
/* harmony import */ var _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @microsoft/applicationinsights-dependencies-js */ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajax.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/ConnectionStringParser.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/RequestResponseHeaders.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Constants.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Data.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/Base.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Envelope.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/PageViewData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/Data.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/IConfig.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Common/DataSanitizer.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/TelemetryItemCreator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/PartAExtensions.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js");
/*
 * Application Insights JavaScript SDK - Web, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */








"use strict";
var _internalSdkSrc;
// This is an exclude list of properties that should not be updated during initialization
// They include a combination of private and internal property names
var _ignoreUpdateSnippetProperties = [
    "snippet", "dependencies", "properties", "_snippetVersion", "appInsightsNew", "getSKUDefaults"
];
// Re-exposing the Common classes as Telemetry, the list was taken by reviewing the generated code for the build while using
// the previous configuration :-
// import * as Common from "@microsoft/applicationinsights-common"
// export const Telemetry = Common;
var fieldType = {
    Default: 0 /* Default */,
    Required: 1 /* Required */,
    Array: 2 /* Array */,
    Hidden: 4 /* Hidden */
};
/**
 * Telemetry type classes, e.g. PageView, Exception, etc
 */
var Telemetry = {
    __proto__: null,
    PropertiesPluginIdentifier: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.PropertiesPluginIdentifier,
    BreezeChannelIdentifier: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.BreezeChannelIdentifier,
    AnalyticsPluginIdentifier: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.AnalyticsPluginIdentifier,
    Util: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.Util,
    CorrelationIdHelper: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.CorrelationIdHelper,
    UrlHelper: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.UrlHelper,
    DateTimeUtils: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__.DateTimeUtils,
    ConnectionStringParser: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.ConnectionStringParser,
    FieldType: fieldType,
    RequestHeaders: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__.RequestHeaders,
    DisabledPropertyName: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.DisabledPropertyName,
    ProcessLegacy: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.ProcessLegacy,
    SampleRate: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.SampleRate,
    HttpMethod: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.HttpMethod,
    DEFAULT_BREEZE_ENDPOINT: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_BREEZE_ENDPOINT,
    AIData: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__.Data,
    AIBase: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_6__.Base,
    Envelope: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_7__.Envelope,
    Event: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_8__.Event,
    Exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Exception,
    Metric: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.Metric,
    PageView: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.PageView,
    PageViewData: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.PageViewData,
    RemoteDependencyData: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.RemoteDependencyData,
    Trace: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__.Trace,
    PageViewPerformance: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.PageViewPerformance,
    Data: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.Data,
    SeverityLevel: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_17__.SeverityLevel,
    ConfigurationManager: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__.ConfigurationManager,
    ContextTagKeys: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_19__.ContextTagKeys,
    DataSanitizer: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_20__.DataSanitizer,
    TelemetryItemCreator: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_21__.TelemetryItemCreator,
    CtxTagKeys: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.CtxTagKeys,
    Extensions: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_22__.Extensions,
    DistributedTracingModes: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_23__.DistributedTracingModes
};
/**
 * Application Insights API
 * @class Initialization
 * @implements {IApplicationInsights}
 */
var Initialization = /** @class */ (function () {
    function Initialization(snippet) {
        var _self = this;
        // initialize the queue and config in case they are undefined
        _self._snippetVersion = "" + (snippet.sv || snippet.version || "");
        snippet.queue = snippet.queue || [];
        snippet.version = snippet.version || 2.0; // Default to new version
        var config = snippet.config || {};
        if (config.connectionString) {
            var cs = (0,_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_2__.parseConnectionString)(config.connectionString);
            var ingest = cs.ingestionendpoint;
            config.endpointUrl = ingest ? "".concat(ingest, "/v2/track") : config.endpointUrl; // only add /v2/track when from connectionstring
            config.instrumentationKey = cs.instrumentationkey || config.instrumentationKey;
        }
        _self.appInsights = new _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_24__.ApplicationInsights();
        _self.properties = new _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_25__["default"]();
        _self.dependencies = new _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_26__.AjaxMonitor();
        _self.core = new _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_27__.AppInsightsCore();
        _self._sender = new _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_28__.Sender();
        _self.snippet = snippet;
        _self.config = config;
        _self.getSKUDefaults();
    }
    // Analytics Plugin
    /**
     * Get the current cookie manager for this instance
     */
    Initialization.prototype.getCookieMgr = function () {
        return this.appInsights.getCookieMgr();
    };
    /**
     * Log a user action or other occurrence.
     * @param {IEventTelemetry} event
     * @param {ICustomProperties} [customProperties]
     * @memberof Initialization
     */
    Initialization.prototype.trackEvent = function (event, customProperties) {
        this.appInsights.trackEvent(event, customProperties);
    };
    /**
     * Logs that a page, or similar container was displayed to the user.
     * @param {IPageViewTelemetry} pageView
     * @memberof Initialization
     */
    Initialization.prototype.trackPageView = function (pageView) {
        var inPv = pageView || {};
        this.appInsights.trackPageView(inPv);
    };
    /**
     * Log a bag of performance information via the customProperties field.
     * @param {IPageViewPerformanceTelemetry} pageViewPerformance
     * @memberof Initialization
     */
    Initialization.prototype.trackPageViewPerformance = function (pageViewPerformance) {
        var inPvp = pageViewPerformance || {};
        this.appInsights.trackPageViewPerformance(inPvp);
    };
    /**
     * Log an exception that you have caught.
     * @param {IExceptionTelemetry} exception
     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.
     * @memberof Initialization
     */
    Initialization.prototype.trackException = function (exception, customProperties) {
        if (exception && !exception.exception && exception.error) {
            exception.exception = exception.error;
        }
        this.appInsights.trackException(exception, customProperties);
    };
    /**
     * Manually send uncaught exception telemetry. This method is automatically triggered
     * on a window.onerror event.
     * @param {IAutoExceptionTelemetry} exception
     * @memberof Initialization
     */
    Initialization.prototype._onerror = function (exception) {
        this.appInsights._onerror(exception);
    };
    /**
     * Log a diagnostic scenario such entering or leaving a function.
     * @param {ITraceTelemetry} trace
     * @param {ICustomProperties} [customProperties]
     * @memberof Initialization
     */
    Initialization.prototype.trackTrace = function (trace, customProperties) {
        this.appInsights.trackTrace(trace, customProperties);
    };
    /**
     * Log a numeric value that is not associated with a specific event. Typically used
     * to send regular reports of performance indicators.
     *
     * To send a single measurement, just use the `name` and `average` fields
     * of {@link IMetricTelemetry}.
     *
     * If you take measurements frequently, you can reduce the telemetry bandwidth by
     * aggregating multiple measurements and sending the resulting average and modifying
     * the `sampleCount` field of {@link IMetricTelemetry}.
     * @param {IMetricTelemetry} metric input object argument. Only `name` and `average` are mandatory.
     * @param {ICustomProperties} [customProperties]
     * @memberof Initialization
     */
    Initialization.prototype.trackMetric = function (metric, customProperties) {
        this.appInsights.trackMetric(metric, customProperties);
    };
    /**
     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,
     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view
     * and send the event.
     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.
     */
    Initialization.prototype.startTrackPage = function (name) {
        this.appInsights.startTrackPage(name);
    };
    /**
     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.
     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.
     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.
     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    Initialization.prototype.stopTrackPage = function (name, url, customProperties, measurements) {
        this.appInsights.stopTrackPage(name, url, customProperties, measurements);
    };
    Initialization.prototype.startTrackEvent = function (name) {
        this.appInsights.startTrackEvent(name);
    };
    /**
     * Log an extended event that you started timing with `startTrackEvent`.
     * @param   name    The string you used to identify this event in `startTrackEvent`.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    Initialization.prototype.stopTrackEvent = function (name, properties, measurements) {
        this.appInsights.stopTrackEvent(name, properties, measurements); // Todo: Fix to pass measurements once type is updated
    };
    Initialization.prototype.addTelemetryInitializer = function (telemetryInitializer) {
        return this.appInsights.addTelemetryInitializer(telemetryInitializer);
    };
    // Properties Plugin
    /**
     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|
     *
     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`
     * @param {string} authenticatedUserId
     * @param {string} [accountId]
     * @param {boolean} [storeInCookie=false]
     * @memberof Initialization
     */
    Initialization.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {
        if (storeInCookie === void 0) { storeInCookie = false; }
        this.properties.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);
    };
    /**
     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.
     * @memberof Initialization
     */
    Initialization.prototype.clearAuthenticatedUserContext = function () {
        this.properties.context.user.clearAuthenticatedUserContext();
    };
    // Dependencies Plugin
    /**
     * Log a dependency call (e.g. ajax)
     * @param {IDependencyTelemetry} dependency
     * @memberof Initialization
     */
    Initialization.prototype.trackDependencyData = function (dependency) {
        this.dependencies.trackDependencyData(dependency);
    };
    // Misc
    /**
     * Manually trigger an immediate send of all telemetry still in the buffer.
     * @param {boolean} [async=true]
     * @memberof Initialization
     */
    Initialization.prototype.flush = function (async) {
        var _this = this;
        if (async === void 0) { async = true; }
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_29__.doPerf)(this.core, function () { return "AISKU.flush"; }, function () {
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.arrForEach)(_this.core.getTransmissionControls(), function (channels) {
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.arrForEach)(channels, function (channel) {
                    channel.flush(async);
                });
            });
        }, null, async);
    };
    /**
     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.
     * Fall back to xhr sender if beacon is not supported.
     * @param {boolean} [async=true]
     * @memberof Initialization
     */
    Initialization.prototype.onunloadFlush = function (async) {
        if (async === void 0) { async = true; }
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.arrForEach)(this.core.getTransmissionControls(), function (channels) {
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.arrForEach)(channels, function (channel) {
                if (channel.onunloadFlush) {
                    channel.onunloadFlush();
                }
                else {
                    channel.flush(async);
                }
            });
        });
    };
    /**
     * Initialize this instance of ApplicationInsights
     * @returns {IApplicationInsights}
     * @memberof Initialization
     */
    Initialization.prototype.loadAppInsights = function (legacyMode, logger, notificationManager) {
        var _this = this;
        if (legacyMode === void 0) { legacyMode = false; }
        var _self = this;
        function _updateSnippetProperties(snippet) {
            if (snippet) {
                var snippetVer = "";
                if (!(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.isNullOrUndefined)(_self._snippetVersion)) {
                    snippetVer += _self._snippetVersion;
                }
                if (legacyMode) {
                    snippetVer += ".lg";
                }
                if (_self.context && _self.context.internal) {
                    _self.context.internal.snippetVer = snippetVer || "-";
                }
                // apply updated properties to the global instance (snippet)
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.objForEachKey)(_self, function (field, value) {
                    if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.isString)(field) &&
                        !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.isFunction)(value) &&
                        field && field[0] !== "_" && // Don't copy "internal" values
                        _ignoreUpdateSnippetProperties.indexOf(field) === -1) {
                        snippet[field] = value;
                    }
                });
            }
        }
        // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!
        if (legacyMode && _self.config.extensions && _self.config.extensions.length > 0) {
            (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.throwError)("Extensions not allowed in legacy mode");
        }
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_29__.doPerf)(_self.core, function () { return "AISKU.loadAppInsights"; }, function () {
            var extensions = [];
            extensions.push(_self._sender);
            extensions.push(_self.properties);
            extensions.push(_self.dependencies);
            extensions.push(_self.appInsights);
            // initialize core
            _self.core.initialize(_self.config, extensions, logger, notificationManager);
            _self.context = _self.properties.context;
            if (_internalSdkSrc && _self.context) {
                _self.context.internal.sdkSrc = _internalSdkSrc;
            }
            _updateSnippetProperties(_self.snippet);
            // Empty queue of all api calls logged prior to sdk download
            _self.emptyQueue();
            _self.pollInternalLogs();
            _self.addHousekeepingBeforeUnload(_this);
        });
        return _self;
    };
    /**
     * Overwrite the lazy loaded fields of global window snippet to contain the
     * actual initialized API methods
     * @param {Snippet} snippet
     * @memberof Initialization
     */
    Initialization.prototype.updateSnippetDefinitions = function (snippet) {
        // apply full appInsights to the global instance
        // Note: This must be called before loadAppInsights is called
        (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.proxyAssign)(snippet, this, function (name) {
            // Not excluding names prefixed with "_" as we need to proxy some functions like _onError
            return name && _ignoreUpdateSnippetProperties.indexOf(name) === -1;
        });
    };
    /**
     * Call any functions that were queued before the main script was loaded
     * @memberof Initialization
     */
    Initialization.prototype.emptyQueue = function () {
        var _self = this;
        // call functions that were queued before the main script was loaded
        try {
            if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.isArray)(_self.snippet.queue)) {
                // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.
                var length_1 = _self.snippet.queue.length;
                for (var i = 0; i < length_1; i++) {
                    var call = _self.snippet.queue[i];
                    call();
                }
                _self.snippet.queue = undefined;
                delete _self.snippet.queue;
            }
        }
        catch (exception) {
            var properties = {};
            if (exception && (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.isFunction)(exception.toString)) {
                properties.exception = exception.toString();
            }
            // need from core
            // Microsoft.ApplicationInsights._InternalLogging.throwInternal(
            //     LoggingSeverity.WARNING,
            //     _InternalMessageId.FailedToSendQueuedTelemetry,
            //     "Failed to send queued telemetry",
            //     properties);
        }
    };
    Initialization.prototype.pollInternalLogs = function () {
        this.core.pollInternalLogs();
    };
    Initialization.prototype.stopPollingInternalLogs = function () {
        this.core.stopPollingInternalLogs();
    };
    Initialization.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {
        // Add callback to push events when the user navigates away
        if ((0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_31__.hasWindow)() || (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_31__.hasDocument)()) {
            var performHousekeeping = function () {
                // Adds the ability to flush all data before the page unloads.
                // Note: This approach tries to push a sync request with all the pending events onbeforeunload.
                // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.
                // Telemetry here will help us analyze how effective this approach is.
                // Another approach would be to make this call sync with a acceptable timeout to reduce the
                // impact on user experience.
                // appInsightsInstance.context._sender.triggerSend();
                appInsightsInstance.onunloadFlush(false);
                // Back up the current session to local storage
                // This lets us close expired sessions after the cookies themselves expire
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_30__.arrForEach)(appInsightsInstance.appInsights.core["_extensions"], function (ext) {
                    if (ext.identifier === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__.PropertiesPluginIdentifier) {
                        if (ext && ext.context && ext.context._sessionManager) {
                            ext.context._sessionManager.backup();
                        }
                        return -1;
                    }
                });
            };
            var added = false;
            var excludePageUnloadEvents = appInsightsInstance.appInsights.config.disablePageUnloadEvents;
            if (!appInsightsInstance.appInsights.config.disableFlushOnBeforeUnload) {
                // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server
                // As just hooking the window does not always fire (on chrome) for page navigation's.
                added = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_32__.addPageUnloadEventListener)(performHousekeeping, excludePageUnloadEvents);
                // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.
                added = (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_32__.addPageHideEventListener)(performHousekeeping, excludePageUnloadEvents) || added;
                // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't
                // log the failure in this case
                if (!added && !(0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_31__.isReactNative)()) {
                    appInsightsInstance.appInsights.core.logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_33__.LoggingSeverity.CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_33__._InternalMessageId.FailedToAddHandlerForOnBeforeUnload, "Could not add handler for beforeunload and pagehide");
                }
            }
            if (!added && !appInsightsInstance.appInsights.config.disableFlushOnUnload) {
                // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only
                (0,_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_32__.addPageHideEventListener)(performHousekeeping, excludePageUnloadEvents);
            }
        }
    };
    Initialization.prototype.getSender = function () {
        return this._sender;
    };
    Initialization.prototype.getSKUDefaults = function () {
        var _self = this;
        _self.config.diagnosticLogInterval =
            _self.config.diagnosticLogInterval && _self.config.diagnosticLogInterval > 0 ? _self.config.diagnosticLogInterval : 10000;
    };
    return Initialization;
}());

// tslint:disable-next-line
(function () {
    var sdkSrc = null;
    var isModule = false;
    var cdns = [
        "://js.monitor.azure.com/",
        "://az416426.vo.msecnd.net/"
    ];
    try {
        // Try and determine whether the sdk is being loaded from the CDN
        // currentScript is only valid during initial processing
        var scrpt = (document || {}).currentScript;
        if (scrpt) {
            sdkSrc = scrpt.src;
            // } else {
            //     // We need to update to at least typescript 2.9 for this to work :-(
            //     // Leaving as a stub for now so after we upgrade this breadcrumb is available
            //     let meta = import.meta;
            //     sdkSrc = (meta || {}).url;
            //     isModule = true;
        }
    }
    catch (e) {
        // eslint-disable-next-line no-empty
    }
    if (sdkSrc) {
        try {
            var url = sdkSrc.toLowerCase();
            if (url) {
                var src = "";
                for (var idx = 0; idx < cdns.length; idx++) {
                    if (url.indexOf(cdns[idx]) !== -1) {
                        src = "cdn" + (idx + 1);
                        if (url.indexOf("/scripts/") === -1) {
                            if (url.indexOf("/next/") !== -1) {
                                src += "-next";
                            }
                            else if (url.indexOf("/beta/") !== -1) {
                                src += "-beta";
                            }
                        }
                        _internalSdkSrc = src + (isModule ? ".mod" : "");
                        break;
                    }
                }
            }
        }
        catch (e) {
            // eslint-disable-next-line no-empty
        }
    }
})();
//# sourceMappingURL=Initialization.js.map

/***/ }),

/***/ "./node_modules/@microsoft/applicationinsights-web/dist-esm/applicationinsights-web.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@microsoft/applicationinsights-web/dist-esm/applicationinsights-web.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppInsightsCore": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__.AppInsightsCore),
/* harmony export */   "ApplicationAnalytics": () => (/* reexport safe */ _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_20__.ApplicationInsights),
/* harmony export */   "ApplicationInsights": () => (/* reexport safe */ _Initialization__WEBPACK_IMPORTED_MODULE_0__.Initialization),
/* harmony export */   "ApplicationInsightsContainer": () => (/* reexport safe */ _ApplicationInsightsContainer__WEBPACK_IMPORTED_MODULE_1__.ApplicationInsightsContainer),
/* harmony export */   "BaseCore": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__.BaseCore),
/* harmony export */   "BaseTelemetryPlugin": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__.BaseTelemetryPlugin),
/* harmony export */   "CoreUtils": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__.CoreUtils),
/* harmony export */   "DependenciesPlugin": () => (/* reexport safe */ _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_22__.AjaxMonitor),
/* harmony export */   "DistributedTracingModes": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__.DistributedTracingModes),
/* harmony export */   "Event": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__.Event),
/* harmony export */   "Exception": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__.Exception),
/* harmony export */   "LoggingSeverity": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__.LoggingSeverity),
/* harmony export */   "Metric": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__.Metric),
/* harmony export */   "NotificationManager": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__.NotificationManager),
/* harmony export */   "PageView": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__.PageView),
/* harmony export */   "PageViewPerformance": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__.PageViewPerformance),
/* harmony export */   "PerfEvent": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.PerfEvent),
/* harmony export */   "PerfManager": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.PerfManager),
/* harmony export */   "PropertiesPlugin": () => (/* reexport safe */ _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_21__["default"]),
/* harmony export */   "RemoteDependencyData": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__.RemoteDependencyData),
/* harmony export */   "Sender": () => (/* reexport safe */ _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_19__.Sender),
/* harmony export */   "SeverityLevel": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__.SeverityLevel),
/* harmony export */   "Telemetry": () => (/* reexport safe */ _Initialization__WEBPACK_IMPORTED_MODULE_0__.Telemetry),
/* harmony export */   "Trace": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_17__.Trace),
/* harmony export */   "Util": () => (/* reexport safe */ _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__.Util),
/* harmony export */   "_InternalMessageId": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__._InternalMessageId),
/* harmony export */   "doPerf": () => (/* reexport safe */ _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__.doPerf)
/* harmony export */ });
/* harmony import */ var _Initialization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Initialization */ "./node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js");
/* harmony import */ var _ApplicationInsightsContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ApplicationInsightsContainer */ "./node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "./node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Util.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Event.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Exception.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Metric.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageView.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/PageViewPerformance.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/RemoteDependencyData.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Telemetry/Trace.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "./node_modules/@microsoft/applicationinsights-common/dist-esm/Enums.js");
/* harmony import */ var _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @microsoft/applicationinsights-channel-js */ "./node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js");
/* harmony import */ var _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @microsoft/applicationinsights-analytics-js */ "./node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js");
/* harmony import */ var _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @microsoft/applicationinsights-properties-js */ "./node_modules/@microsoft/applicationinsights-properties-js/dist-esm/PropertiesPlugin.js");
/* harmony import */ var _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @microsoft/applicationinsights-dependencies-js */ "./node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/ajax.js");
/*
 * Application Insights JavaScript SDK - Web, 2.7.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// Re-exports






//# sourceMappingURL=applicationinsights-web.js.map

/***/ }),

/***/ "./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*!
 * Microsoft Dynamic Proto Utility, 1.1.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
 * Constant string defined to support minimization
 * @ignore
 */
var Constructor = 'constructor';
/**
 * Constant string defined to support minimization
 * @ignore
 */
var Prototype = 'prototype';
/**
 * Constant string defined to support minimization
 * @ignore
 */
var strFunction = 'function';
/**
 * Used to define the name of the instance function lookup table
 * @ignore
 */
var DynInstFuncTable = '_dynInstFuncs';
/**
 * Name used to tag the dynamic prototype function
 * @ignore
 */
var DynProxyTag = '_isDynProxy';
/**
 * Name added to a prototype to define the dynamic prototype "class" name used to lookup the function table
 * @ignore
 */
var DynClassName = '_dynClass';
/**
 * Prefix added to the classname to avoid any name clashes with other instance level properties
 * @ignore
 */
var DynClassNamePrefix = '_dynCls$';
/**
 * A tag which is used to check if we have already to attempted to set the instance function if one is not present
 * @ignore
 */
var DynInstChkTag = '_dynInstChk';
/**
 * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same
 * tag name as the function level but a different const name for readability only.
 */
var DynAllowInstChkTag = DynInstChkTag;
/**
 * The global (imported) instances where the global performance options are stored
 */
var DynProtoDefaultOptions = '_dfOpts';
/**
 * Value used as the name of a class when it cannot be determined
 * @ignore
 */
var UnknownValue = '_unknown_';
/**
 * Constant string defined to support minimization
 * @ignore
 */
var str__Proto = "__proto__";
/**
 * Constant string defined to support minimization
 * @ignore
 */
var strUseBaseInst = 'useBaseInst';
/**
 * Constant string defined to support minimization
 * @ignore
 */
var strSetInstFuncs = 'setInstFuncs';
var Obj = Object;
/**
 * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)
 * @ignore
 */
var _objGetPrototypeOf = Obj["getPrototypeOf"];
/**
 * Internal Global used to generate a unique dynamic class name, every new class will increase this value
 * @ignore
 */
var _dynamicNames = 0;
/**
 * Helper to check if the object contains a property of the name
 * @ignore
 */
function _hasOwnProperty(obj, prop) {
    return obj && Obj[Prototype].hasOwnProperty.call(obj, prop);
}
/**
 * Helper used to check whether the target is an Object prototype or Array prototype
 * @ignore
 */
function _isObjectOrArrayPrototype(target) {
    return target && (target === Obj[Prototype] || target === Array[Prototype]);
}
/**
 * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype
 * @ignore
 */
function _isObjectArrayOrFunctionPrototype(target) {
    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];
}
/**
 * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.
 * @ignore
 */
function _getObjProto(target) {
    if (target) {
        // This method doesn't existing in older browsers (e.g. IE8)
        if (_objGetPrototypeOf) {
            return _objGetPrototypeOf(target);
        }
        // target[Constructor] May break if the constructor has been changed or removed
        var newProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);
        if (newProto) {
            return newProto;
        }
    }
    return null;
}
/**
 * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6
 * are not enumerable.
 * @param target
 */
function _forEachProp(target, func) {
    var props = [];
    var getOwnProps = Obj["getOwnPropertyNames"];
    if (getOwnProps) {
        props = getOwnProps(target);
    }
    else {
        for (var name_1 in target) {
            if (typeof name_1 === "string" && _hasOwnProperty(target, name_1)) {
                props.push(name_1);
            }
        }
    }
    if (props && props.length > 0) {
        for (var lp = 0; lp < props.length; lp++) {
            func(props[lp]);
        }
    }
}
/**
 * Helper function to check whether the provided function name is a potential candidate for dynamic
 * callback and prototype generation.
 * @param target The target object, may be a prototype or class object
 * @param funcName The function name
 * @param skipOwn Skips the check for own property
 * @ignore
 */
function _isDynamicCandidate(target, funcName, skipOwn) {
    return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || _hasOwnProperty(target, funcName)));
}
/**
 * Helper to throw a TypeError exception
 * @param message the message
 * @ignore
 */
function _throwTypeError(message) {
    throw new TypeError("DynamicProto: " + message);
}
/**
 * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does
 * not return any inherited functions
 * @param thisTarget The object to get the instance functions from
 * @ignore
 */
function _getInstanceFuncs(thisTarget) {
    // Get the base proto
    var instFuncs = {};
    // Save any existing instance functions
    _forEachProp(thisTarget, function (name) {
        // Don't include any dynamic prototype instances - as we only want the real functions
        if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {
            // Create an instance callback for passing the base function to the caller
            instFuncs[name] = thisTarget[name];
        }
    });
    return instFuncs;
}
/**
 * Returns whether the value is included in the array
 * @param values The array of values
 * @param value  The value
 */
function _hasVisited(values, value) {
    for (var lp = values.length - 1; lp >= 0; lp--) {
        if (values[lp] === value) {
            return true;
        }
    }
    return false;
}
/**
 * Returns an object that contains callback functions for all "base/super" functions, this is used to "save"
 * enabling calling super.xxx() functions without requiring that the base "class" has defined a prototype references
 * @param target The current instance
 * @ignore
 */
function _getBaseFuncs(classProto, thisTarget, instFuncs, useBaseInst) {
    function _instFuncProxy(target, funcHost, funcName) {
        var theFunc = funcHost[funcName];
        if (theFunc[DynProxyTag] && useBaseInst) {
            // grab and reuse the hosted looking function (if available) otherwise the original passed function
            var instFuncTable = target[DynInstFuncTable] || {};
            if (instFuncTable[DynAllowInstChkTag] !== false) {
                theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;
            }
        }
        return function () {
            return theFunc.apply(target, arguments);
        };
    }
    // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)
    var baseFuncs = {};
    _forEachProp(instFuncs, function (name) {
        // Create an instance callback for passing the base function to the caller
        baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);
    });
    // Get the base prototype functions
    var baseProto = _getObjProto(classProto);
    var visited = [];
    // Don't include base object functions for Object, Array or Function
    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {
        // look for prototype functions
        _forEachProp(baseProto, function (name) {
            // Don't include any dynamic prototype instances - as we only want the real functions
            // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the 
            // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return
            // the Object prototype methods while bypassing the check
            if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {
                // Create an instance callback for passing the base function to the caller
                baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);
            }
        });
        // We need to find all possible functions that might be overloaded by walking the entire prototype chain
        // This avoids the caller from needing to check whether it's direct base class implements the function or not
        // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.
        visited.push(baseProto);
        baseProto = _getObjProto(baseProto);
    }
    return baseFuncs;
}
function _getInstFunc(target, funcName, proto, currentDynProtoProxy) {
    var instFunc = null;
    // We need to check whether the class name is defined directly on this prototype otherwise
    // it will walk the proto chain and return any parent proto classname.
    if (target && _hasOwnProperty(proto, DynClassName)) {
        var instFuncTable = target[DynInstFuncTable] || {};
        instFunc = (instFuncTable[proto[DynClassName]] || {})[funcName];
        if (!instFunc) {
            // Avoid stack overflow from recursive calling the same function
            _throwTypeError("Missing [" + funcName + "] " + strFunction);
        }
        // We have the instance function, lets check it we can speed up further calls
        // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)
        if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {
            // If the instance already has an instance function we can't replace it
            var canAddInst = !_hasOwnProperty(target, funcName);
            // Get current prototype
            var objProto = _getObjProto(target);
            var visited = [];
            // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function
            // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut
            while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {
                var protoFunc = objProto[funcName];
                if (protoFunc) {
                    canAddInst = (protoFunc === currentDynProtoProxy);
                    break;
                }
                // We need to find all possible initial functions to ensure that we don't bypass a valid override function
                visited.push(objProto);
                objProto = _getObjProto(objProto);
            }
            try {
                if (canAddInst) {
                    // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version
                    // so it's safe to directly assign for any subsequent calls (for better performance)
                    target[funcName] = instFunc;
                }
                // Block further attempts to set the instance function for any
                instFunc[DynInstChkTag] = 1;
            }
            catch (e) {
                // Don't crash if the object is readonly or the runtime doesn't allow changing this
                // And set a flag so we don't try again for any function
                instFuncTable[DynAllowInstChkTag] = false;
            }
        }
    }
    return instFunc;
}
function _getProtoFunc(funcName, proto, currentDynProtoProxy) {
    var protoFunc = proto[funcName];
    // Check that the prototype function is not a self reference -- try to avoid stack overflow!
    if (protoFunc === currentDynProtoProxy) {
        // It is so lookup the base prototype
        protoFunc = _getObjProto(proto)[funcName];
    }
    if (typeof protoFunc !== strFunction) {
        _throwTypeError("[" + funcName + "] is not a " + strFunction);
    }
    return protoFunc;
}
/**
 * Add the required dynamic prototype methods to the the class prototype
 * @param proto - The class prototype
 * @param className - The instance classname
 * @param target - The target instance
 * @param baseInstFuncs - The base instance functions
 * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist
 * @ignore
 */
function _populatePrototype(proto, className, target, baseInstFuncs, setInstanceFunc) {
    function _createDynamicPrototype(proto, funcName) {
        var dynProtoProxy = function () {
            // Use the instance or prototype function
            var instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);
            return instFunc.apply(this, arguments);
        };
        // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing
        // via which can dynamically replace the prototype function reference)
        dynProtoProxy[DynProxyTag] = 1;
        return dynProtoProxy;
    }
    if (!_isObjectOrArrayPrototype(proto)) {
        var instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || {};
        var instFuncs_1 = instFuncTable[className] = (instFuncTable[className] || {}); // fetch and assign if as it may not exist yet
        // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable
        if (instFuncTable[DynAllowInstChkTag] !== false) {
            instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;
        }
        _forEachProp(target, function (name) {
            // Only add overridden functions
            if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name]) {
                // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function
                instFuncs_1[name] = target[name];
                delete target[name];
                // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one
                if (!_hasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {
                    proto[name] = _createDynamicPrototype(proto, name);
                }
            }
        });
    }
}
/**
 * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance
 * @param classProto The class prototype instance
 * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy
 * @ignore
 */
function _checkPrototype(classProto, thisTarget) {
    // This method doesn't existing in older browsers (e.g. IE8)
    if (_objGetPrototypeOf) {
        // As this is primarily a coding time check, don't bother checking if running in IE8 or lower
        var visited = [];
        var thisProto = _getObjProto(thisTarget);
        while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {
            if (thisProto === classProto) {
                return true;
            }
            // This avoids the caller from needing to check whether it's direct base class implements the function or not
            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.
            visited.push(thisProto);
            thisProto = _getObjProto(thisProto);
        }
    }
    return false;
}
/**
 * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.
 * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.
 * @param target
 * @param unknownValue
 * @ignore
 */
function _getObjName(target, unknownValue) {
    if (_hasOwnProperty(target, Prototype)) {
        // Look like a prototype
        return target.name || unknownValue || UnknownValue;
    }
    return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;
}
/**
 * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-
 * - Saves references to all defined base class functions
 * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all "super" functions.
 * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.
 * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is
 * passed both the target "this" and an object that can be used to call any base (super) functions, using this based object in place of
 * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct "this"
 * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions
 * defined in the constructor or some other function (rather than declared as complete typescript functions).
 * ### Usage
 * ```typescript
 * import dynamicProto from "@microsoft/dynamicproto-js";
 * class ExampleClass extends BaseClass {
 *     constructor() {
 *         dynamicProto(ExampleClass, this, (_self, base) => {
 *             // This will define a function that will be converted to a prototype function
 *             _self.newFunc = () => {
 *                 // Access any "this" instance property
 *                 if (_self.someProperty) {
 *                     ...
 *                 }
 *             }
 *             // This will define a function that will be converted to a prototype function
 *             _self.myFunction = () => {
 *                 // Access any "this" instance property
 *                 if (_self.someProperty) {
 *                     // Call the base version of the function that we are overriding
 *                     base.myFunction();
 *                 }
 *                 ...
 *             }
 *             _self.initialize = () => {
 *                 ...
 *             }
 *             // Warnings: While the following will work as _self is simply a reference to
 *             // this, if anyone overrides myFunction() the overridden will be called first
 *             // as the normal JavaScript method resolution will occur and the defined
 *             // _self.initialize() function is actually gets removed from the instance and
 *             // a proxy prototype version is created to reference the created method.
 *             _self.initialize();
 *         });
 *     }
 * }
 * ```
 * @typeparam DPType This is the generic type of the class, used to keep intellisense valid
 * @typeparam DPCls The type that contains the prototype of the current class
 * @param theClass - This is the current class instance which contains the prototype for the current class
 * @param target - The current "this" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.
 * @param delegateFunc - The callback function (closure) that will create the dynamic function
 * @param options - Additional options to configure how the dynamic prototype operates
 */
function dynamicProto(theClass, target, delegateFunc, options) {
    // Make sure that the passed theClass argument looks correct
    if (!_hasOwnProperty(theClass, Prototype)) {
        _throwTypeError("theClass is an invalid class definition.");
    }
    // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)
    var classProto = theClass[Prototype];
    if (!_checkPrototype(classProto, target)) {
        _throwTypeError("[" + _getObjName(theClass) + "] is not in class hierarchy of [" + _getObjName(target) + "]");
    }
    var className = null;
    if (_hasOwnProperty(classProto, DynClassName)) {
        // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)
        className = classProto[DynClassName];
    }
    else {
        // As not all browser support name on the prototype creating a unique dynamic one if we have not already
        // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance
        // function table lookup.
        className = DynClassNamePrefix + _getObjName(theClass, "_") + "$" + _dynamicNames;
        _dynamicNames++;
        classProto[DynClassName] = className;
    }
    var perfOptions = dynamicProto[DynProtoDefaultOptions];
    var useBaseInst = !!perfOptions[strUseBaseInst];
    if (useBaseInst && options && options[strUseBaseInst] !== undefined) {
        useBaseInst = !!options[strUseBaseInst];
    }
    // Get the current instance functions
    var instFuncs = _getInstanceFuncs(target);
    // Get all of the functions for any base instance (before they are potentially overridden)
    var baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);
    // Execute the delegate passing in both the current target "this" and "base" function references
    // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support
    delegateFunc(target, baseFuncs);
    // Don't allow setting instance functions for older IE instances
    var setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];
    if (setInstanceFunc && options) {
        setInstanceFunc = !!options[strSetInstFuncs];
    }
    // Populate the Prototype for any overridden instance functions
    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);
}
/**
 * Exposes the default global options to allow global configuration, if the global values are disabled these will override
 * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose
 * their internal usage of dynamic proto.
 */
var perfDefaults = {
    setInstFuncs: true,
    useBaseInst: true
};
// And expose for testing
dynamicProto[DynProtoDefaultOptions] = perfDefaults;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dynamicProto);
//# sourceMappingURL=dynamicproto-js.js.map


/***/ }),

/***/ "./node_modules/@microsoft/teams-js/dist/MicrosoftTeams.min.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@microsoft/teams-js/dist/MicrosoftTeams.min.js ***!
  \*********************************************************************/
/***/ ((module) => {

!function(e,n){ true?module.exports=n():0}(window,function(){return function(t){var r={};function i(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=r,i.d=function(e,n,t){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="",i(i.s=19)}([function(e,n,t){"use strict";var r=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||((r=r||Array.prototype.slice.call(n,0,i))[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,"__esModule",{value:!0}),n.sendMessageEventToChild=n.waitForMessageQueue=n.sendMessageToParent=n.uninitializeCommunication=n.initializeCommunication=n.Communication=void 0;var i=t(4),o=t(6),a=t(3),s=function(){return function(){}}();n.Communication=s;var l=function(){function e(){}return e.parentMessageQueue=[],e.childMessageQueue=[],e.nextMessageId=0,e.callbacks={},e}();function u(e,n,t){n instanceof Function?t=n:n instanceof Array&&(r=n);var r,n=s.parentWindow,e=y(e,r);o.GlobalVars.isFramelessWindow?s.currentWindow&&s.currentWindow.nativeInterface&&s.currentWindow.nativeInterface.framelessPostMessage(JSON.stringify(e)):(r=h(n),n&&r?n.postMessage(e,r):C(n).push(e)),t&&(l.callbacks[e.id]=t)}function d(e){var n,t;e&&e.data&&"object"==typeof e.data&&(c(n=e.source||e.originalEvent&&e.originalEvent.source,t=e.origin||e.originalEvent&&e.originalEvent.origin)&&(m(n,t),n===s.parentWindow?g(e):n===s.childWindow&&p(e)))}function c(e,n){return(!s.currentWindow||e!==s.currentWindow)&&(s.currentWindow&&s.currentWindow.location&&n&&n===s.currentWindow.location.origin||!!(i.validOriginRegExp.test(n.toLowerCase())||o.GlobalVars.additionalValidOriginsRegexp&&o.GlobalVars.additionalValidOriginsRegexp.test(n.toLowerCase())))}function m(e,n){o.GlobalVars.isFramelessWindow||s.parentWindow&&!s.parentWindow.closed&&e!==s.parentWindow?s.childWindow&&!s.childWindow.closed&&e!==s.childWindow||(s.childWindow=e,s.childOrigin=n):(s.parentWindow=e,s.parentOrigin=n),s.parentWindow&&s.parentWindow.closed&&(s.parentWindow=null,s.parentOrigin=null),s.childWindow&&s.childWindow.closed&&(s.childWindow=null,s.childOrigin=null),b(s.parentWindow),b(s.childWindow)}function g(e){var n,t;"id"in e.data&&"number"==typeof e.data.id?(t=e.data,(n=l.callbacks[t.id])&&(n.apply(null,r(r([],t.args,!0),[t.isPartialResponse],!1)),f(e)||delete l.callbacks[t.id])):"func"in e.data&&"string"==typeof e.data.func&&(t=e.data,(0,a.callHandler)(t.func,t.args))}function f(e){return!0===e.data.isPartialResponse}function p(e){var r,n;"id"in e.data&&"func"in e.data&&(r=e.data,e=(n=(0,a.callHandler)(r.func,r.args))[0],n=n[1],e&&void 0!==n?v(r.id,Array.isArray(n)?n:[n]):u(r.func,r.args,function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];s.childWindow&&(e=n.pop(),v(r.id,n,e))}))}function C(e){return e===s.parentWindow?l.parentMessageQueue:e===s.childWindow?l.childMessageQueue:[]}function h(e){return e===s.parentWindow?s.parentOrigin:e===s.childWindow?s.childOrigin:null}function b(e){for(var n=h(e),t=C(e);e&&n&&0<t.length;)e.postMessage(t.shift(),n)}function v(e,n,t){var r=s.childWindow,n=P(e,n,t),t=h(r);r&&t&&r.postMessage(n,t)}function y(e,n){return{id:l.nextMessageId++,func:e,timestamp:Date.now(),args:n||[]}}function P(e,n,t){return{id:e,args:n||[],isPartialResponse:t}}function T(e,n){return{func:e,args:n||[]}}n.initializeCommunication=function(e,n){l.messageListener=function(e){return d(e)},s.currentWindow=s.currentWindow||window,s.parentWindow=s.currentWindow.parent!==s.currentWindow.self?s.currentWindow.parent:s.currentWindow.opener,(s.parentWindow||n)&&s.currentWindow.addEventListener("message",l.messageListener,!1),s.parentWindow||(o.GlobalVars.isFramelessWindow=!0,window.onNativeMessage=g);try{s.parentOrigin="*",u("initialize",[i.version],e)}finally{s.parentOrigin=null}},n.uninitializeCommunication=function(){s.currentWindow.removeEventListener("message",l.messageListener,!1),s.parentWindow=null,s.parentOrigin=null,s.childWindow=null,s.childOrigin=null,l.parentMessageQueue=[],l.childMessageQueue=[],l.nextMessageId=0,l.callbacks={}},n.sendMessageToParent=u,n.waitForMessageQueue=function(e,n){var t=s.currentWindow.setInterval(function(){0===C(e).length&&(clearInterval(t),n())},100)},n.sendMessageEventToChild=function(e,n){var t=s.childWindow,e=T(e,n),n=h(t);t&&n?t.postMessage(e,n):C(t).push(e)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.processAdditionalValidOrigins=n.isAPISupportedByPlatform=n.ensureInitialized=void 0;var r=t(4),i=t(6),o=t(5);n.ensureInitialized=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(!i.GlobalVars.initializeCalled)throw new Error("The library has not yet been initialized");if(i.GlobalVars.frameContext&&e&&0<e.length){for(var t=!1,r=0;r<e.length;r++)if(e[r]===i.GlobalVars.frameContext){t=!0;break}if(!t)throw new Error("This call is not allowed in the '"+i.GlobalVars.frameContext+"' context")}},n.isAPISupportedByPlatform=function(e){return void 0===e&&(e=r.defaultSDKVersionForCompatCheck),e=(0,o.compareSDKVersions)(i.GlobalVars.clientSupportedSDKVersion,e),!isNaN(e)&&0<=e},n.processAdditionalValidOrigins=function(e){var e=i.GlobalVars.additionalValidOrigins.concat(e.filter(function(e){return"string"==typeof e&&r.userOriginUrlValidationRegExp.test(e)})),n={},e=e.filter(function(e){return!n[e]&&(n[e]=!0)});i.GlobalVars.additionalValidOrigins=e,0<i.GlobalVars.additionalValidOrigins.length?i.GlobalVars.additionalValidOriginsRegexp=(0,o.generateRegExpFromUrls)(i.GlobalVars.additionalValidOrigins):i.GlobalVars.additionalValidOriginsRegexp=null}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ChannelType=n.TaskModuleDimension=n.UserTeamRole=n.TeamType=n.FrameContexts=n.HostClientType=void 0,function(e){e.desktop="desktop",e.web="web",e.android="android",e.ios="ios",e.rigel="rigel",e.surfaceHub="surfaceHub",e.teamsRoomsWindows="teamsRoomsWindows",e.teamsRoomsAndroid="teamsRoomsAndroid",e.teamsPhones="teamsPhones",e.teamsDisplays="teamsDisplays"}(n.HostClientType||(n.HostClientType={})),function(e){e.settings="settings",e.content="content",e.authentication="authentication",e.remove="remove",e.task="task",e.sidePanel="sidePanel",e.stage="stage",e.meetingStage="meetingStage"}(n.FrameContexts||(n.FrameContexts={})),function(e){e[e.Standard=0]="Standard",e[e.Edu=1]="Edu",e[e.Class=2]="Class",e[e.Plc=3]="Plc",e[e.Staff=4]="Staff"}(n.TeamType||(n.TeamType={})),function(e){e[e.Admin=0]="Admin",e[e.User=1]="User",e[e.Guest=2]="Guest"}(n.UserTeamRole||(n.UserTeamRole={})),function(e){e.Large="large",e.Medium="medium",e.Small="small"}(n.TaskModuleDimension||(n.TaskModuleDimension={})),function(e){e.Regular="Regular",e.Private="Private",e.Shared="Shared"}(n.ChannelType||(n.ChannelType={}))},function(e,n,t){"use strict";var i=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||((r=r||Array.prototype.slice.call(n,0,i))[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,"__esModule",{value:!0}),n.registerBeforeUnloadHandler=n.registerOnLoadHandler=n.registerFocusEnterHandler=n.registerBackButtonHandler=n.handleThemeChange=n.registerOnThemeChangeHandler=n.removeHandler=n.registerHandler=n.callHandler=n.initializeHandlers=void 0;var r=t(8),o=t(0),a=function(){function e(){}return e.handlers={},e}();function s(e){a.themeChangeHandler&&a.themeChangeHandler(e),o.Communication.childWindow&&(0,o.sendMessageEventToChild)("themeChange",[e])}function l(){a.backButtonPressHandler&&a.backButtonPressHandler()||(0,r.navigateBack)()}function u(e){a.focusEnterHandler&&a.focusEnterHandler(e)}function d(e){a.loadHandler&&a.loadHandler(e),o.Communication.childWindow&&(0,o.sendMessageEventToChild)("load",[e])}function c(){function e(){(0,o.sendMessageToParent)("readyToUnload",[])}a.beforeUnloadHandler&&a.beforeUnloadHandler(e)||e()}n.initializeHandlers=function(){a.handlers.themeChange=s,a.handlers.backButtonPress=l,a.handlers.load=d,a.handlers.beforeUnload=c,a.handlers.focusEnter=u},n.callHandler=function(e,n){return(e=a.handlers[e])?[!0,e.apply(this,n)]:[!1,void 0]},n.registerHandler=function(e,n,t,r){void 0===t&&(t=!0),void 0===r&&(r=[]),n?(a.handlers[e]=n,t&&(0,o.sendMessageToParent)("registerHandler",i([e],r,!0))):delete a.handlers[e]},n.removeHandler=function(e){delete a.handlers[e]},n.registerOnThemeChangeHandler=function(e){(a.themeChangeHandler=e)&&(0,o.sendMessageToParent)("registerHandler",["themeChange"])},n.handleThemeChange=s,n.registerBackButtonHandler=function(e){(a.backButtonPressHandler=e)&&(0,o.sendMessageToParent)("registerHandler",["backButton"])},n.registerFocusEnterHandler=function(e){(a.focusEnterHandler=e)&&(0,o.sendMessageToParent)("registerHandler",["focusEnter"])},n.registerOnLoadHandler=function(e){(a.loadHandler=e)&&(0,o.sendMessageToParent)("registerHandler",["load"])},n.registerBeforeUnloadHandler=function(e){(a.beforeUnloadHandler=e)&&(0,o.sendMessageToParent)("registerHandler",["beforeUnload"])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.userOriginUrlValidationRegExp=n.validOriginRegExp=n.validOrigins=n.scanBarCodeAPIMobileSupportVersion=n.getMediaCallbackSupportVersion=n.mediaAPISupportVersion=n.captureImageMobileSupportVersion=n.peoplePickerRequiredVersion=n.locationAPIsRequiredVersion=n.getUserJoinedTeamsSupportedAndroidClientVersion=n.videoAndImageMediaAPISupportVersion=n.defaultSDKVersionForCompatCheck=n.version=void 0;t=t(5);n.version="1.11.0",n.defaultSDKVersionForCompatCheck="2.0.1",n.videoAndImageMediaAPISupportVersion="2.0.2",n.getUserJoinedTeamsSupportedAndroidClientVersion="2.0.1",n.locationAPIsRequiredVersion="1.9.0",n.peoplePickerRequiredVersion="2.0.0",n.captureImageMobileSupportVersion="1.7.0",n.mediaAPISupportVersion="1.8.0",n.getMediaCallbackSupportVersion="2.0.0",n.scanBarCodeAPIMobileSupportVersion="1.9.0",n.validOrigins=["https://teams.microsoft.com","https://teams.microsoft.us","https://gov.teams.microsoft.us","https://dod.teams.microsoft.us","https://int.teams.microsoft.com","https://teams.live.com","https://devspaces.skype.com","https://ssauth.skype.com","https://local.teams.live.com","https://local.teams.live.com:8080","https://local.teams.office.com","https://local.teams.office.com:8080","https://msft.spoppe.com","https://*.sharepoint.com","https://*.sharepoint-df.com","https://*.sharepointonline.com","https://outlook.office.com","https://outlook-sdf.office.com","https://*.teams.microsoft.com","https://www.office.com","https://word.office.com","https://excel.office.com","https://powerpoint.office.com","https://www.officeppe.com","https://*.www.office.com"],n.validOriginRegExp=(0,t.generateRegExpFromUrls)(n.validOrigins),n.userOriginUrlValidationRegExp=/^https\:\/\//},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.generateGUID=n.compareSDKVersions=n.getGenericOnCompleteHandler=n.generateRegExpFromUrls=void 0;var r=t(22);function i(e){for(var n="^",t=e.split("."),r=0;r<t.length;r++)n+=(0<r?"[.]":"")+t[r].replace("*","[^/^.]+");return n+="$"}n.generateRegExpFromUrls=function(e){for(var n="",t=0;t<e.length;t++)n+=(0===t?"":"|")+i(e[t]);return new RegExp(n)},n.getGenericOnCompleteHandler=function(t){return function(e,n){if(!e)throw new Error(t||n)}},n.compareSDKVersions=function(e,n){if("string"!=typeof e||"string"!=typeof n)return NaN;var t=e.split("."),r=n.split(".");function i(e){return/^\d+$/.test(e)}if(!t.every(i)||!r.every(i))return NaN;for(;t.length<r.length;)t.push("0");for(;r.length<t.length;)r.push("0");for(var o=0;o<t.length;++o)if(Number(t[o])!=Number(r[o]))return Number(t[o])>Number(r[o])?1:-1;return 0},n.generateGUID=function(){return r.v4()}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.GlobalVars=void 0;var r=function(){function e(){}return e.initializeCalled=!1,e.initializeCompleted=!1,e.additionalValidOrigins=[],e.additionalValidOriginsRegexp=null,e.initializeCallbacks=[],e.isFramelessWindow=!1,e.printCapabilityEnabled=!1,e}();n.GlobalVars=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ErrorCode=n.FileOpenPreference=void 0,function(e){e.Inline="inline",e.Desktop="desktop",e.Web="web"}(n.FileOpenPreference||(n.FileOpenPreference={})),function(e){e[e.NOT_SUPPORTED_ON_PLATFORM=100]="NOT_SUPPORTED_ON_PLATFORM",e[e.INTERNAL_ERROR=500]="INTERNAL_ERROR",e[e.NOT_SUPPORTED_IN_CURRENT_CONTEXT=501]="NOT_SUPPORTED_IN_CURRENT_CONTEXT",e[e.PERMISSION_DENIED=1e3]="PERMISSION_DENIED",e[e.NETWORK_ERROR=2e3]="NETWORK_ERROR",e[e.NO_HW_SUPPORT=3e3]="NO_HW_SUPPORT",e[e.INVALID_ARGUMENTS=4e3]="INVALID_ARGUMENTS",e[e.UNAUTHORIZED_USER_OPERATION=5e3]="UNAUTHORIZED_USER_OPERATION",e[e.INSUFFICIENT_RESOURCES=6e3]="INSUFFICIENT_RESOURCES",e[e.THROTTLE=7e3]="THROTTLE",e[e.USER_ABORT=8e3]="USER_ABORT",e[e.OPERATION_TIMED_OUT=8001]="OPERATION_TIMED_OUT",e[e.OLD_PLATFORM=9e3]="OLD_PLATFORM",e[e.FILE_NOT_FOUND=404]="FILE_NOT_FOUND",e[e.SIZE_EXCEEDED=1e4]="SIZE_EXCEEDED"}(n.ErrorCode||(n.ErrorCode={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sharing=n.video=n.people=n.monetization=n.meeting=n.location=n.media=n.ParentAppWindow=n.ChildAppWindow=n.tasks=n.settings=n.navigateToTab=n.navigateCrossDomain=n.navigateBack=n.returnFocus=n.shareDeepLink=n.setFrameContext=n.registerAppButtonHoverLeaveHandler=n.registerAppButtonHoverEnterHandler=n.registerAppButtonClickHandler=n.registerOnThemeChangeHandler=n.registerOnLoadHandler=n.registerFullScreenHandler=n.registerEnterSettingsHandler=n.registerFocusEnterHandler=n.registerBeforeUnloadHandler=n.registerBackButtonHandler=n.print=n.initializeWithFrameContext=n.initialize=n.getTabInstances=n.getMruTabInstances=n.getContext=n.executeDeepLink=n.enablePrintCapability=n.FileOpenPreference=n.ErrorCode=n.ChannelType=n.UserTeamRole=n.TeamType=n.TaskModuleDimension=n.HostClientType=n.FrameContexts=n.authentication=n.appInitialization=void 0;var r=t(25);Object.defineProperty(n,"appInitialization",{enumerable:!0,get:function(){return r.appInitialization}});var i=t(11);Object.defineProperty(n,"authentication",{enumerable:!0,get:function(){return i.authentication}});var o=t(2);Object.defineProperty(n,"FrameContexts",{enumerable:!0,get:function(){return o.FrameContexts}}),Object.defineProperty(n,"HostClientType",{enumerable:!0,get:function(){return o.HostClientType}}),Object.defineProperty(n,"TaskModuleDimension",{enumerable:!0,get:function(){return o.TaskModuleDimension}}),Object.defineProperty(n,"TeamType",{enumerable:!0,get:function(){return o.TeamType}}),Object.defineProperty(n,"UserTeamRole",{enumerable:!0,get:function(){return o.UserTeamRole}}),Object.defineProperty(n,"ChannelType",{enumerable:!0,get:function(){return o.ChannelType}});var a=t(7);Object.defineProperty(n,"ErrorCode",{enumerable:!0,get:function(){return a.ErrorCode}}),Object.defineProperty(n,"FileOpenPreference",{enumerable:!0,get:function(){return a.FileOpenPreference}});var s=t(26);Object.defineProperty(n,"enablePrintCapability",{enumerable:!0,get:function(){return s.enablePrintCapability}}),Object.defineProperty(n,"executeDeepLink",{enumerable:!0,get:function(){return s.executeDeepLink}}),Object.defineProperty(n,"getContext",{enumerable:!0,get:function(){return s.getContext}}),Object.defineProperty(n,"getMruTabInstances",{enumerable:!0,get:function(){return s.getMruTabInstances}}),Object.defineProperty(n,"getTabInstances",{enumerable:!0,get:function(){return s.getTabInstances}}),Object.defineProperty(n,"initialize",{enumerable:!0,get:function(){return s.initialize}}),Object.defineProperty(n,"initializeWithFrameContext",{enumerable:!0,get:function(){return s.initializeWithFrameContext}}),Object.defineProperty(n,"print",{enumerable:!0,get:function(){return s.print}}),Object.defineProperty(n,"registerBackButtonHandler",{enumerable:!0,get:function(){return s.registerBackButtonHandler}}),Object.defineProperty(n,"registerBeforeUnloadHandler",{enumerable:!0,get:function(){return s.registerBeforeUnloadHandler}}),Object.defineProperty(n,"registerFocusEnterHandler",{enumerable:!0,get:function(){return s.registerFocusEnterHandler}}),Object.defineProperty(n,"registerEnterSettingsHandler",{enumerable:!0,get:function(){return s.registerEnterSettingsHandler}}),Object.defineProperty(n,"registerFullScreenHandler",{enumerable:!0,get:function(){return s.registerFullScreenHandler}}),Object.defineProperty(n,"registerOnLoadHandler",{enumerable:!0,get:function(){return s.registerOnLoadHandler}}),Object.defineProperty(n,"registerOnThemeChangeHandler",{enumerable:!0,get:function(){return s.registerOnThemeChangeHandler}}),Object.defineProperty(n,"registerAppButtonClickHandler",{enumerable:!0,get:function(){return s.registerAppButtonClickHandler}}),Object.defineProperty(n,"registerAppButtonHoverEnterHandler",{enumerable:!0,get:function(){return s.registerAppButtonHoverEnterHandler}}),Object.defineProperty(n,"registerAppButtonHoverLeaveHandler",{enumerable:!0,get:function(){return s.registerAppButtonHoverLeaveHandler}}),Object.defineProperty(n,"setFrameContext",{enumerable:!0,get:function(){return s.setFrameContext}}),Object.defineProperty(n,"shareDeepLink",{enumerable:!0,get:function(){return s.shareDeepLink}});var l=t(27);Object.defineProperty(n,"returnFocus",{enumerable:!0,get:function(){return l.returnFocus}}),Object.defineProperty(n,"navigateBack",{enumerable:!0,get:function(){return l.navigateBack}}),Object.defineProperty(n,"navigateCrossDomain",{enumerable:!0,get:function(){return l.navigateCrossDomain}}),Object.defineProperty(n,"navigateToTab",{enumerable:!0,get:function(){return l.navigateToTab}});var u=t(12);Object.defineProperty(n,"settings",{enumerable:!0,get:function(){return u.settings}});var d=t(28);Object.defineProperty(n,"tasks",{enumerable:!0,get:function(){return d.tasks}});var c=t(16);Object.defineProperty(n,"ChildAppWindow",{enumerable:!0,get:function(){return c.ChildAppWindow}}),Object.defineProperty(n,"ParentAppWindow",{enumerable:!0,get:function(){return c.ParentAppWindow}});var m=t(17);Object.defineProperty(n,"media",{enumerable:!0,get:function(){return m.media}});var g=t(29);Object.defineProperty(n,"location",{enumerable:!0,get:function(){return g.location}});var f=t(30);Object.defineProperty(n,"meeting",{enumerable:!0,get:function(){return f.meeting}});var p=t(31);Object.defineProperty(n,"monetization",{enumerable:!0,get:function(){return p.monetization}});var C=t(32);Object.defineProperty(n,"people",{enumerable:!0,get:function(){return C.people}});var h=t(33);Object.defineProperty(n,"video",{enumerable:!0,get:function(){return h.video}});var b=t(34);Object.defineProperty(n,"sharing",{enumerable:!0,get:function(){return b.sharing}})},function(e,n){var t,r,i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);i?(t=new Uint8Array(16),e.exports=function(){return i(t),t}):(r=new Array(16),e.exports=function(){for(var e,n=0;n<16;n++)0==(3&n)&&(e=4294967296*Math.random()),r[n]=e>>>((3&n)<<3)&255;return r})},function(e,n){for(var r=[],t=0;t<256;++t)r[t]=(t+256).toString(16).substr(1);e.exports=function(e,n){var t=n||0;return[(n=r)[e[t++]],n[e[t++]],n[e[t++]],n[e[t++]],"-",n[e[t++]],n[e[t++]],"-",n[e[t++]],n[e[t++]],"-",n[e[t++]],n[e[t++]],"-",n[e[t++]],n[e[t++]],n[e[t++]],n[e[t++]],n[e[t++]],n[e[+t]]].join("")}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.authentication=void 0;var c=t(1),m=t(6),g=t(2),f=t(0),p=t(3);!function(e){var o,n;function a(){t();try{f.Communication.childWindow&&f.Communication.childWindow.close()}finally{f.Communication.childWindow=null,f.Communication.childOrigin=null}}function r(e){o=e,a();var n=o.width||600,t=o.height||400,n=Math.min(n,f.Communication.currentWindow.outerWidth-400),t=Math.min(t,f.Communication.currentWindow.outerHeight-200),r=document.createElement("a");r.href=o.url;var i=void 0!==f.Communication.currentWindow.screenLeft?f.Communication.currentWindow.screenLeft:f.Communication.currentWindow.screenX,e=void 0!==f.Communication.currentWindow.screenTop?f.Communication.currentWindow.screenTop:f.Communication.currentWindow.screenY;i+=f.Communication.currentWindow.outerWidth/2-n/2,e+=f.Communication.currentWindow.outerHeight/2-t/2,f.Communication.childWindow=f.Communication.currentWindow.open(r.href,"_blank","toolbar=no, location=yes, status=no, menubar=no, scrollbars=yes, top="+e+", left="+i+", width="+n+", height="+t),f.Communication.childWindow?s():l("FailedToOpenWindow")}function t(){n&&(clearInterval(n),n=0),(0,p.removeHandler)("initialize"),(0,p.removeHandler)("navigateCrossDomain")}function s(){t(),n=f.Communication.currentWindow.setInterval(function(){if(!f.Communication.childWindow||f.Communication.childWindow.closed)l("CancelledByUser");else{var e=f.Communication.childOrigin;try{f.Communication.childOrigin="*",(0,f.sendMessageEventToChild)("ping")}finally{f.Communication.childOrigin=e}}},100),(0,p.registerHandler)("initialize",function(){return[g.FrameContexts.authentication,m.GlobalVars.hostClientType]}),(0,p.registerHandler)("navigateCrossDomain",function(){return!1})}function i(e){try{o&&o.successCallback&&o.successCallback(e)}finally{o=null,a()}}function l(e){try{o&&o.failureCallback&&o.failureCallback(e)}finally{o=null,a()}}function u(e,n,t){var r;e&&((r=document.createElement("a")).href=decodeURIComponent(e),r.host&&r.host!==window.location.host&&"outlook.office.com"===r.host&&-1<r.search.indexOf("client_type=Win32_Outlook")&&(n&&"result"===n&&(t&&(r.href=d(r.href,"result",t)),f.Communication.currentWindow.location.assign(d(r.href,"authSuccess",""))),n&&"reason"===n&&(t&&(r.href=d(r.href,"reason",t)),f.Communication.currentWindow.location.assign(d(r.href,"authFailure","")))))}function d(e,n,t){var r=e.indexOf("#"),i=(i=-1===r?"#":e.substr(r))+"&"+n+(""!==t?"="+t:"");return(e=-1===r?e:e.substr(0,r))+i}e.initialize=function(){(0,p.registerHandler)("authentication.authenticate.success",i,!1),(0,p.registerHandler)("authentication.authenticate.failure",l,!1)},e.registerAuthenticationHandlers=function(e){o=e},e.authenticate=function(e){var t=void 0!==e?e:o;(0,c.ensureInitialized)(g.FrameContexts.content,g.FrameContexts.sidePanel,g.FrameContexts.settings,g.FrameContexts.remove,g.FrameContexts.task,g.FrameContexts.stage,g.FrameContexts.meetingStage),m.GlobalVars.hostClientType===g.HostClientType.desktop||m.GlobalVars.hostClientType===g.HostClientType.android||m.GlobalVars.hostClientType===g.HostClientType.ios||m.GlobalVars.hostClientType===g.HostClientType.rigel||m.GlobalVars.hostClientType===g.HostClientType.teamsRoomsWindows||m.GlobalVars.hostClientType===g.HostClientType.teamsRoomsAndroid||m.GlobalVars.hostClientType===g.HostClientType.teamsPhones||m.GlobalVars.hostClientType===g.HostClientType.teamsDisplays?((e=document.createElement("a")).href=t.url,(0,f.sendMessageToParent)("authentication.authenticate",[e.href,t.width,t.height],function(e,n){e?t.successCallback(n):t.failureCallback(n)})):r(t)},e.getAuthToken=function(t){(0,c.ensureInitialized)(),(0,f.sendMessageToParent)("authentication.getAuthToken",[t.resources,t.claims,t.silent],function(e,n){e?t.successCallback(n):t.failureCallback(n)})},e.getUser=function(t){(0,c.ensureInitialized)(),(0,f.sendMessageToParent)("authentication.getUser",function(e,n){e?t.successCallback(n):t.failureCallback(n)})},e.notifySuccess=function(e,n){u(n,"result",e),(0,c.ensureInitialized)(g.FrameContexts.authentication),(0,f.sendMessageToParent)("authentication.authenticate.success",[e]),(0,f.waitForMessageQueue)(f.Communication.parentWindow,function(){return setTimeout(function(){return f.Communication.currentWindow.close()},200)})},e.notifyFailure=function(e,n){u(n,"reason",e),(0,c.ensureInitialized)(g.FrameContexts.authentication),(0,f.sendMessageToParent)("authentication.authenticate.failure",[e]),(0,f.waitForMessageQueue)(f.Communication.parentWindow,function(){return setTimeout(function(){return f.Communication.currentWindow.close()},200)})}}(n.authentication||(n.authentication={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.settings=void 0;var s=t(1),l=t(2),u=t(5),d=t(0),c=t(3);!function(e){var n,t;function r(e){e=new i(e);n?n(e):e.notifySuccess()}e.initialize=function(){(0,c.registerHandler)("settings.save",r,!1),(0,c.registerHandler)("settings.remove",o,!1)},e.setValidityState=function(e){(0,s.ensureInitialized)(l.FrameContexts.settings,l.FrameContexts.remove),(0,d.sendMessageToParent)("settings.setValidityState",[e])},e.getSettings=function(e){(0,s.ensureInitialized)(l.FrameContexts.content,l.FrameContexts.settings,l.FrameContexts.remove,l.FrameContexts.sidePanel),(0,d.sendMessageToParent)("settings.getSettings",e)},e.setSettings=function(e,n){(0,s.ensureInitialized)(l.FrameContexts.content,l.FrameContexts.settings,l.FrameContexts.sidePanel),(0,d.sendMessageToParent)("settings.setSettings",[e],n||(0,u.getGenericOnCompleteHandler)())},e.registerOnSaveHandler=function(e){(0,s.ensureInitialized)(l.FrameContexts.settings),(n=e)&&(0,d.sendMessageToParent)("registerHandler",["save"])},e.registerOnRemoveHandler=function(e){(0,s.ensureInitialized)(l.FrameContexts.remove,l.FrameContexts.settings),(t=e)&&(0,d.sendMessageToParent)("registerHandler",["remove"])};var i=function(){function e(e){this.notified=!1,this.result=e||{}}return e.prototype.notifySuccess=function(){this.ensureNotNotified(),(0,d.sendMessageToParent)("settings.save.success"),this.notified=!0},e.prototype.notifyFailure=function(e){this.ensureNotNotified(),(0,d.sendMessageToParent)("settings.save.failure",[e]),this.notified=!0},e.prototype.ensureNotNotified=function(){if(this.notified)throw new Error("The SaveEvent may only notify success or failure once.")},e}();function o(){var e=new a;t?t(e):e.notifySuccess()}var a=function(){function e(){this.notified=!1}return e.prototype.notifySuccess=function(){this.ensureNotNotified(),(0,d.sendMessageToParent)("settings.remove.success"),this.notified=!0},e.prototype.notifyFailure=function(e){this.ensureNotNotified(),(0,d.sendMessageToParent)("settings.remove.failure",[e]),this.notified=!0},e.prototype.ensureNotNotified=function(){if(this.notified)throw new Error("The removeEvent may only notify success or failure once.")},e}()}(n.settings||(n.settings={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.logs=void 0;var r=t(1),i=t(0),o=t(3);!function(){(n.logs||(n.logs={})).registerGetLogHandler=function(n){(0,r.ensureInitialized)(),n?(0,o.registerHandler)("log.request",function(){var e=n();(0,i.sendMessageToParent)("log.receive",[e])}):(0,o.removeHandler)("log.request")}}()},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.registerUserSettingsChangeHandler=n.getConfigSetting=n.getChatMembers=n.registerCustomHandler=n.sendCustomEvent=n.sendCustomMessage=n.uploadCustomApp=n.showNotification=n.openFilePreview=n.exitFullscreen=n.enterFullscreen=n.getUserJoinedTeams=n.initializePrivateApis=void 0;var i=t(1),r=t(2),o=t(5),a=t(0),s=t(15),l=t(3),u=t(6),d=t(7),c=t(4);n.initializePrivateApis=function(){s.menus.initialize()},n.getUserJoinedTeams=function(e,n){if((0,i.ensureInitialized)(),(u.GlobalVars.hostClientType===r.HostClientType.android||u.GlobalVars.hostClientType===r.HostClientType.teamsRoomsAndroid||u.GlobalVars.hostClientType===r.HostClientType.teamsPhones||u.GlobalVars.hostClientType===r.HostClientType.teamsDisplays)&&!(0,i.isAPISupportedByPlatform)(c.getUserJoinedTeamsSupportedAndroidClientVersion)){var t={errorCode:d.ErrorCode.OLD_PLATFORM};throw new Error(JSON.stringify(t))}(0,a.sendMessageToParent)("getUserJoinedTeams",[n],e)},n.enterFullscreen=function(){(0,i.ensureInitialized)(r.FrameContexts.content),(0,a.sendMessageToParent)("enterFullscreen",[])},n.exitFullscreen=function(){(0,i.ensureInitialized)(r.FrameContexts.content),(0,a.sendMessageToParent)("exitFullscreen",[])},n.openFilePreview=function(e){(0,i.ensureInitialized)(r.FrameContexts.content),e=[e.entityId,e.title,e.description,e.type,e.objectUrl,e.downloadUrl,e.webPreviewUrl,e.webEditUrl,e.baseUrl,e.editFile,e.subEntityId,e.viewerAction,e.fileOpenPreference,e.conversationId],(0,a.sendMessageToParent)("openFilePreview",e)},n.showNotification=function(e){(0,i.ensureInitialized)(r.FrameContexts.content),e=[e.message,e.notificationType],(0,a.sendMessageToParent)("showNotification",e)},n.uploadCustomApp=function(e,n){(0,i.ensureInitialized)(),(0,a.sendMessageToParent)("uploadCustomApp",[e],n||(0,o.getGenericOnCompleteHandler)())},n.sendCustomMessage=function(e,n,t){(0,i.ensureInitialized)(),(0,a.sendMessageToParent)(e,n,t)},n.sendCustomEvent=function(e,n){if((0,i.ensureInitialized)(),!a.Communication.childWindow)throw new Error("The child window has not yet been initialized or is not present");(0,a.sendMessageEventToChild)(e,n)},n.registerCustomHandler=function(e,t){var r=this;(0,i.ensureInitialized)(),(0,l.registerHandler)(e,function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.apply(r,e)})},n.getChatMembers=function(e){(0,i.ensureInitialized)(),(0,a.sendMessageToParent)("getChatMembers",e)},n.getConfigSetting=function(e,n){(0,i.ensureInitialized)(),(0,a.sendMessageToParent)("getConfigSetting",[n],e)},n.registerUserSettingsChangeHandler=function(e,n){(0,i.ensureInitialized)(),(0,l.registerHandler)("userSettingsChange",n,!0,[e])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.menus=void 0;var l=t(1),u=t(0),d=t(3);!function(e){var t,r,i,n=function(){return function(){this.enabled=!0,this.selected=!1}}();function o(e){i&&i(e)||((0,l.ensureInitialized)(),(0,u.sendMessageToParent)("viewConfigItemPress",[e]))}function a(e){t&&t(e)||((0,l.ensureInitialized)(),(0,u.sendMessageToParent)("handleNavBarMenuItemPress",[e]))}function s(e){r&&r(e)||((0,l.ensureInitialized)(),(0,u.sendMessageToParent)("handleActionMenuItemPress",[e]))}e.MenuItem=n,function(e){e.dropDown="dropDown",e.popOver="popOver"}(e.MenuListType||(e.MenuListType={})),e.initialize=function(){(0,d.registerHandler)("navBarMenuItemPress",a,!1),(0,d.registerHandler)("actionMenuItemPress",s,!1),(0,d.registerHandler)("setModuleView",o,!1)},e.setUpViews=function(e,n){(0,l.ensureInitialized)(),i=n,(0,u.sendMessageToParent)("setUpViews",[e])},e.setNavBarMenu=function(e,n){(0,l.ensureInitialized)(),t=n,(0,u.sendMessageToParent)("setNavBarMenu",[e])},e.showActionMenu=function(e,n){(0,l.ensureInitialized)(),r=n,(0,u.sendMessageToParent)("showActionMenu",[e])}}(n.menus||(n.menus={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ParentAppWindow=n.ChildAppWindow=void 0;var r=t(1),i=t(2),o=t(5),a=t(0),s=t(3),t=function(){function e(){}return e.prototype.postMessage=function(e,n){(0,r.ensureInitialized)(),(0,a.sendMessageToParent)("messageForChild",[e],n||(0,o.getGenericOnCompleteHandler)())},e.prototype.addEventListener=function(e,n){"message"===e&&(0,s.registerHandler)("messageForParent",n)},e}();n.ChildAppWindow=t;t=function(){function e(){}return Object.defineProperty(e,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!1,configurable:!0}),e.prototype.postMessage=function(e,n){(0,r.ensureInitialized)(i.FrameContexts.task),(0,a.sendMessageToParent)("messageForParent",[e],n||(0,o.getGenericOnCompleteHandler)())},e.prototype.addEventListener=function(e,n){"message"===e&&(0,s.registerHandler)("messageForChild",n)},e}();n.ParentAppWindow=t},function(e,n,t){"use strict";var r=this&&this.__extends||function(){var r=function(e,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}}();Object.defineProperty(n,"__esModule",{value:!0}),n.media=void 0;var i=t(6),o=t(7),l=t(1),u=t(2),a=t(5),d=t(18),c=t(0),m=t(3),g=t(4);!function(e){!function(e){e.Base64="base64",e.ID="id"}(e.FileFormat||(e.FileFormat={}));var n=function(){return function(){}}();e.File=n,e.captureImage=function(e){if(!e)throw new Error("[captureImage] Callback cannot be null");(0,l.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.task),i.GlobalVars.isFramelessWindow?(0,l.isAPISupportedByPlatform)(g.captureImageMobileSupportVersion)?(0,c.sendMessageToParent)("captureImage",e):e({errorCode:o.ErrorCode.OLD_PLATFORM},void 0):e({errorCode:o.ErrorCode.NOT_SUPPORTED_ON_PLATFORM},void 0)};var s=function(t){function e(e){void 0===e&&(e=null);var n=t.call(this)||this;return e&&(n.content=e.content,n.format=e.format,n.mimeType=e.mimeType,n.name=e.name,n.preview=e.preview,n.size=e.size),n}return r(e,t),e.prototype.getMedia=function(e){if(!e)throw new Error("[get Media] Callback cannot be null");(0,l.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.task),(0,l.isAPISupportedByPlatform)(g.mediaAPISupportVersion)?(0,d.validateGetMediaInputs)(this.mimeType,this.format,this.content)?(0,l.isAPISupportedByPlatform)(g.getMediaCallbackSupportVersion)?this.getMediaViaCallback(e):this.getMediaViaHandler(e):e({errorCode:o.ErrorCode.INVALID_ARGUMENTS},null):e({errorCode:o.ErrorCode.OLD_PLATFORM},null)},e.prototype.getMediaViaCallback=function(t){var r={mediaMimeType:this.mimeType,assembleAttachment:[]},e=[this.content];(0,c.sendMessageToParent)("getMedia",e,function(e){var n;t&&(e&&e.error?t(e.error,null):e&&e.mediaChunk?e.mediaChunk.chunkSequence<=0?(n=(0,d.createFile)(r.assembleAttachment,r.mediaMimeType),t(e.error,n)):(e=(0,d.decodeAttachment)(e.mediaChunk,r.mediaMimeType),r.assembleAttachment.push(e)):t({errorCode:o.ErrorCode.INTERNAL_ERROR,message:"data received is null"},null))})},e.prototype.getMediaViaHandler=function(t){var r=(0,a.generateGUID)(),i={mediaMimeType:this.mimeType,assembleAttachment:[]},e=[r,this.content];this.content&&t&&(0,c.sendMessageToParent)("getMedia",e),(0,m.registerHandler)("getMedia"+r,function(e){var n;t&&((n=JSON.parse(e)).error?(t(n.error,null),(0,m.removeHandler)("getMedia"+r)):n.mediaChunk?n.mediaChunk.chunkSequence<=0?(e=(0,d.createFile)(i.assembleAttachment,i.mediaMimeType),t(n.error,e),(0,m.removeHandler)("getMedia"+r)):(n=(0,d.decodeAttachment)(n.mediaChunk,i.mediaMimeType),i.assembleAttachment.push(n)):(t({errorCode:o.ErrorCode.INTERNAL_ERROR,message:"data received is null"},null),(0,m.removeHandler)("getMedia"+r)))})},e}(n);e.Media=s,function(e){e[e.Photo=1]="Photo",e[e.Document=2]="Document",e[e.Whiteboard=3]="Whiteboard",e[e.BusinessCard=4]="BusinessCard"}(e.CameraStartMode||(e.CameraStartMode={})),function(e){e[e.Camera=1]="Camera",e[e.Gallery=2]="Gallery"}(e.Source||(e.Source={})),function(e){e[e.Image=1]="Image",e[e.VideoAndImage=3]="VideoAndImage",e[e.Audio=4]="Audio"}(e.MediaType||(e.MediaType={})),function(e){e[e.ID=1]="ID",e[e.URL=2]="URL"}(e.ImageUriType||(e.ImageUriType={})),e.selectMedia=function(e,a){if(!a)throw new Error("[select Media] Callback cannot be null");if((0,l.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.task),(0,l.isAPISupportedByPlatform)(g.mediaAPISupportVersion)){if((0,d.isMediaCallForVideoAndImageInputs)(e)){if(i.GlobalVars.hostClientType!=u.HostClientType.android&&i.GlobalVars.hostClientType!=u.HostClientType.ios){var n={errorCode:o.ErrorCode.NOT_SUPPORTED_ON_PLATFORM};return void a(n,null)}if(!(0,l.isAPISupportedByPlatform)(g.videoAndImageMediaAPISupportVersion)){t={errorCode:o.ErrorCode.OLD_PLATFORM};return void a(t,null)}}(0,d.validateSelectMediaInputs)(e)?(0,c.sendMessageToParent)("selectMedia",[e],function(e,n){if(n){for(var t=[],r=0,i=n;r<i.length;r++){var o=i[r];t.push(new s(o))}a(e,t)}else a(e,null)}):(e={errorCode:o.ErrorCode.INVALID_ARGUMENTS},a(e,null))}else{var t={errorCode:o.ErrorCode.OLD_PLATFORM};a(t,null)}},e.viewImages=function(e,n){if(!n)throw new Error("[view images] Callback cannot be null");(0,l.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.task),(0,l.isAPISupportedByPlatform)(g.mediaAPISupportVersion)?(0,d.validateViewImagesInput)(e)?(0,c.sendMessageToParent)("viewImages",[e],n):n({errorCode:o.ErrorCode.INVALID_ARGUMENTS}):n({errorCode:o.ErrorCode.OLD_PLATFORM})},e.scanBarCode=function(e,n){if(!e)throw new Error("[media.scanBarCode] Callback cannot be null");(0,l.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.task),i.GlobalVars.hostClientType!==u.HostClientType.desktop&&i.GlobalVars.hostClientType!==u.HostClientType.web&&i.GlobalVars.hostClientType!==u.HostClientType.rigel&&i.GlobalVars.hostClientType!==u.HostClientType.teamsRoomsWindows&&i.GlobalVars.hostClientType!==u.HostClientType.teamsRoomsAndroid&&i.GlobalVars.hostClientType!==u.HostClientType.teamsPhones&&i.GlobalVars.hostClientType!==u.HostClientType.teamsDisplays?(0,l.isAPISupportedByPlatform)(g.scanBarCodeAPIMobileSupportVersion)?(0,d.validateScanBarCodeInput)(n)?(0,c.sendMessageToParent)("media.scanBarCode",[n],e):e({errorCode:o.ErrorCode.INVALID_ARGUMENTS},null):e({errorCode:o.ErrorCode.OLD_PLATFORM},null):e({errorCode:o.ErrorCode.NOT_SUPPORTED_ON_PLATFORM},null)}}(n.media||(n.media={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.validatePeoplePickerInput=n.validateScanBarCodeInput=n.validateViewImagesInput=n.validateGetMediaInputs=n.isMediaCallForVideoAndImageInputs=n.validateSelectMediaInputs=n.decodeAttachment=n.createFile=void 0;var r=t(17);n.createFile=function(e,n){if(null==e||null==n||e.length<=0)return null;var t,r=1;return e.sort(function(e,n){return e.sequence>n.sequence?1:-1}),e.forEach(function(e){e.sequence==r&&(t=t?new Blob([t,e.file],{type:n}):new Blob([e.file],{type:n}),r++)}),t},n.decodeAttachment=function(e,n){if(null==e||null==n)return null;for(var t=atob(e.chunk),r=new Array(t.length),i=0;i<t.length;i++)r[i]=t.charCodeAt(i);var o=new Uint8Array(r),n=new Blob([o],{type:n});return{sequence:e.chunkSequence,file:n}},n.validateSelectMediaInputs=function(e){return!(null==e||10<e.maxMediaCount)},n.isMediaCallForVideoAndImageInputs=function(e){return!(!e||e.mediaType!=r.media.MediaType.VideoAndImage&&!e.videoAndImageProps)},n.validateGetMediaInputs=function(e,n,t){return null!=e&&null!=n&&n==r.media.FileFormat.ID&&null!=t},n.validateViewImagesInput=function(e){return!(null==e||e.length<=0||10<e.length)},n.validateScanBarCodeInput=function(e){return!e||!(null===e.timeOutIntervalInSec||e.timeOutIntervalInSec<=0||60<e.timeOutIntervalInSec)},n.validatePeoplePickerInput=function(e){if(e){if(e.title&&"string"!=typeof e.title)return!1;if(e.setSelected&&"object"!=typeof e.setSelected)return!1;if(e.openOrgWideSearchInChatOrChannel&&"boolean"!=typeof e.openOrgWideSearchInChatOrChannel)return!1;if(e.singleSelect&&"boolean"!=typeof e.singleSelect)return!1}return!0}},function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){e[r=void 0===r?t:r]=n[t]}),i=this&&this.__exportStar||function(e,n){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(n,t)||r(n,e,t)};Object.defineProperty(n,"__esModule",{value:!0}),i(t(20),n),i(t(8),n)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.teams=n.appEntity=n.files=n.remoteCamera=n.meetingRoom=n.conversations=n.registerUserSettingsChangeHandler=n.uploadCustomApp=n.registerCustomHandler=n.sendCustomEvent=n.showNotification=n.sendCustomMessage=n.openFilePreview=n.getUserJoinedTeams=n.getConfigSetting=n.getChatMembers=n.exitFullscreen=n.enterFullscreen=n.UserSettingTypes=n.ViewerActionTypes=n.NotificationTypes=n.logs=n.menus=n.bot=void 0;var r=t(21);Object.defineProperty(n,"bot",{enumerable:!0,get:function(){return r.bot}});var i=t(15);Object.defineProperty(n,"menus",{enumerable:!0,get:function(){return i.menus}});var o=t(13);Object.defineProperty(n,"logs",{enumerable:!0,get:function(){return o.logs}});var a=t(35);Object.defineProperty(n,"NotificationTypes",{enumerable:!0,get:function(){return a.NotificationTypes}}),Object.defineProperty(n,"ViewerActionTypes",{enumerable:!0,get:function(){return a.ViewerActionTypes}}),Object.defineProperty(n,"UserSettingTypes",{enumerable:!0,get:function(){return a.UserSettingTypes}});var s=t(14);Object.defineProperty(n,"enterFullscreen",{enumerable:!0,get:function(){return s.enterFullscreen}}),Object.defineProperty(n,"exitFullscreen",{enumerable:!0,get:function(){return s.exitFullscreen}}),Object.defineProperty(n,"getChatMembers",{enumerable:!0,get:function(){return s.getChatMembers}}),Object.defineProperty(n,"getConfigSetting",{enumerable:!0,get:function(){return s.getConfigSetting}}),Object.defineProperty(n,"getUserJoinedTeams",{enumerable:!0,get:function(){return s.getUserJoinedTeams}}),Object.defineProperty(n,"openFilePreview",{enumerable:!0,get:function(){return s.openFilePreview}}),Object.defineProperty(n,"sendCustomMessage",{enumerable:!0,get:function(){return s.sendCustomMessage}}),Object.defineProperty(n,"showNotification",{enumerable:!0,get:function(){return s.showNotification}}),Object.defineProperty(n,"sendCustomEvent",{enumerable:!0,get:function(){return s.sendCustomEvent}}),Object.defineProperty(n,"registerCustomHandler",{enumerable:!0,get:function(){return s.registerCustomHandler}}),Object.defineProperty(n,"uploadCustomApp",{enumerable:!0,get:function(){return s.uploadCustomApp}}),Object.defineProperty(n,"registerUserSettingsChangeHandler",{enumerable:!0,get:function(){return s.registerUserSettingsChangeHandler}});var l=t(36);Object.defineProperty(n,"conversations",{enumerable:!0,get:function(){return l.conversations}});var u=t(37);Object.defineProperty(n,"meetingRoom",{enumerable:!0,get:function(){return u.meetingRoom}});var d=t(38);Object.defineProperty(n,"remoteCamera",{enumerable:!0,get:function(){return d.remoteCamera}});var c=t(39);Object.defineProperty(n,"files",{enumerable:!0,get:function(){return c.files}});var m=t(40);Object.defineProperty(n,"appEntity",{enumerable:!0,get:function(){return m.appEntity}});var g=t(41);Object.defineProperty(n,"teams",{enumerable:!0,get:function(){return g.teams}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.bot=void 0;var i=t(0),o=t(1);!function(e){e.sendQuery=function(e,t,r){(0,o.ensureInitialized)(),(0,i.sendMessageToParent)("bot.executeQuery",[e],function(e,n){(e?t:r)(n)})},e.getSupportedCommands=function(t,r){(0,o.ensureInitialized)(),(0,i.sendMessageToParent)("bot.getSupportedCommands",function(e,n){(e?t:r)(n)})},e.authenticate=function(e,t,r){(0,o.ensureInitialized)(),(0,i.sendMessageToParent)("bot.authenticate",[e],function(e,n){(e?t:r)(n)})},function(e){e.Results="Results",e.Auth="Auth"}(e.ResponseType||(e.ResponseType={}))}(n.bot||(n.bot={}))},function(e,n,t){var r=t(23),i=t(24),t=i;t.v1=r,t.v4=i,e.exports=t},function(e,n,t){var d,c,m=t(9),g=t(10),f=0,p=0;e.exports=function(e,n,t){var r=n&&t||0,i=n||[],o=(e=e||{}).node||d,a=void 0!==e.clockseq?e.clockseq:c;null!=o&&null!=a||(l=m(),null==o&&(o=d=[1|l[0],l[1],l[2],l[3],l[4],l[5]]),null==a&&(a=c=16383&(l[6]<<8|l[7])));var s=void 0!==e.msecs?e.msecs:(new Date).getTime(),t=void 0!==e.nsecs?e.nsecs:p+1,l=s-f+(t-p)/1e4;if(l<0&&void 0===e.clockseq&&(a=a+1&16383),1e4<=(t=(l<0||f<s)&&void 0===e.nsecs?0:t))throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=s,c=a,t=(1e4*(268435455&(s+=122192928e5))+(p=t))%4294967296,i[r++]=t>>>24&255,i[r++]=t>>>16&255,i[r++]=t>>>8&255,i[r++]=255&t,s=s/4294967296*1e4&268435455,i[r++]=s>>>8&255,i[r++]=255&s,i[r++]=s>>>24&15|16,i[r++]=s>>>16&255,i[r++]=a>>>8|128,i[r++]=255&a;for(var u=0;u<6;++u)i[r+u]=o[u];return n||g(i)}},function(e,n,t){var a=t(9),s=t(10);e.exports=function(e,n,t){var r=n&&t||0;"string"==typeof e&&(n="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||a)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n)for(var o=0;o<16;++o)n[r+o]=i[o];return n||s(i)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.appInitialization=void 0;var r=t(1),i=t(4),o=t(0);!function(n){n.Messages={AppLoaded:"appInitialization.appLoaded",Success:"appInitialization.success",Failure:"appInitialization.failure",ExpectedFailure:"appInitialization.expectedFailure"},function(e){e.AuthFailed="AuthFailed",e.Timeout="Timeout",e.Other="Other"}(n.FailedReason||(n.FailedReason={})),function(e){e.PermissionError="PermissionError",e.NotFound="NotFound",e.Throttling="Throttling",e.Offline="Offline",e.Other="Other"}(n.ExpectedFailureReason||(n.ExpectedFailureReason={})),n.notifyAppLoaded=function(){(0,r.ensureInitialized)(),(0,o.sendMessageToParent)(n.Messages.AppLoaded,[i.version])},n.notifySuccess=function(){(0,r.ensureInitialized)(),(0,o.sendMessageToParent)(n.Messages.Success,[i.version])},n.notifyFailure=function(e){(0,r.ensureInitialized)(),(0,o.sendMessageToParent)(n.Messages.Failure,[e.reason,e.message])},n.notifyExpectedFailure=function(e){(0,r.ensureInitialized)(),(0,o.sendMessageToParent)(n.Messages.ExpectedFailure,[e.reason,e.message])}}(n.appInitialization||(n.appInitialization={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.initializeWithFrameContext=n.setFrameContext=n.executeDeepLink=n.shareDeepLink=n.getMruTabInstances=n.getTabInstances=n.registerEnterSettingsHandler=n.registerFocusEnterHandler=n.registerBeforeUnloadHandler=n.registerOnLoadHandler=n.registerBackButtonHandler=n.registerAppButtonHoverLeaveHandler=n.registerAppButtonHoverEnterHandler=n.registerAppButtonClickHandler=n.registerFullScreenHandler=n.registerOnThemeChangeHandler=n.getContext=n.print=n.enablePrintCapability=n._uninitialize=n._initialize=n.initialize=void 0;var r=t(1),i=t(6),o=t(4),a=t(12),s=t(5),l=t(13),u=t(2),d=t(0),c=t(11),m=t(14),g=t(3);function f(e,n){i.GlobalVars.initializeCalled||(i.GlobalVars.initializeCalled=!0,g.initializeHandlers(),(0,d.initializeCommunication)(function(e,n,t){void 0===t&&(t=o.defaultSDKVersionForCompatCheck),i.GlobalVars.frameContext=e,i.GlobalVars.hostClientType=n,i.GlobalVars.clientSupportedSDKVersion=t,i.GlobalVars.initializeCallbacks.forEach(function(e){return e()}),i.GlobalVars.initializeCallbacks=[],i.GlobalVars.initializeCompleted=!0},n),c.authentication.initialize(),a.settings.initialize(),(0,m.initializePrivateApis)()),Array.isArray(n)&&(0,r.processAdditionalValidOrigins)(n),e&&(i.GlobalVars.initializeCompleted?e():i.GlobalVars.initializeCallbacks.push(e))}function p(){window.print()}function C(e){(0,r.ensureInitialized)(),g.registerOnThemeChangeHandler(e)}function h(e){(0,r.ensureInitialized)(),g.registerHandler("fullScreenChange",e)}function b(e){(0,r.ensureInitialized)(),g.registerBackButtonHandler(e)}function v(e){(0,r.ensureInitialized)(),g.registerOnLoadHandler(e)}function y(e){(0,r.ensureInitialized)(),g.registerBeforeUnloadHandler(e)}function P(e){(0,r.ensureInitialized)(),g.registerFocusEnterHandler(e)}function T(e){(0,r.ensureInitialized)(u.FrameContexts.content),(0,d.sendMessageToParent)("setFrameContext",[e])}n.initialize=f,n._initialize=function(e){d.Communication.currentWindow=e},n._uninitialize=function(){i.GlobalVars.initializeCalled&&(i.GlobalVars.frameContext&&(C(null),h(null),b(null),y(null),P(null),v(null),l.logs.registerGetLogHandler(null)),i.GlobalVars.frameContext===u.FrameContexts.settings&&a.settings.registerOnSaveHandler(null),i.GlobalVars.frameContext===u.FrameContexts.remove&&a.settings.registerOnRemoveHandler(null),i.GlobalVars.initializeCalled=!1,i.GlobalVars.initializeCompleted=!1,i.GlobalVars.initializeCallbacks=[],i.GlobalVars.additionalValidOrigins=[],i.GlobalVars.frameContext=null,i.GlobalVars.hostClientType=null,(i.GlobalVars.isFramelessWindow=!1,d.uninitializeCommunication)())},n.enablePrintCapability=function(){i.GlobalVars.printCapabilityEnabled||(i.GlobalVars.printCapabilityEnabled=!0,(0,r.ensureInitialized)(),document.addEventListener("keydown",function(e){(e.ctrlKey||e.metaKey)&&80===e.keyCode&&(p(),e.cancelBubble=!0,e.preventDefault(),e.stopImmediatePropagation())}))},n.print=p,n.getContext=function(n){(0,r.ensureInitialized)(),(0,d.sendMessageToParent)("getContext",function(e){e.frameContext||(e.frameContext=i.GlobalVars.frameContext),n(e)})},n.registerOnThemeChangeHandler=C,n.registerFullScreenHandler=h,n.registerAppButtonClickHandler=function(e){(0,r.ensureInitialized)(u.FrameContexts.content),g.registerHandler("appButtonClick",e)},n.registerAppButtonHoverEnterHandler=function(e){(0,r.ensureInitialized)(u.FrameContexts.content),g.registerHandler("appButtonHoverEnter",e)},n.registerAppButtonHoverLeaveHandler=function(e){(0,r.ensureInitialized)(u.FrameContexts.content),g.registerHandler("appButtonHoverLeave",e)},n.registerBackButtonHandler=b,n.registerOnLoadHandler=v,n.registerBeforeUnloadHandler=y,n.registerFocusEnterHandler=P,n.registerEnterSettingsHandler=function(e){(0,r.ensureInitialized)(u.FrameContexts.content),g.registerHandler("changeSettings",e)},n.getTabInstances=function(e,n){(0,r.ensureInitialized)(),(0,d.sendMessageToParent)("getTabInstances",[n],e)},n.getMruTabInstances=function(e,n){(0,r.ensureInitialized)(),(0,d.sendMessageToParent)("getMruTabInstances",[n],e)},n.shareDeepLink=function(e){(0,r.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.sidePanel,u.FrameContexts.meetingStage),(0,d.sendMessageToParent)("shareDeepLink",[e.subEntityId,e.subEntityLabel,e.subEntityWebUrl])},n.executeDeepLink=function(e,n){(0,r.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.sidePanel,u.FrameContexts.settings,u.FrameContexts.task,u.FrameContexts.stage,u.FrameContexts.meetingStage),(0,d.sendMessageToParent)("executeDeepLink",[e],n||(0,s.getGenericOnCompleteHandler)())},n.setFrameContext=T,n.initializeWithFrameContext=function(e,n,t){f(n,t),T(e)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.navigateBack=n.navigateCrossDomain=n.navigateToTab=n.returnFocus=void 0;var r=t(1),i=t(5),o=t(2),a=t(0);n.returnFocus=function(e){(0,r.ensureInitialized)(o.FrameContexts.content),(0,a.sendMessageToParent)("returnFocus",[e])},n.navigateToTab=function(e,n){(0,r.ensureInitialized)(),(0,a.sendMessageToParent)("navigateToTab",[e],n||(0,i.getGenericOnCompleteHandler)("Invalid internalTabInstanceId and/or channelId were/was provided"))},n.navigateCrossDomain=function(e,n){(0,r.ensureInitialized)(o.FrameContexts.content,o.FrameContexts.sidePanel,o.FrameContexts.settings,o.FrameContexts.remove,o.FrameContexts.task,o.FrameContexts.stage,o.FrameContexts.meetingStage),(0,a.sendMessageToParent)("navigateCrossDomain",[e],n||(0,i.getGenericOnCompleteHandler)("Cross-origin navigation is only supported for URLs matching the pattern registered in the manifest."))},n.navigateBack=function(e){(0,r.ensureInitialized)(),(0,a.sendMessageToParent)("navigateBack",[],e||(0,i.getGenericOnCompleteHandler)("Back navigation is not supported in the current client or context."))}},function(e,n,t){"use strict";var r=this&&this.__rest||function(e,n){var t={};for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,i=Object.getOwnPropertySymbols(e);r<i.length;r++)n.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(t[i[r]]=e[i[r]]);return t};Object.defineProperty(n,"__esModule",{value:!0}),n.tasks=void 0;var i=t(2),o=t(16),a=t(0),s=t(1);!function(e){e.startTask=function(e,n){return(0,s.ensureInitialized)(i.FrameContexts.content,i.FrameContexts.sidePanel,i.FrameContexts.meetingStage),(0,a.sendMessageToParent)("tasks.startTask",[e],n),new o.ChildAppWindow},e.updateTask=function(e){(0,s.ensureInitialized)(i.FrameContexts.task),e.width,e.height;var n=r(e,["width","height"]);if(Object.keys(n).length)throw new Error("updateTask requires a taskInfo argument containing only width and height");(0,a.sendMessageToParent)("tasks.updateTask",[e])},e.submitTask=function(e,n){(0,s.ensureInitialized)(i.FrameContexts.task),(0,a.sendMessageToParent)("tasks.completeTask",[e,Array.isArray(n)?n:[n]])}}(n.tasks||(n.tasks={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.location=void 0;var r=t(7),i=t(1),o=t(2),a=t(0),s=t(4);!function(e){e.getLocation=function(e,n){if(!n)throw new Error("[location.getLocation] Callback cannot be null");(0,i.ensureInitialized)(o.FrameContexts.content,o.FrameContexts.task),(0,i.isAPISupportedByPlatform)(s.locationAPIsRequiredVersion)?e?(0,a.sendMessageToParent)("location.getLocation",[e],n):n({errorCode:r.ErrorCode.INVALID_ARGUMENTS},void 0):n({errorCode:r.ErrorCode.OLD_PLATFORM},void 0)},e.showLocation=function(e,n){if(!n)throw new Error("[location.showLocation] Callback cannot be null");(0,i.ensureInitialized)(o.FrameContexts.content,o.FrameContexts.task),(0,i.isAPISupportedByPlatform)(s.locationAPIsRequiredVersion)?e?(0,a.sendMessageToParent)("location.showLocation",[e],n):n({errorCode:r.ErrorCode.INVALID_ARGUMENTS},void 0):n({errorCode:r.ErrorCode.OLD_PLATFORM},void 0)}}(n.location||(n.location={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.meeting=void 0;var r=t(0),i=t(3),o=t(1),a=t(2);!function(e){!function(e){e.Unknown="Unknown",e.Adhoc="Adhoc",e.Scheduled="Scheduled",e.Recurring="Recurring",e.Broadcast="Broadcast",e.MeetNow="MeetNow"}(e.MeetingType||(e.MeetingType={})),e.getIncomingClientAudioState=function(e){if(!e)throw new Error("[get incoming client audio state] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel,a.FrameContexts.meetingStage),(0,r.sendMessageToParent)("getIncomingClientAudioState",e)},e.toggleIncomingClientAudio=function(e){if(!e)throw new Error("[toggle incoming client audio] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel,a.FrameContexts.meetingStage),(0,r.sendMessageToParent)("toggleIncomingClientAudio",e)},e.getMeetingDetails=function(e){if(!e)throw new Error("[get meeting details] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel,a.FrameContexts.meetingStage,a.FrameContexts.settings,a.FrameContexts.content),(0,r.sendMessageToParent)("meeting.getMeetingDetails",e)},e.getAuthenticationTokenForAnonymousUser=function(e){if(!e)throw new Error("[get Authentication Token For AnonymousUser] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel,a.FrameContexts.meetingStage),(0,r.sendMessageToParent)("meeting.getAuthenticationTokenForAnonymousUser",e)},e.getLiveStreamState=function(e){if(!e)throw new Error("[get live stream state] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.getLiveStreamState",e)},e.requestStartLiveStreaming=function(e,n,t){if(!e)throw new Error("[request start live streaming] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.requestStartLiveStreaming",[n,t],e)},e.requestStopLiveStreaming=function(e){if(!e)throw new Error("[request stop live streaming] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.requestStopLiveStreaming",e)},e.registerLiveStreamChangedHandler=function(e){if(!e)throw new Error("[register live stream changed handler] Handler cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,i.registerHandler)("meeting.liveStreamChanged",e)},e.shareAppContentToStage=function(e,n){if(!e)throw new Error("[share app content to stage] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.shareAppContentToStage",[n],e)},e.getAppContentStageSharingCapabilities=function(e){if(!e)throw new Error("[get app content stage sharing capabilities] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.getAppContentStageSharingCapabilities",e)},e.stopSharingAppContentToStage=function(e){if(!e)throw new Error("[stop sharing app content to stage] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.stopSharingAppContentToStage",e)},e.getAppContentStageSharingState=function(e){if(!e)throw new Error("[get app content stage sharing state] Callback cannot be null");(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,r.sendMessageToParent)("meeting.getAppContentStageSharingState",e)}}(n.meeting||(n.meeting={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.monetization=void 0;var r=t(0),i=t(1),o=t(2);!function(){(n.monetization||(n.monetization={})).openPurchaseExperience=function(e,n){if(!e)throw new Error("[open purchase experience] Callback cannot be null");(0,i.ensureInitialized)(o.FrameContexts.content),(0,r.sendMessageToParent)("monetization.openPurchaseExperience",[n],e)}}()},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.people=void 0;var r=t(1),i=t(2),o=t(7),a=t(18),s=t(0),l=t(4);!function(){(n.people||(n.people={})).selectPeople=function(e,n){if(!e)throw new Error("[people picker] Callback cannot be null");(0,r.ensureInitialized)(i.FrameContexts.content,i.FrameContexts.task,i.FrameContexts.settings),(0,r.isAPISupportedByPlatform)(l.peoplePickerRequiredVersion)?(0,a.validatePeoplePickerInput)(n)?(0,s.sendMessageToParent)("people.selectPeople",[n],e):e({errorCode:o.ErrorCode.INVALID_ARGUMENTS},null):e({errorCode:o.ErrorCode.OLD_PLATFORM},void 0)}}()},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.video=void 0;var i=t(0),o=t(1),a=t(2),s=t(3);!function(e){function t(){(0,i.sendMessageToParent)("video.videoFrameProcessed")}function r(e){(0,i.sendMessageToParent)("video.notifyError",[e])}!function(e){e[e.NV12=0]="NV12"}(e.VideoFrameFormat||(e.VideoFrameFormat={})),function(e){e[e.EffectChanged=0]="EffectChanged",e[e.EffectDisabled=1]="EffectDisabled"}(e.EffectChangeType||(e.EffectChangeType={})),e.registerForVideoFrame=function(n,e){(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,s.registerHandler)("video.newVideoFrame",function(e){void 0!==e&&n(e,t,r)}),(0,i.sendMessageToParent)("video.registerForVideoFrame",[e])},e.notifySelectedVideoEffectChanged=function(e,n){(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,i.sendMessageToParent)("video.videoEffectChanged",[e,n])},e.registerForVideoEffect=function(e){(0,o.ensureInitialized)(a.FrameContexts.sidePanel),(0,s.registerHandler)("video.effectParameterChange",e)}}(n.video||(n.video={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sharing=void 0;var a=t(1),s=t(0),l=t(7),u=t(2);!function(t){function r(e,n){if(e&&e.content&&e.content.length)return 1;n&&n({errorCode:l.ErrorCode.INVALID_ARGUMENTS,message:"Shared content is missing"})}function i(n,e){if(n.content.some(function(e){return!e.type}))e&&e({errorCode:l.ErrorCode.INVALID_ARGUMENTS,message:"Shared content type cannot be undefined"});else{if(!n.content.some(function(e){return e.type!==n.content[0].type}))return 1;e&&e({errorCode:l.ErrorCode.INVALID_ARGUMENTS,message:"Shared content must be of the same type"})}}function o(e,n){if("URL"===e.content[0].type){if(!e.content.some(function(e){return!e.url}))return 1;n&&n({errorCode:l.ErrorCode.INVALID_ARGUMENTS,message:"URLs are required for URL content types"})}else n&&n({errorCode:l.ErrorCode.INVALID_ARGUMENTS,message:"Content type is unsupported"})}t.SharingAPIMessages={shareWebContent:"sharing.shareWebContent"},t.shareWebContent=function(e,n){r(e,n)&&i(e,n)&&o(e,n)&&((0,a.ensureInitialized)(u.FrameContexts.content,u.FrameContexts.sidePanel,u.FrameContexts.task,u.FrameContexts.stage,u.FrameContexts.meetingStage),(0,s.sendMessageToParent)(t.SharingAPIMessages.shareWebContent,[e],n))}}(n.sharing||(n.sharing={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.UserSettingTypes=n.ViewerActionTypes=n.NotificationTypes=void 0,function(e){e.fileDownloadStart="fileDownloadStart",e.fileDownloadComplete="fileDownloadComplete"}(n.NotificationTypes||(n.NotificationTypes={})),function(e){e.view="view",e.edit="edit",e.editNew="editNew"}(n.ViewerActionTypes||(n.ViewerActionTypes={})),function(e){e.fileOpenPreference="fileOpenPreference",e.theme="theme"}(n.UserSettingTypes||(n.UserSettingTypes={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.conversations=void 0;var r=t(1),o=t(2),a=t(0),s=t(3);!function(e){e.openConversation=function(i){(0,r.ensureInitialized)(o.FrameContexts.content),(0,a.sendMessageToParent)("conversations.openConversation",[{title:i.title,subEntityId:i.subEntityId,conversationId:i.conversationId,channelId:i.channelId,entityId:i.entityId}],function(e,n){if(!e)throw new Error(n)}),i.onStartConversation&&(0,s.registerHandler)("startConversation",function(e,n,t,r){return i.onStartConversation({subEntityId:e,conversationId:n,channelId:t,entityId:r})}),i.onCloseConversation&&(0,s.registerHandler)("closeConversation",function(e,n,t,r){return i.onCloseConversation({subEntityId:e,conversationId:n,channelId:t,entityId:r})})},e.closeConversation=function(){(0,r.ensureInitialized)(o.FrameContexts.content),(0,a.sendMessageToParent)("conversations.closeConversation"),(0,s.removeHandler)("startConversation"),(0,s.removeHandler)("closeConversation")}}(n.conversations||(n.conversations={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.meetingRoom=void 0;var r=t(1),i=t(0),o=t(3);!function(e){!function(e){e.toggleMute="toggleMute",e.toggleCamera="toggleCamera",e.toggleCaptions="toggleCaptions",e.volume="volume",e.showVideoGallery="showVideoGallery",e.showContent="showContent",e.showVideoGalleryAndContent="showVideoGalleryAndContent",e.showLargeGallery="showLargeGallery",e.showTogether="showTogether",e.leaveMeeting="leaveMeeting"}(e.Capability||(e.Capability={})),e.getPairedMeetingRoomInfo=function(e){(0,r.ensureInitialized)(),(0,i.sendMessageToParent)("meetingRoom.getPairedMeetingRoomInfo",e)},e.sendCommandToPairedMeetingRoom=function(e,n){if(!e||0==e.length)throw new Error("[meetingRoom.sendCommandToPairedMeetingRoom] Command name cannot be null or empty");if(!n)throw new Error("[meetingRoom.sendCommandToPairedMeetingRoom] Callback cannot be null");(0,r.ensureInitialized)(),(0,i.sendMessageToParent)("meetingRoom.sendCommandToPairedMeetingRoom",[e],n)},e.registerMeetingRoomCapabilitiesUpdateHandler=function(n){if(!n)throw new Error("[meetingRoom.registerMeetingRoomCapabilitiesUpdateHandler] Handler cannot be null");(0,r.ensureInitialized)(),(0,o.registerHandler)("meetingRoom.meetingRoomCapabilitiesUpdate",function(e){(0,r.ensureInitialized)(),n(e)})},e.registerMeetingRoomStatesUpdateHandler=function(n){if(!n)throw new Error("[meetingRoom.registerMeetingRoomStatesUpdateHandler] Handler cannot be null");(0,r.ensureInitialized)(),(0,o.registerHandler)("meetingRoom.meetingRoomStatesUpdate",function(e){(0,r.ensureInitialized)(),n(e)})}}(n.meetingRoom||(n.meetingRoom={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.remoteCamera=void 0;var r=t(1),i=t(2),o=t(0),a=t(3);!function(e){!function(e){e.Reset="Reset",e.ZoomIn="ZoomIn",e.ZoomOut="ZoomOut",e.PanLeft="PanLeft",e.PanRight="PanRight",e.TiltUp="TiltUp",e.TiltDown="TiltDown"}(e.ControlCommand||(e.ControlCommand={})),function(e){e[e.CommandResetError=0]="CommandResetError",e[e.CommandZoomInError=1]="CommandZoomInError",e[e.CommandZoomOutError=2]="CommandZoomOutError",e[e.CommandPanLeftError=3]="CommandPanLeftError",e[e.CommandPanRightError=4]="CommandPanRightError",e[e.CommandTiltUpError=5]="CommandTiltUpError",e[e.CommandTiltDownError=6]="CommandTiltDownError",e[e.SendDataError=7]="SendDataError"}(e.ErrorReason||(e.ErrorReason={})),function(e){e[e.None=0]="None",e[e.ControlDenied=1]="ControlDenied",e[e.ControlNoResponse=2]="ControlNoResponse",e[e.ControlBusy=3]="ControlBusy",e[e.AckTimeout=4]="AckTimeout",e[e.ControlTerminated=5]="ControlTerminated",e[e.ControllerTerminated=6]="ControllerTerminated",e[e.DataChannelError=7]="DataChannelError",e[e.ControllerCancelled=8]="ControllerCancelled",e[e.ControlDisabled=9]="ControlDisabled",e[e.ControlTerminatedToAllowOtherController=10]="ControlTerminatedToAllowOtherController"}(e.SessionTerminatedReason||(e.SessionTerminatedReason={})),e.getCapableParticipants=function(e){if(!e)throw new Error("[remoteCamera.getCapableParticipants] Callback cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,o.sendMessageToParent)("remoteCamera.getCapableParticipants",e)},e.requestControl=function(e,n){if(!e)throw new Error("[remoteCamera.requestControl] Participant cannot be null");if(!n)throw new Error("[remoteCamera.requestControl] Callback cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,o.sendMessageToParent)("remoteCamera.requestControl",[e],n)},e.sendControlCommand=function(e,n){if(!e)throw new Error("[remoteCamera.sendControlCommand] ControlCommand cannot be null");if(!n)throw new Error("[remoteCamera.sendControlCommand] Callback cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,o.sendMessageToParent)("remoteCamera.sendControlCommand",[e],n)},e.terminateSession=function(e){if(!e)throw new Error("[remoteCamera.terminateSession] Callback cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,o.sendMessageToParent)("remoteCamera.terminateSession",e)},e.registerOnCapableParticipantsChangeHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnCapableParticipantsChangeHandler] Handler cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,a.registerHandler)("remoteCamera.capableParticipantsChange",e)},e.registerOnErrorHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnErrorHandler] Handler cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,a.registerHandler)("remoteCamera.handlerError",e)},e.registerOnDeviceStateChangeHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnDeviceStateChangeHandler] Handler cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,a.registerHandler)("remoteCamera.deviceStateChange",e)},e.registerOnSessionStatusChangeHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnSessionStatusChangeHandler] Handler cannot be null");(0,r.ensureInitialized)(i.FrameContexts.sidePanel),(0,a.registerHandler)("remoteCamera.sessionStatusChange",e)}}(n.remoteCamera||(n.remoteCamera={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.files=void 0;var r=t(0),i=t(1),o=t(8);!function(e){!function(e){e.Dropbox="DROPBOX",e.Box="BOX",e.Sharefile="SHAREFILE",e.GoogleDrive="GOOGLEDRIVE",e.Egnyte="EGNYTE"}(e.CloudStorageProvider||(e.CloudStorageProvider={})),function(e){e[e.Sharepoint=0]="Sharepoint",e[e.WopiIntegration=1]="WopiIntegration",e[e.Google=2]="Google"}(e.CloudStorageProviderType||(e.CloudStorageProviderType={})),e.getCloudStorageFolders=function(e,n){if((0,i.ensureInitialized)(o.FrameContexts.content),!e||0==e.length)throw new Error("[files.getCloudStorageFolders] channelId name cannot be null or empty");if(!n)throw new Error("[files.getCloudStorageFolders] Callback cannot be null");(0,r.sendMessageToParent)("files.getCloudStorageFolders",[e],n)},e.addCloudStorageFolder=function(e,n){if((0,i.ensureInitialized)(o.FrameContexts.content),!e||0==e.length)throw new Error("[files.addCloudStorageFolder] channelId name cannot be null or empty");if(!n)throw new Error("[files.addCloudStorageFolder] Callback cannot be null");(0,r.sendMessageToParent)("files.addCloudStorageFolder",[e],n)},e.deleteCloudStorageFolder=function(e,n,t){if((0,i.ensureInitialized)(o.FrameContexts.content),!e)throw new Error("[files.deleteCloudStorageFolder] channelId name cannot be null or empty");if(!n)throw new Error("[files.deleteCloudStorageFolder] folderToDelete cannot be null or empty");if(!t)throw new Error("[files.deleteCloudStorageFolder] Callback cannot be null");(0,r.sendMessageToParent)("files.deleteCloudStorageFolder",[e,n],t)},e.getCloudStorageFolderContents=function(e,n,t){if((0,i.ensureInitialized)(o.FrameContexts.content),!e||!n)throw new Error("[files.getCloudStorageFolderContents] folder/providerCode name cannot be null or empty");if(!t)throw new Error("[files.getCloudStorageFolderContents] Callback cannot be null");if("isSubdirectory"in e&&!e.isSubdirectory)throw new Error("[files.getCloudStorageFolderContents] provided folder is not a subDirectory");(0,r.sendMessageToParent)("files.getCloudStorageFolderContents",[e,n],t)},e.openCloudStorageFile=function(e,n,t){if((0,i.ensureInitialized)(o.FrameContexts.content),!e||!n)throw new Error("[files.openCloudStorageFile] file/providerCode cannot be null or empty");if(e.isSubdirectory)throw new Error("[files.openCloudStorageFile] provided file is a subDirectory");(0,r.sendMessageToParent)("files.openCloudStorageFile",[e,n,t])}}(n.files||(n.files={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.appEntity=void 0;var i=t(0),o=t(1),a=t(8);!function(){(n.appEntity||(n.appEntity={})).selectAppEntity=function(e,n,t,r){if((0,o.ensureInitialized)(a.FrameContexts.content),!e||0==e.length)throw new Error("[appEntity.selectAppEntity] threadId name cannot be null or empty");if(!r)throw new Error("[appEntity.selectAppEntity] Callback cannot be null");(0,i.sendMessageToParent)("appEntity.selectAppEntity",[e,n,t],r)}}()},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.teams=void 0;var r=t(0),i=t(1),o=t(8);!function(e){!function(e){e[e.Regular=0]="Regular",e[e.Private=1]="Private",e[e.Shared=2]="Shared"}(e.ChannelType||(e.ChannelType={})),e.getTeamChannels=function(e,n){if((0,i.ensureInitialized)(o.FrameContexts.content),!e)throw new Error("[teams.getTeamChannels] groupId cannot be null or empty");if(!n)throw new Error("[teams.getTeamChannels] Callback cannot be null");(0,r.sendMessageToParent)("teams.getTeamChannels",[e],n)},e.refreshSiteUrl=function(e,n){if((0,i.ensureInitialized)(),!e)throw new Error("[teams.refreshSiteUrl] threadId cannot be null or empty");if(!n)throw new Error("[teams.refreshSiteUrl] Callback cannot be null");(0,r.sendMessageToParent)("teams.refreshSiteUrl",[e],n)}}(n.teams||(n.teams={}))}])});

/***/ }),

/***/ "./node_modules/bowser/es5.js":
/*!************************************!*\
  !*** ./node_modules/bowser/es5.js ***!
  \************************************/
/***/ (function(module) {

!function(e,t){ true?module.exports=t():0}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1}else if(u[0][a]<u[1][a])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default},18:function(e,t,r){"use strict";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default},91:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1)})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default},93:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default},94:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default},95:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default}})}));

/***/ }),

/***/ "./src/app/scripts/appInsights.ts":
/*!****************************************!*\
  !*** ./src/app/scripts/appInsights.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AI = void 0;
const applicationinsights_web_1 = __webpack_require__(/*! @microsoft/applicationinsights-web */ "./node_modules/@microsoft/applicationinsights-web/dist-esm/applicationinsights-web.js");
const AppConfig_1 = __webpack_require__(/*! ../../config/AppConfig */ "./src/config/AppConfig.ts");
const useApplicationInsights = AppConfig_1.AppConfig.debug && !!AppConfig_1.AppConfig.AppInsight.instrumentationKey;
const enableTrace = AppConfig_1.AppConfig.trace;
function initAI() {
    if (useApplicationInsights) {
        const config = {
            config: {
                instrumentationKey: AppConfig_1.AppConfig.AppInsight.instrumentationKey,
                maxBatchInterval: 5000,
                maxAjaxCallsPerView: -1,
                disableDataLossAnalysis: false,
                enableUnhandledPromiseRejectionTracking: true,
                disableFetchTracking: false,
            },
        };
        const _ai = new applicationinsights_web_1.ApplicationInsights(config);
        _ai.loadAppInsights();
        _ai.trackPageView();
        return _ai;
    }
    else {
        return null;
    }
}
const instance = initAI();
function custom(callback) {
    instance && callback && callback(instance);
    return exports.AI;
}
function trackException(exception) {
    instance === null || instance === void 0 ? void 0 : instance.trackException(exception);
    return exports.AI;
}
function trackEvent(event, customProperties) {
    instance === null || instance === void 0 ? void 0 : instance.trackEvent(event, customProperties);
    return exports.AI;
}
function trackMetric(metric, customProperties) {
    instance === null || instance === void 0 ? void 0 : instance.trackMetric(metric, customProperties);
    return exports.AI;
}
function trackTrace(trace, customProperties) {
    if (enableTrace) {
        instance === null || instance === void 0 ? void 0 : instance.trackTrace(trace, customProperties);
    }
    return exports.AI;
}
function startTrackEvent(name) {
    instance === null || instance === void 0 ? void 0 : instance.startTrackEvent(name);
    return exports.AI;
}
function stopTrackEvent(name, properties, measurements) {
    instance === null || instance === void 0 ? void 0 : instance.stopTrackEvent(name, properties, measurements);
    return exports.AI;
}
function flushBuffer() {
    instance === null || instance === void 0 ? void 0 : instance.flush();
    return exports.AI;
}
function setAuthenticatedUserContext(userId, accountId) {
    instance === null || instance === void 0 ? void 0 : instance.setAuthenticatedUserContext(userId, accountId, true);
    return exports.AI;
}
exports.AI = Object.freeze({
    custom,
    trackException,
    trackEvent,
    trackMetric,
    trackTrace,
    startTrackEvent,
    stopTrackEvent,
    flushBuffer,
    setAuthenticatedUserContext,
});


/***/ }),

/***/ "./src/app/scripts/auth/client.ts":
/*!****************************************!*\
  !*** ./src/app/scripts/auth/client.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.client = void 0;
const msal_browser_1 = __webpack_require__(/*! @azure/msal-browser */ "./node_modules/@azure/msal-browser/dist/index.js");
const AppConfig_1 = __webpack_require__(/*! ../../../config/AppConfig */ "./src/config/AppConfig.ts");
exports.client = new msal_browser_1.PublicClientApplication({
    auth: {
        clientId: AppConfig_1.AppConfig.AuthClient.AppId,
        navigateToLoginRequestUrl: false,
    },
    cache: { cacheLocation: "localStorage" },
});


/***/ }),

/***/ "./src/app/scripts/auth/end.ts":
/*!*************************************!*\
  !*** ./src/app/scripts/auth/end.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const teams = __importStar(__webpack_require__(/*! @microsoft/teams-js */ "./node_modules/@microsoft/teams-js/dist/MicrosoftTeams.min.js"));
const utils_1 = __webpack_require__(/*! ../utils */ "./src/app/scripts/utils.ts");
const client_1 = __webpack_require__(/*! ./client */ "./src/app/scripts/auth/client.ts");
const appInsights_1 = __webpack_require__(/*! ../appInsights */ "./src/app/scripts/appInsights.ts");
async function processResponse() {
    try {
        const response = await client_1.client.handleRedirectPromise();
        if (response === null) {
            appInsights_1.AI.trackEvent({ name: "AuthResponseNull" }).flushBuffer();
            teams.authentication.notifyFailure("no redirect resonse");
        }
        else {
            appInsights_1.AI.trackTrace({
                message: "AuthEnd2",
                properties: {
                    account: response.account,
                    scopes: response.scopes,
                    tokenType: response.tokenType,
                }
            }).flushBuffer();
            teams.authentication.notifySuccess(JSON.stringify(response));
        }
    }
    catch (error) {
        appInsights_1.AI.trackException({ error });
        if ((0, utils_1.isUnknownObject)(error) && 'name' in error && 'message' in error) {
            teams.authentication.notifyFailure(`${error.name}: ${error.message}`);
        }
        else {
            teams.authentication.notifyFailure("Unexpected error");
        }
    }
}
appInsights_1.AI.trackTrace({ message: "AuthEnd1" });
teams.initialize(processResponse);


/***/ }),

/***/ "./src/app/scripts/logger.ts":
/*!***********************************!*\
  !*** ./src/app/scripts/logger.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.traceAsync = exports.trace = exports.error = exports.warn = exports.info = void 0;
const utils_1 = __webpack_require__(/*! ./utils */ "./src/app/scripts/utils.ts");
const appInsights_1 = __webpack_require__(/*! ./appInsights */ "./src/app/scripts/appInsights.ts");
const AppConfig_1 = __webpack_require__(/*! ../../config/AppConfig */ "./src/config/AppConfig.ts");
const enableConsoleLogging = AppConfig_1.AppConfig.debug;
function info(...args) {
    if (enableConsoleLogging) {
        console.log(...args);
        args.filter(utils_1.isUnknownObject).forEach(console.dir);
    }
}
exports.info = info;
function warn(...args) {
    if (enableConsoleLogging) {
        console.warn(...args);
        args.filter(utils_1.isUnknownObject).forEach(console.dir);
    }
}
exports.warn = warn;
function error(...args) {
    if (enableConsoleLogging) {
        console.error(...args);
        args.filter(utils_1.isUnknownObject).forEach(console.dir);
    }
}
exports.error = error;
function trace(_target, _propertyKey, descriptor) {
    if (enableConsoleLogging) {
        const orig = descriptor.value;
        const name = descriptor.value.name;
        descriptor.value = function traceWrapper(...args) {
            console.group(name);
            const start = performance.now();
            try {
                const res = orig.apply(this, args);
                if ((0, utils_1.isUnknownObject)(res) && typeof res.then === "function") {
                    console.warn(`trace: ${name} returned a promise. measured execution time may be wrong.`);
                }
                return res;
            }
            finally {
                const end = performance.now();
                const dt = (end - start).toFixed(1);
                console.info(`${name} took ${dt}ms`);
                console.groupEnd();
            }
        };
    }
    return descriptor;
}
exports.trace = trace;
function traceAsync(logToAI = false) {
    return function _traceAsync(_target, _propertyKey, descriptor) {
        if (enableConsoleLogging) {
            const orig = descriptor.value;
            const name = descriptor.value.name;
            descriptor.value = async function traceWrapper(...args) {
                console.group(name);
                const start = performance.now();
                try {
                    if (logToAI)
                        appInsights_1.AI.startTrackEvent(name);
                    const res = await orig.apply(this, args);
                    return res;
                }
                finally {
                    if (logToAI)
                        appInsights_1.AI.stopTrackEvent(name);
                    const end = performance.now();
                    const dt = (end - start).toFixed(1);
                    console.info(`${name} took ${dt}ms`);
                    console.groupEnd();
                }
            };
        }
        return descriptor;
    };
}
exports.traceAsync = traceAsync;


/***/ }),

/***/ "./src/app/scripts/utils.ts":
/*!**********************************!*\
  !*** ./src/app/scripts/utils.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.b64toBlob = exports.blob2dataUrl = exports.hashBlob = exports.imageComplete = exports.isGraphHostedContentUrl = exports.storage = exports.isUnknownObject = exports.fixMessageLink = exports.delay = exports.safeStringify = exports.cancellationNoThrow = exports.cancellation = exports.OperationCancelled = exports.nop = exports.filterNull = exports.assert1 = exports.assertT = exports.assert = void 0;
const logger_1 = __webpack_require__(/*! ./logger */ "./src/app/scripts/logger.ts");
const Bowser = __importStar(__webpack_require__(/*! bowser */ "./node_modules/bowser/es5.js"));
function assert(value, name = "value") {
    if (value === undefined || value === null) {
        throw new Error(`${name} must not be null or undefined`);
    }
    return value;
}
exports.assert = assert;
function assertT(value, type, name = "value") {
    if (typeof type === "string" && typeof value !== type) {
        throw new Error(`${name} is not of type ${type}`);
    }
    if (typeof type === "function" && !type(value)) {
        throw new Error(`${name} is not of the expected type`);
    }
    return value;
}
exports.assertT = assertT;
function assert1(value, name = "value") {
    if (value === undefined || value === null) {
        throw new Error(`${name} must not be null or undefined`);
    }
}
exports.assert1 = assert1;
function filterNull(value) {
    return value !== null;
}
exports.filterNull = filterNull;
function nop() { }
exports.nop = nop;
class OperationCancelled extends Error {
    constructor() {
        super("Cancelled by user request");
    }
}
exports.OperationCancelled = OperationCancelled;
function cancellation() {
    let cancelled = false;
    function cancel() {
        cancelled = true;
    }
    function throwIfCancellationRequested() {
        if (cancelled)
            throw new OperationCancelled();
    }
    return [cancel, throwIfCancellationRequested];
}
exports.cancellation = cancellation;
function cancellationNoThrow() {
    let cancelled = false;
    function cancel() {
        cancelled = true;
    }
    function isCancellationRequested() {
        return cancelled;
    }
    return [cancel, isCancellationRequested];
}
exports.cancellationNoThrow = cancellationNoThrow;
function safeStringify(o) {
    if (typeof o === "string") {
        return o;
    }
    const seen = new WeakSet();
    const replacer = (_, value) => {
        if (typeof value === 'object' && value !== null) {
            if (seen.has(value)) {
                return "[already seen]";
            }
            seen.add(value);
        }
        return value;
    };
    try {
        return JSON.stringify(o, replacer, 4);
    }
    catch (error) {
        return "[safeStringify: error]";
    }
}
exports.safeStringify = safeStringify;
const delay = (ms, cancel) => new Promise((resolve, reject) => {
    let timeout = -1;
    let interval = -1;
    let done = false;
    const cleanup = () => {
        if (done) {
            if (timeout >= 0)
                clearTimeout(timeout);
            if (interval >= 0)
                clearInterval(interval);
            timeout = interval = -1;
        }
    };
    if (cancel) {
        const checkCancel = () => {
            try {
                if (cancel()) {
                    done = true;
                    resolve();
                    return true;
                }
            }
            catch (error) {
                done = true;
                reject(new OperationCancelled());
                return true;
            }
            finally {
                cleanup();
            }
            return false;
        };
        if (checkCancel())
            return;
        interval = setInterval(checkCancel, 50);
    }
    const handler = () => {
        done = true;
        resolve();
        cleanup();
    };
    timeout = setTimeout(handler, ms);
});
exports.delay = delay;
function fixMessageLink(url) {
    if (typeof url !== "string" || url.trim() === "")
        return "";
    try {
        const a = new URL(url);
        a.pathname = decodeURIComponent(a.pathname);
        return a.toString();
    }
    catch (err) {
        (0, logger_1.warn)("invalid url", err);
        return "";
    }
}
exports.fixMessageLink = fixMessageLink;
function isUnknownObject(x) {
    return x !== null && typeof x === 'object';
}
exports.isUnknownObject = isUnknownObject;
exports.storage = (() => {
    const p = Bowser.getParser(navigator.userAgent);
    const name = p.getBrowserName(true);
    const isRunningInFirefox = name === "firefox";
    const isStorageManagerAvailable = navigator.storage && typeof navigator.storage.persist === "function" && typeof navigator.storage.persisted === "function";
    const inIFrame = (function inIframe() {
        try {
            return window.self !== window.top;
        }
        catch (e) {
            return true;
        }
    })();
    let permissionGranted = true;
    (async function check() {
        if (!isStorageManagerAvailable)
            return;
        if (await navigator.storage.persisted())
            return;
        permissionGranted = false;
        while (!(permissionGranted = await navigator.storage.persisted())) {
            if (!isRunningInFirefox) {
                permissionGranted = await navigator.storage.persist();
            }
            await (0, exports.delay)(20000);
        }
    })().catch(logger_1.error);
    return Object.freeze({
        granted: () => permissionGranted,
        askForPermission: isStorageManagerAvailable && isRunningInFirefox,
        needNewWindow: inIFrame && isRunningInFirefox,
    });
})();
const channelMsgContentRex = /^https:\/\/graph\.microsoft\.com\/.*\/teams\/[a-zA-Z0-9-]{36}\/channels\/[^/]+\/messages\/[0-9]+\/(replies\/[0-9]+\/)?hostedContents\//i;
const chatMsgContentRex = /^https:\/\/graph\.microsoft\.com\/.*\/chats\/[^/]+\/messages\/[0-9]+\/hostedContents\//i;
function isGraphHostedContentUrl(url) {
    try {
        new URL(url);
    }
    catch (error) {
        return false;
    }
    return channelMsgContentRex.test(url) || chatMsgContentRex.test(url);
}
exports.isGraphHostedContentUrl = isGraphHostedContentUrl;
function imageComplete(img, timeout = 30000) {
    if (img.complete) {
        return Promise.resolve(Boolean(img.naturalWidth || img.naturalHeight));
    }
    return new Promise((resolve) => {
        img.addEventListener("load", () => resolve(true), { once: true });
        img.addEventListener("error", () => resolve(false), { once: true });
        setTimeout(() => resolve(false), timeout);
    });
}
exports.imageComplete = imageComplete;
function blob2arrayBuffer(blob) {
    if (blob.arrayBuffer) {
        return blob.arrayBuffer();
    }
    else {
        const fr = new FileReader();
        fr.readAsArrayBuffer(blob);
        return new Promise(function (resolve, reject) {
            fr.onload = fr.onerror = function (evt) {
                fr.onload = fr.onerror = null;
                if (evt.type === 'load' && fr.result instanceof ArrayBuffer) {
                    resolve(fr.result);
                }
                else {
                    reject(new Error('Failed to read the blob'));
                }
            };
        });
    }
}
async function hashBlob(content) {
    const buffer = await blob2arrayBuffer(content);
    const res = Array.from(new Uint8Array(await crypto.subtle.digest('SHA-256', buffer)));
    return res.map(b => b.toString(16).padStart(2, '0')).join('');
}
exports.hashBlob = hashBlob;
async function blob2dataUrl(blob) {
    const fr = new FileReader();
    fr.readAsDataURL(blob);
    return new Promise(function (resolve, reject) {
        fr.onload = fr.onerror = function (evt) {
            fr.onload = fr.onerror = null;
            if (evt.type === 'load' && typeof fr.result == 'string') {
                resolve(fr.result);
            }
            else {
                reject(new Error('Failed to read the blob'));
            }
        };
    });
}
exports.blob2dataUrl = blob2dataUrl;
function b64toBlob(b64Data, sliceSize = 512) {
    (0, logger_1.info)(`▼▼▼ b64toBlob START b64Data: [${b64Data}] ▼▼▼`);
    let contentType = "";
    const endpos = b64Data.indexOf(";");
    if (endpos > 0) {
        const b64header = b64Data.substring(0, endpos);
        const start = b64header.indexOf(":") + 1;
        contentType = b64header.substring(start);
        (0, logger_1.info)(`header [${b64header} start: [${start}] ==> contentType: [${contentType}]`);
    }
    const byteCharacters = atob(b64Data.replace(/^.*,/, ""));
    const byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
    }
    const blob = new Blob(byteArrays, { type: contentType });
    (0, logger_1.info)(`▲▲▲ b64toBlob END ▲▲▲`);
    return blob;
}
exports.b64toBlob = b64toBlob;


/***/ }),

/***/ "./src/config/AppConfig.ts":
/*!*********************************!*\
  !*** ./src/config/AppConfig.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppConfig = void 0;
const config = () => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const res = {
        AppInfo: {
            name: (_a = "FindMsg") !== null && _a !== void 0 ? _a : "",
            appName: (_b = "G Message Finder") !== null && _b !== void 0 ? _b : "",
            logo: (_c = "https://static2.sharepointonline.com/files/fabric/assets/brand-icons/product-fluent/svg/teams_48x1.svg") !== null && _c !== void 0 ? _c : "https://static2.sharepointonline.com/files/fabric/assets/brand-icons/product-fluent/svg/teams_48x1.svg",
            host: (_d = "kacomsrd.github.io") !== null && _d !== void 0 ? _d : "",
        },
        AuthClient: {
            AppId: (_e = "67dc74f0-fb8c-47a4-8435-63253a3fc3bb") !== null && _e !== void 0 ? _e : "",
        },
        AppInsight: {
            instrumentationKey: (_f = "586f96ac-b9a5-461e-8f0b-8d75f6bc88d6") !== null && _f !== void 0 ? _f : "",
        },
        debug: ((_g = "true") === null || _g === void 0 ? void 0 : _g.toLowerCase()) === "true",
        trace: ((_h = "true") === null || _h === void 0 ? void 0 : _h.toLowerCase()) === "true",
    };
    return res;
};
exports.AppConfig = config();


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app/scripts/auth/end.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=authEnd.js.map